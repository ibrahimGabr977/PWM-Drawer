
PWM_DrawerVirtual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00002b9e  00002c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008001a6  008001a6  00002d78  2**0
                  ALLOC
  3 .stab         00001a34  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb5  00000000  00000000  000047ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005761  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00005921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00005b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009615  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000a920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ab00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ae07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee e9       	ldi	r30, 0x9E	; 158
     162:	fb e2       	ldi	r31, 0x2B	; 43
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 3a       	cpi	r26, 0xA6	; 166
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a6 ea       	ldi	r26, 0xA6	; 166
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ae 3c       	cpi	r26, 0xCE	; 206
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 10 10 	call	0x2020	; 0x2020 <main>
     184:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a4 e7       	ldi	r26, 0x74	; 116
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 37 10 	jmp	0x206e	; 0x206e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 27 10 	jmp	0x204e	; 0x204e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 27 10 	jmp	0x204e	; 0x204e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	84 e7       	ldi	r24, 0x74	; 116
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 37 10 	jmp	0x206e	; 0x206e <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	64 e7       	ldi	r22, 0x74	; 116
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 27 10 	jmp	0x204e	; 0x204e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 27 10 	jmp	0x204e	; 0x204e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 27 10 	jmp	0x204e	; 0x204e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 47 10 	jmp	0x208e	; 0x208e <__epilogue_restores__+0x20>

00000b08 <__floatunsisf>:
     b08:	a8 e0       	ldi	r26, 0x08	; 8
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__prologue_saves__+0x10>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__floatunsisf+0x20>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	60 c0       	rjmp	.+192    	; 0xbe8 <__floatunsisf+0xe0>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	8e e1       	ldi	r24, 0x1E	; 30
     b2e:	c8 2e       	mov	r12, r24
     b30:	d1 2c       	mov	r13, r1
     b32:	dc 82       	std	Y+4, r13	; 0x04
     b34:	cb 82       	std	Y+3, r12	; 0x03
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     b46:	fc 01       	movw	r30, r24
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f7 ff       	sbrs	r31, 7
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <__floatunsisf+0xbc>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	2e 1b       	sub	r18, r30
     b54:	3f 0b       	sbc	r19, r31
     b56:	57 01       	movw	r10, r14
     b58:	68 01       	movw	r12, r16
     b5a:	02 2e       	mov	r0, r18
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__floatunsisf+0x5e>
     b5e:	d6 94       	lsr	r13
     b60:	c7 94       	ror	r12
     b62:	b7 94       	ror	r11
     b64:	a7 94       	ror	r10
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <__floatunsisf+0x56>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__floatunsisf+0x7c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__floatunsisf+0x74>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatunsisf+0x9e>
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	4a 29       	or	r20, r10
     ba8:	5b 29       	or	r21, r11
     baa:	6c 29       	or	r22, r12
     bac:	7d 29       	or	r23, r13
     bae:	4d 83       	std	Y+5, r20	; 0x05
     bb0:	5e 83       	std	Y+6, r21	; 0x06
     bb2:	6f 83       	std	Y+7, r22	; 0x07
     bb4:	78 87       	std	Y+8, r23	; 0x08
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8e 1b       	sub	r24, r30
     bbc:	9f 0b       	sbc	r25, r31
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <__floatunsisf+0xe0>
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__floatunsisf+0xe0>
     bc8:	0e 2e       	mov	r0, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__floatunsisf+0xcc>
     bcc:	ee 0c       	add	r14, r14
     bce:	ff 1c       	adc	r15, r15
     bd0:	00 1f       	adc	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__floatunsisf+0xc4>
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	ce 1a       	sub	r12, r30
     be2:	df 0a       	sbc	r13, r31
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	cb 82       	std	Y+3, r12	; 0x03
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__epilogue_restores__+0x10>

00000bfa <__clzsi2>:
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	e8 16       	cp	r14, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	f8 06       	cpc	r15, r24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 07       	cpc	r16, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	18 07       	cpc	r17, r24
     c16:	88 f4       	brcc	.+34     	; 0xc3a <__clzsi2+0x40>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	31 f0       	breq	.+12     	; 0xc30 <__clzsi2+0x36>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__clzsi2+0x36>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__clzsi2+0x64>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <__clzsi2+0x64>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	e8 16       	cp	r14, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	f8 06       	cpc	r15, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 07       	cpc	r16, r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	18 07       	cpc	r17, r24
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x5c>
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__clzsi2+0x64>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	4a 0b       	sbc	r20, r26
     c6c:	5b 0b       	sbc	r21, r27
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__clzsi2+0x7e>
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__clzsi2+0x76>
     c7c:	f7 01       	movw	r30, r14
     c7e:	e4 58       	subi	r30, 0x84	; 132
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	80 81       	ld	r24, Z
     c84:	28 1b       	sub	r18, r24
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
     c8c:	c9 01       	movw	r24, r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <__pack_f>:
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	fc 01       	movw	r30, r24
     ca4:	e4 80       	ldd	r14, Z+4	; 0x04
     ca6:	f5 80       	ldd	r15, Z+5	; 0x05
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	80 81       	ld	r24, Z
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__pack_f+0x2e>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e1       	ldi	r26, 0x10	; 16
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 2a       	or	r14, r24
     cbe:	f9 2a       	or	r15, r25
     cc0:	0a 2b       	or	r16, r26
     cc2:	1b 2b       	or	r17, r27
     cc4:	a5 c0       	rjmp	.+330    	; 0xe10 <__pack_f+0x178>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	09 f4       	brne	.+2      	; 0xccc <__pack_f+0x34>
     cca:	9f c0       	rjmp	.+318    	; 0xe0a <__pack_f+0x172>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__pack_f+0x40>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	87 01       	movw	r16, r14
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x4a>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	01 05       	cpc	r16, r1
     cde:	11 05       	cpc	r17, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__pack_f+0x50>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	96 c0       	rjmp	.+300    	; 0xe14 <__pack_f+0x17c>
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	62 38       	cpi	r22, 0x82	; 130
     cf0:	79 07       	cpc	r23, r25
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__pack_f+0x5e>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <__pack_f+0x114>
     cf6:	22 e8       	ldi	r18, 0x82	; 130
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2a 31       	cpi	r18, 0x1A	; 26
     d00:	31 05       	cpc	r19, r1
     d02:	2c f0       	brlt	.+10     	; 0xd0e <__pack_f+0x76>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <__pack_f+0xca>
     d0e:	b8 01       	movw	r22, r16
     d10:	a7 01       	movw	r20, r14
     d12:	02 2e       	mov	r0, r18
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__pack_f+0x86>
     d16:	76 95       	lsr	r23
     d18:	67 95       	ror	r22
     d1a:	57 95       	ror	r21
     d1c:	47 95       	ror	r20
     d1e:	0a 94       	dec	r0
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__pack_f+0x7e>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__pack_f+0x9c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	2a 95       	dec	r18
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <__pack_f+0x94>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	a1 09       	sbc	r26, r1
     d3c:	b1 09       	sbc	r27, r1
     d3e:	8e 21       	and	r24, r14
     d40:	9f 21       	and	r25, r15
     d42:	a0 23       	and	r26, r16
     d44:	b1 23       	and	r27, r17
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__pack_f+0xbe>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	9a 01       	movw	r18, r20
     d58:	ab 01       	movw	r20, r22
     d5a:	28 2b       	or	r18, r24
     d5c:	39 2b       	or	r19, r25
     d5e:	4a 2b       	or	r20, r26
     d60:	5b 2b       	or	r21, r27
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	a0 70       	andi	r26, 0x00	; 0
     d6c:	b0 70       	andi	r27, 0x00	; 0
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <__pack_f+0xee>
     d78:	27 ff       	sbrs	r18, 7
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__pack_f+0xf6>
     d7c:	20 5c       	subi	r18, 0xC0	; 192
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__pack_f+0xf6>
     d86:	21 5c       	subi	r18, 0xC1	; 193
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	4f 4f       	sbci	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	3a 07       	cpc	r19, r26
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 07       	cpc	r20, r26
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	5a 07       	cpc	r21, r26
     da0:	10 f0       	brcs	.+4      	; 0xda6 <__pack_f+0x10e>
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	79 01       	movw	r14, r18
     da8:	8a 01       	movw	r16, r20
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <__pack_f+0x162>
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	71 05       	cpc	r23, r1
     db0:	64 f5       	brge	.+88     	; 0xe0a <__pack_f+0x172>
     db2:	fb 01       	movw	r30, r22
     db4:	e1 58       	subi	r30, 0x81	; 129
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	d8 01       	movw	r26, r16
     dba:	c7 01       	movw	r24, r14
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	a0 70       	andi	r26, 0x00	; 0
     dc2:	b0 70       	andi	r27, 0x00	; 0
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <__pack_f+0x144>
     dce:	e7 fe       	sbrs	r14, 7
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__pack_f+0x154>
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__pack_f+0x14c>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 0e       	add	r14, r24
     de6:	f9 1e       	adc	r15, r25
     de8:	0a 1f       	adc	r16, r26
     dea:	1b 1f       	adc	r17, r27
     dec:	17 ff       	sbrs	r17, 7
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__pack_f+0x162>
     df0:	16 95       	lsr	r17
     df2:	07 95       	ror	r16
     df4:	f7 94       	ror	r15
     df6:	e7 94       	ror	r14
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	16 95       	lsr	r17
     dfe:	07 95       	ror	r16
     e00:	f7 94       	ror	r15
     e02:	e7 94       	ror	r14
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__pack_f+0x164>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__pack_f+0x17c>
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	87 01       	movw	r16, r14
     e10:	ef ef       	ldi	r30, 0xFF	; 255
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	6e 2f       	mov	r22, r30
     e16:	67 95       	ror	r22
     e18:	66 27       	eor	r22, r22
     e1a:	67 95       	ror	r22
     e1c:	90 2f       	mov	r25, r16
     e1e:	9f 77       	andi	r25, 0x7F	; 127
     e20:	d7 94       	ror	r13
     e22:	dd 24       	eor	r13, r13
     e24:	d7 94       	ror	r13
     e26:	8e 2f       	mov	r24, r30
     e28:	86 95       	lsr	r24
     e2a:	49 2f       	mov	r20, r25
     e2c:	46 2b       	or	r20, r22
     e2e:	58 2f       	mov	r21, r24
     e30:	5d 29       	or	r21, r13
     e32:	b7 01       	movw	r22, r14
     e34:	ca 01       	movw	r24, r20
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <__unpack_f>:
     e42:	fc 01       	movw	r30, r24
     e44:	db 01       	movw	r26, r22
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	62 2f       	mov	r22, r18
     e4e:	6f 77       	andi	r22, 0x7F	; 127
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	22 1f       	adc	r18, r18
     e54:	22 27       	eor	r18, r18
     e56:	22 1f       	adc	r18, r18
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	89 2f       	mov	r24, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	82 2b       	or	r24, r18
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	99 1f       	adc	r25, r25
     e66:	99 27       	eor	r25, r25
     e68:	99 1f       	adc	r25, r25
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <__unpack_f+0x9e>
     e76:	41 15       	cp	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__unpack_f+0x42>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <__unpack_f+0xb0>
     e84:	82 e8       	ldi	r24, 0x82	; 130
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	9a 01       	movw	r18, r20
     e92:	ab 01       	movw	r20, r22
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <__unpack_f+0x54>
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8c 93       	st	X, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__unpack_f+0x80>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	20 30       	cpi	r18, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	38 07       	cpc	r19, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	48 07       	cpc	r20, r24
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	58 07       	cpc	r21, r24
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__unpack_f+0x66>
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	2d 93       	st	X+, r18
     ed6:	3d 93       	st	X+, r19
     ed8:	4d 93       	st	X+, r20
     eda:	5c 93       	st	X, r21
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret
     ee0:	2f 3f       	cpi	r18, 0xFF	; 255
     ee2:	31 05       	cpc	r19, r1
     ee4:	79 f4       	brne	.+30     	; 0xf04 <__unpack_f+0xc2>
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	61 05       	cpc	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	19 f4       	brne	.+6      	; 0xef6 <__unpack_f+0xb4>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
     ef4:	08 95       	ret
     ef6:	64 ff       	sbrs	r22, 4
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <__unpack_f+0xbe>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__unpack_f+0xe2>
     f00:	1c 92       	st	X, r1
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <__unpack_f+0xe2>
     f04:	2f 57       	subi	r18, 0x7F	; 127
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	3c 93       	st	X, r19
     f0c:	2e 93       	st	-X, r18
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8c 93       	st	X, r24
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	d1 f7       	brne	.-12     	; 0xf16 <__unpack_f+0xd4>
     f22:	70 64       	ori	r23, 0x40	; 64
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	4d 93       	st	X+, r20
     f28:	5d 93       	st	X+, r21
     f2a:	6d 93       	st	X+, r22
     f2c:	7c 93       	st	X, r23
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	08 95       	ret

00000f32 <__fpcmp_parts_f>:
     f32:	1f 93       	push	r17
     f34:	dc 01       	movw	r26, r24
     f36:	fb 01       	movw	r30, r22
     f38:	9c 91       	ld	r25, X
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__fpcmp_parts_f+0xe>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <__fpcmp_parts_f+0x9c>
     f40:	80 81       	ld	r24, Z
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0x16>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <__fpcmp_parts_f+0x9c>
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	51 f4       	brne	.+20     	; 0xf60 <__fpcmp_parts_f+0x2e>
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 91       	ld	r17, X
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	99 f5       	brne	.+102    	; 0xfba <__fpcmp_parts_f+0x88>
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	61 1b       	sub	r22, r17
     f5c:	71 09       	sbc	r23, r1
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <__fpcmp_parts_f+0xac>
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	21 f0       	breq	.+8      	; 0xf6c <__fpcmp_parts_f+0x3a>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__fpcmp_parts_f+0x42>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	b9 f1       	breq	.+110    	; 0xfda <__fpcmp_parts_f+0xa8>
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	89 f1       	breq	.+98     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     f72:	2d c0       	rjmp	.+90     	; 0xfce <__fpcmp_parts_f+0x9c>
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	1c 91       	ld	r17, X
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	f1 f0       	breq	.+60     	; 0xfba <__fpcmp_parts_f+0x88>
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	18 17       	cp	r17, r24
     f82:	d9 f4       	brne	.+54     	; 0xfba <__fpcmp_parts_f+0x88>
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	94 f0       	brlt	.+36     	; 0xfba <__fpcmp_parts_f+0x88>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	bc f0       	brlt	.+46     	; 0xfca <__fpcmp_parts_f+0x98>
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	8d 91       	ld	r24, X+
     fa0:	9d 91       	ld	r25, X+
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	24 81       	ldd	r18, Z+4	; 0x04
     faa:	35 81       	ldd	r19, Z+5	; 0x05
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <__fpcmp_parts_f+0x8e>
     fba:	11 23       	and	r17, r17
     fbc:	41 f0       	breq	.+16     	; 0xfce <__fpcmp_parts_f+0x9c>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	a4 07       	cpc	r26, r20
     fc6:	b5 07       	cpc	r27, r21
     fc8:	40 f4       	brcc	.+16     	; 0xfda <__fpcmp_parts_f+0xa8>
     fca:	11 23       	and	r17, r17
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <__fpcmp_parts_f+0xac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__fpcmp_parts_f+0xac>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	1f 91       	pop	r17
     fe2:	08 95       	ret

00000fe4 <WaveDrawer_init>:

};



void WaveDrawer_init(){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62

	WaveDrawer_LCD_init();
     fec:	0e 94 00 08 	call	0x1000	; 0x1000 <WaveDrawer_LCD_init>

	PWM_init();
     ff0:	0e 94 0d 0b 	call	0x161a	; 0x161a <PWM_init>

	PWM_SetDutyCycle(INITIAL_DUTY); //test 50%
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	0e 94 3e 0b 	call	0x167c	; 0x167c <PWM_SetDutyCycle>


}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <WaveDrawer_LCD_init>:



static void WaveDrawer_LCD_init(){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1008:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <LCD_init>
	LCD_create_custom_char(VER_INVER_L_ADDRESS, vInver_L);
    100c:	2e e7       	ldi	r18, 0x7E	; 126
    100e:	31 e0       	ldi	r19, 0x01	; 1
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	b9 01       	movw	r22, r18
    1016:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_create_custom_char>
	LCD_create_custom_char(HORI_INVER_OF0_ADDRESS, hInver_vInver_L);
    101a:	26 e8       	ldi	r18, 0x86	; 134
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	b9 01       	movw	r22, r18
    1024:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_create_custom_char>
	LCD_create_custom_char(UPPERSCORE_ADDRESS, upperscore);
    1028:	2e e8       	ldi	r18, 0x8E	; 142
    102a:	31 e0       	ldi	r19, 0x01	; 1
    102c:	88 e0       	ldi	r24, 0x08	; 8
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	b9 01       	movw	r22, r18
    1032:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_create_custom_char>
	LCD_create_custom_char(MUNDERSCORE_ADDRESS, underscore);
    1036:	26 e9       	ldi	r18, 0x96	; 150
    1038:	31 e0       	ldi	r19, 0x01	; 1
    103a:	89 e0       	ldi	r24, 0x09	; 9
    103c:	94 e0       	ldi	r25, 0x04	; 4
    103e:	b9 01       	movw	r22, r18
    1040:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_create_custom_char>
	LCD_create_custom_char(CUSTOM_N_ADDRESS, custom_N);
    1044:	2e e9       	ldi	r18, 0x9E	; 158
    1046:	31 e0       	ldi	r19, 0x01	; 1
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	b9 01       	movw	r22, r18
    104e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <LCD_create_custom_char>



}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <WaveDrawer_displayInfo>:

void WaveDrawer_displayInfo(){
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	displayWaveFrequency();
    1060:	0e 94 39 08 	call	0x1072	; 0x1072 <displayWaveFrequency>
	displayWaveDutyCycle();
    1064:	0e 94 58 08 	call	0x10b0	; 0x10b0 <displayWaveDutyCycle>
	displayWaveTime();
    1068:	0e 94 99 08 	call	0x1132	; 0x1132 <displayWaveTime>
}
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <displayWaveFrequency>:


static void displayWaveFrequency(){
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	LCD_set_cursor(0, 0);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <LCD_set_cursor>
	LCD_write_string("F:");
    1082:	80 e6       	ldi	r24, 0x60	; 96
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_write_string>
	LCD_write_decimal_number(PWM_get_frequency(1), 2);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <PWM_get_frequency>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	bc 01       	movw	r22, r24
    1098:	cd 01       	movw	r24, r26
    109a:	42 e0       	ldi	r20, 0x02	; 2
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_write_decimal_number>
	LCD_write_string("KHz");
    10a2:	83 e6       	ldi	r24, 0x63	; 99
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_write_string>

}
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <displayWaveDutyCycle>:
static void displayWaveDutyCycle(){
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	LCD_set_cursor(0, 14);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	6e e0       	ldi	r22, 0x0E	; 14
    10bc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <LCD_set_cursor>
	LCD_write_string("DC:");
    10c0:	87 e6       	ldi	r24, 0x67	; 103
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_write_string>
	LCD_write_number((u8)round(((PWM_getDutyCycle()*1.0 / MAX_DUTY*1.0))*100.0));
    10c8:	0e 94 99 0b 	call	0x1732	; 0x1732 <PWM_getDutyCycle>
    10cc:	cc 01       	movw	r24, r24
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	53 e4       	ldi	r21, 0x43	; 67
    10ea:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	bc 01       	movw	r22, r24
    10f4:	cd 01       	movw	r24, r26
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	48 ec       	ldi	r20, 0xC8	; 200
    10fc:	52 e4       	ldi	r21, 0x42	; 66
    10fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 a4 10 	call	0x2148	; 0x2148 <round>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <LCD_write_number>
	LCD_write_char('%');
    1126:	85 e2       	ldi	r24, 0x25	; 37
    1128:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_write_char>
}
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <displayWaveTime>:
static void displayWaveTime(){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
	LCD_set_cursor(1, 0);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <LCD_set_cursor>
	LCD_write_string("T:");
    1142:	8b e6       	ldi	r24, 0x6B	; 107
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_write_string>
	LCD_write_decimal_number(PWM_get_time(1), 3);
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <PWM_get_time>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	43 e0       	ldi	r20, 0x03	; 3
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <LCD_write_decimal_number>
	LCD_write_string("ms");
    1162:	8e e6       	ldi	r24, 0x6E	; 110
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_write_string>
}
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <WaveDrawer_draw>:




//Simulation version for 4*20 LCD
void WaveDrawer_draw(u16* ss){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <WaveDrawer_draw+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <WaveDrawer_draw+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03

	LCD_set_cursor(2, 0);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <LCD_set_cursor>
	for(u8 i = 0; i < LCD_COLS; i++){
    118a:	1a 82       	std	Y+2, r1	; 0x02
    118c:	1c c0       	rjmp	.+56     	; 0x11c6 <WaveDrawer_draw+0x56>
		LCD_write_char(ss[i] == HIGH? '1' : '0');
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 01       	movw	r18, r24
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	80 81       	ld	r24, Z
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	24 e0       	ldi	r18, 0x04	; 4
    11aa:	87 35       	cpi	r24, 0x57	; 87
    11ac:	92 07       	cpc	r25, r18
    11ae:	19 f4       	brne	.+6      	; 0x11b6 <WaveDrawer_draw+0x46>
    11b0:	81 e3       	ldi	r24, 0x31	; 49
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <WaveDrawer_draw+0x4a>
    11b6:	20 e3       	ldi	r18, 0x30	; 48
    11b8:	2d 83       	std	Y+5, r18	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_write_char>

//Simulation version for 4*20 LCD
void WaveDrawer_draw(u16* ss){

	LCD_set_cursor(2, 0);
	for(u8 i = 0; i < LCD_COLS; i++){
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	84 31       	cpi	r24, 0x14	; 20
    11ca:	08 f3       	brcs	.-62     	; 0x118e <WaveDrawer_draw+0x1e>
	}




	LCD_set_cursor(3, 0);
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <LCD_set_cursor>

	for(u8 i = 0; i < LCD_COLS; i++){
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	b3 c0       	rjmp	.+358    	; 0x133e <WaveDrawer_draw+0x1ce>
		if((ss[i-1] == LOW && ss[i] == HIGH && ss[i+1] == LOW)){     //LOW_TO_HIGH_TO_LOW case on middle of screen
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	82 1b       	sub	r24, r18
    11e4:	93 0b       	sbc	r25, r19
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	22 27       	eor	r18, r18
    11ec:	33 27       	eor	r19, r19
    11ee:	28 1b       	sub	r18, r24
    11f0:	39 0b       	sbc	r19, r25
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	fc 01       	movw	r30, r24
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	23 e0       	ldi	r18, 0x03	; 3
    1202:	88 3e       	cpi	r24, 0xE8	; 232
    1204:	92 07       	cpc	r25, r18
    1206:	41 f5       	brne	.+80     	; 0x1258 <WaveDrawer_draw+0xe8>
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9c 01       	movw	r18, r24
    1210:	22 0f       	add	r18, r18
    1212:	33 1f       	adc	r19, r19
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	24 e0       	ldi	r18, 0x04	; 4
    1224:	87 35       	cpi	r24, 0x57	; 87
    1226:	92 07       	cpc	r25, r18
    1228:	b9 f4       	brne	.+46     	; 0x1258 <WaveDrawer_draw+0xe8>
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	9c 01       	movw	r18, r24
    1234:	22 0f       	add	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	23 e0       	ldi	r18, 0x03	; 3
    1248:	88 3e       	cpi	r24, 0xE8	; 232
    124a:	92 07       	cpc	r25, r18
    124c:	29 f4       	brne	.+10     	; 0x1258 <WaveDrawer_draw+0xe8>

			LCD_write_custom_char(CUSTOM_N_ADDRESS);
    124e:	8a e0       	ldi	r24, 0x0A	; 10
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_write_custom_char>
    1256:	70 c0       	rjmp	.+224    	; 0x1338 <WaveDrawer_draw+0x1c8>


		}else if(ss[i] == HIGH && ss[i+1] == LOW){                   //HIGH_TO_LOW case on middle of screen
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 01       	movw	r18, r24
    1260:	22 0f       	add	r18, r18
    1262:	33 1f       	adc	r19, r19
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	fc 01       	movw	r30, r24
    126a:	e2 0f       	add	r30, r18
    126c:	f3 1f       	adc	r31, r19
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	24 e0       	ldi	r18, 0x04	; 4
    1274:	87 35       	cpi	r24, 0x57	; 87
    1276:	92 07       	cpc	r25, r18
    1278:	b9 f4       	brne	.+46     	; 0x12a8 <WaveDrawer_draw+0x138>
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	9c 01       	movw	r18, r24
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	fc 01       	movw	r30, r24
    128e:	e2 0f       	add	r30, r18
    1290:	f3 1f       	adc	r31, r19
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	23 e0       	ldi	r18, 0x03	; 3
    1298:	88 3e       	cpi	r24, 0xE8	; 232
    129a:	92 07       	cpc	r25, r18
    129c:	29 f4       	brne	.+10     	; 0x12a8 <WaveDrawer_draw+0x138>

			LCD_write_custom_char(HORI_INVER_OF0_ADDRESS);
    129e:	87 e0       	ldi	r24, 0x07	; 7
    12a0:	94 e0       	ldi	r25, 0x04	; 4
    12a2:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_write_custom_char>
    12a6:	48 c0       	rjmp	.+144    	; 0x1338 <WaveDrawer_draw+0x1c8>


		}else if(ss[i-1] == LOW && ss[i] == HIGH){                   //LOW_TO_HIGH case on middle of the screen
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	82 1b       	sub	r24, r18
    12b4:	93 0b       	sbc	r25, r19
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	22 27       	eor	r18, r18
    12bc:	33 27       	eor	r19, r19
    12be:	28 1b       	sub	r18, r24
    12c0:	39 0b       	sbc	r19, r25
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	fc 01       	movw	r30, r24
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	23 e0       	ldi	r18, 0x03	; 3
    12d2:	88 3e       	cpi	r24, 0xE8	; 232
    12d4:	92 07       	cpc	r25, r18
    12d6:	b1 f4       	brne	.+44     	; 0x1304 <WaveDrawer_draw+0x194>
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9c 01       	movw	r18, r24
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	fc 01       	movw	r30, r24
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	24 e0       	ldi	r18, 0x04	; 4
    12f4:	87 35       	cpi	r24, 0x57	; 87
    12f6:	92 07       	cpc	r25, r18
    12f8:	29 f4       	brne	.+10     	; 0x1304 <WaveDrawer_draw+0x194>
			LCD_write_custom_char(VER_INVER_L_ADDRESS);
    12fa:	86 e0       	ldi	r24, 0x06	; 6
    12fc:	94 e0       	ldi	r25, 0x04	; 4
    12fe:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_write_custom_char>
    1302:	1a c0       	rjmp	.+52     	; 0x1338 <WaveDrawer_draw+0x1c8>


		}else if(ss[i] == HIGH){                                     //other HIGH cases
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9c 01       	movw	r18, r24
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	fc 01       	movw	r30, r24
    1316:	e2 0f       	add	r30, r18
    1318:	f3 1f       	adc	r31, r19
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	24 e0       	ldi	r18, 0x04	; 4
    1320:	87 35       	cpi	r24, 0x57	; 87
    1322:	92 07       	cpc	r25, r18
    1324:	29 f4       	brne	.+10     	; 0x1330 <WaveDrawer_draw+0x1c0>
			LCD_write_custom_char(UPPERSCORE_ADDRESS);
    1326:	88 e0       	ldi	r24, 0x08	; 8
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_write_custom_char>
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <WaveDrawer_draw+0x1c8>

		}else{                                                       //other low cases
			LCD_write_custom_char(MUNDERSCORE_ADDRESS);
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	94 e0       	ldi	r25, 0x04	; 4
    1334:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <LCD_write_custom_char>



	LCD_set_cursor(3, 0);

	for(u8 i = 0; i < LCD_COLS; i++){
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 31       	cpi	r24, 0x14	; 20
    1342:	08 f4       	brcc	.+2      	; 0x1346 <WaveDrawer_draw+0x1d6>
    1344:	49 cf       	rjmp	.-366    	; 0x11d8 <WaveDrawer_draw+0x68>
			LCD_write_custom_char(MUNDERSCORE_ADDRESS);
		}
	}


}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <PWM_Drawer_startProgram>:

const u16 signals_series[LCD_COLS];
u16 duty_cycle = INITIAL_DUTY;


void PWM_Drawer_startProgram(){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	init();
    135e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <init>
	startDrawing();
    1362:	0e 94 00 0b 	call	0x1600	; 0x1600 <startDrawing>
	 while (1) {


		 if(!isIncreaseDutyCycleButtonClicked()){
    1366:	0e 94 16 0a 	call	0x142c	; 0x142c <isIncreaseDutyCycleButtonClicked>
    136a:	88 23       	and	r24, r24
    136c:	39 f4       	brne	.+14     	; 0x137c <PWM_Drawer_startProgram+0x26>

			 updateDisplayWithNewDutyCycle(INCREASE);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	0e 94 37 0a 	call	0x146e	; 0x146e <updateDisplayWithNewDutyCycle>

			 while(!isIncreaseDutyCycleButtonClicked());
    1374:	0e 94 16 0a 	call	0x142c	; 0x142c <isIncreaseDutyCycleButtonClicked>
    1378:	88 23       	and	r24, r24
    137a:	e1 f3       	breq	.-8      	; 0x1374 <PWM_Drawer_startProgram+0x1e>



		 }

		 if (!isDecreaseDutyCycleButtonClicked()){
    137c:	0e 94 21 0a 	call	0x1442	; 0x1442 <isDecreaseDutyCycleButtonClicked>
    1380:	88 23       	and	r24, r24
    1382:	39 f4       	brne	.+14     	; 0x1392 <PWM_Drawer_startProgram+0x3c>

			 updateDisplayWithNewDutyCycle(DECREASE);
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	0e 94 37 0a 	call	0x146e	; 0x146e <updateDisplayWithNewDutyCycle>



			 while(!isDecreaseDutyCycleButtonClicked());
    138a:	0e 94 21 0a 	call	0x1442	; 0x1442 <isDecreaseDutyCycleButtonClicked>
    138e:	88 23       	and	r24, r24
    1390:	e1 f3       	breq	.-8      	; 0x138a <PWM_Drawer_startProgram+0x34>
		 }



		 if (!isReDrawButtonClicked()){
    1392:	0e 94 2c 0a 	call	0x1458	; 0x1458 <isReDrawButtonClicked>
    1396:	88 23       	and	r24, r24
    1398:	31 f7       	brne	.-52     	; 0x1366 <PWM_Drawer_startProgram+0x10>

		    updateDisplayWithNewDutyCycle(REDRAW);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	0e 94 37 0a 	call	0x146e	; 0x146e <updateDisplayWithNewDutyCycle>



			while(!isReDrawButtonClicked());
    13a0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <isReDrawButtonClicked>
    13a4:	88 23       	and	r24, r24
    13a6:	e1 f3       	breq	.-8      	; 0x13a0 <PWM_Drawer_startProgram+0x4a>
    13a8:	de cf       	rjmp	.-68     	; 0x1366 <PWM_Drawer_startProgram+0x10>

000013aa <init>:
	     }
	 }
}


static void init(){
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	WaveDrawer_init();
    13b2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <WaveDrawer_init>
	PWM_createSignalsSeries(signals_series, LCD_COLS);
    13b6:	86 ea       	ldi	r24, 0xA6	; 166
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	64 e1       	ldi	r22, 0x14	; 20
    13bc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <PWM_createSignalsSeries>

	initControllersButtons();
    13c0:	0e 94 e5 09 	call	0x13ca	; 0x13ca <initControllersButtons>
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <initControllersButtons>:



static void initControllersButtons(){
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(CONTROLLERS_DDR, INCREASE_BUTTON_BIT);
    13d2:	a1 e3       	ldi	r26, 0x31	; 49
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e1 e3       	ldi	r30, 0x31	; 49
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	8b 7f       	andi	r24, 0xFB	; 251
    13de:	8c 93       	st	X, r24
	CLR_BIT(CONTROLLERS_DDR, DECREASE_BUTTON_BIT);
    13e0:	a1 e3       	ldi	r26, 0x31	; 49
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e1 e3       	ldi	r30, 0x31	; 49
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	8f 7b       	andi	r24, 0xBF	; 191
    13ec:	8c 93       	st	X, r24
	CLR_BIT(REDRAW_BUTTON_DDR, REDRAW_BUTTON_BIT);
    13ee:	a7 e3       	ldi	r26, 0x37	; 55
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e7 e3       	ldi	r30, 0x37	; 55
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	8c 93       	st	X, r24

	SET_BIT(CONTROLLERS_PORT, INCREASE_BUTTON_BIT);
    13fc:	a2 e3       	ldi	r26, 0x32	; 50
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e2 e3       	ldi	r30, 0x32	; 50
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	84 60       	ori	r24, 0x04	; 4
    1408:	8c 93       	st	X, r24
	SET_BIT(CONTROLLERS_PORT, DECREASE_BUTTON_BIT);
    140a:	a2 e3       	ldi	r26, 0x32	; 50
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e2 e3       	ldi	r30, 0x32	; 50
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 64       	ori	r24, 0x40	; 64
    1416:	8c 93       	st	X, r24
	SET_BIT(REDRAW_BUTTON_PORT, REDRAW_BUTTON_BIT);
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	8c 93       	st	X, r24
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <isIncreaseDutyCycleButtonClicked>:



static u8 isIncreaseDutyCycleButtonClicked(){
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(CONTROLLERS_PIN, INCREASE_BUTTON_BIT);
    1434:	e0 e3       	ldi	r30, 0x30	; 48
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	84 70       	andi	r24, 0x04	; 4

}
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <isDecreaseDutyCycleButtonClicked>:


static u8 isDecreaseDutyCycleButtonClicked(){
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(CONTROLLERS_PIN, DECREASE_BUTTON_BIT);
    144a:	e0 e3       	ldi	r30, 0x30	; 48
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	80 74       	andi	r24, 0x40	; 64
}
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <isReDrawButtonClicked>:


static u8 isReDrawButtonClicked(){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(REDRAW_BUTTON_PIN, REDRAW_BUTTON_BIT);
    1460:	e6 e3       	ldi	r30, 0x36	; 54
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	81 70       	andi	r24, 0x01	; 1
}
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <updateDisplayWithNewDutyCycle>:


//update duty cycle by percentage for example by 5%
static void updateDisplayWithNewDutyCycle(s8 direction){
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	61 97       	sbiw	r28, 0x11	; 17
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	89 8b       	std	Y+17, r24	; 0x11
	u16 newDuty = PWM_getDutyCycle() +(direction * (MAX_DUTY *(BOOST_STEP/100.0)));
    148c:	0e 94 99 0b 	call	0x1732	; 0x1732 <PWM_getDutyCycle>
    1490:	cc 01       	movw	r24, r24
    1492:	a0 e0       	ldi	r26, 0x00	; 0
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    149e:	7b 01       	movw	r14, r22
    14a0:	8c 01       	movw	r16, r24
    14a2:	89 89       	ldd	r24, Y+17	; 0x11
    14a4:	99 27       	eor	r25, r25
    14a6:	87 fd       	sbrc	r24, 7
    14a8:	90 95       	com	r25
    14aa:	a9 2f       	mov	r26, r25
    14ac:	b9 2f       	mov	r27, r25
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	2d ec       	ldi	r18, 0xCD	; 205
    14c0:	3c ec       	ldi	r19, 0xCC	; 204
    14c2:	4c e4       	ldi	r20, 0x4C	; 76
    14c4:	51 e4       	ldi	r21, 0x41	; 65
    14c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9c 01       	movw	r18, r24
    14d0:	ad 01       	movw	r20, r26
    14d2:	c8 01       	movw	r24, r16
    14d4:	b7 01       	movw	r22, r14
    14d6:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	98 8b       	std	Y+16, r25	; 0x10
    14ec:	8f 87       	std	Y+15, r24	; 0x0f

	PWM_SetDutyCycle(newDuty);
    14ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f0:	0e 94 3e 0b 	call	0x167c	; 0x167c <PWM_SetDutyCycle>

	PWM_createSignalsSeries(signals_series, LCD_COLS);
    14f4:	86 ea       	ldi	r24, 0xA6	; 166
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	64 e1       	ldi	r22, 0x14	; 20
    14fa:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <PWM_createSignalsSeries>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e8       	ldi	r26, 0x80	; 128
    1504:	bf e3       	ldi	r27, 0x3F	; 63
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a e7       	ldi	r20, 0x7A	; 122
    151c:	55 e4       	ldi	r21, 0x45	; 69
    151e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8f 83       	std	Y+7, r24	; 0x07
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	a9 87       	std	Y+9, r26	; 0x09
    152c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <updateDisplayWithNewDutyCycle+0xe2>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <updateDisplayWithNewDutyCycle+0x160>
	else if (__tmp > 65535)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <updateDisplayWithNewDutyCycle+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <updateDisplayWithNewDutyCycle+0x142>
    1592:	80 e9       	ldi	r24, 0x90	; 144
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <updateDisplayWithNewDutyCycle+0x130>
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <updateDisplayWithNewDutyCycle+0x124>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <updateDisplayWithNewDutyCycle+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <updateDisplayWithNewDutyCycle+0x16c>
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	startDrawing();
    15e2:	0e 94 00 0b 	call	0x1600	; 0x1600 <startDrawing>

}
    15e6:	61 96       	adiw	r28, 0x11	; 17
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret

00001600 <startDrawing>:





static void startDrawing(){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	WaveDrawer_displayInfo();
    1608:	0e 94 2c 08 	call	0x1058	; 0x1058 <WaveDrawer_displayInfo>
	WaveDrawer_draw(signals_series);
    160c:	86 ea       	ldi	r24, 0xA6	; 166
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 b8 08 	call	0x1170	; 0x1170 <WaveDrawer_draw>

}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <PWM_init>:
 */


#include "PWM_Driver.h"

void PWM_init() {
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62

    // Set OC1A (PD5) as an output
    SET_BIT(OC_DIR, OC);
    1622:	a1 e3       	ldi	r26, 0x31	; 49
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e1 e3       	ldi	r30, 0x31	; 49
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 62       	ori	r24, 0x20	; 32
    162e:	8c 93       	st	X, r24
    //Set PD0 as input to receive outputs from PD5
    CLR_BIT(OC_DIR, PD0);
    1630:	a1 e3       	ldi	r26, 0x31	; 49
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e1 e3       	ldi	r30, 0x31	; 49
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8e 7f       	andi	r24, 0xFE	; 254
    163c:	8c 93       	st	X, r24

    // Configure Timer1 for Fast PWM mode, 8-bit
    SET_BIT(TCCRA, WGM1);
    163e:	af e4       	ldi	r26, 0x4F	; 79
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ef e4       	ldi	r30, 0x4F	; 79
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	81 60       	ori	r24, 0x01	; 1
    164a:	8c 93       	st	X, r24
    SET_BIT(TCCRB, WGM2);
    164c:	ae e4       	ldi	r26, 0x4E	; 78
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ee e4       	ldi	r30, 0x4E	; 78
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 60       	ori	r24, 0x08	; 8
    1658:	8c 93       	st	X, r24
    SET_BIT(TCCRB, CS);
    165a:	ae e4       	ldi	r26, 0x4E	; 78
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ee e4       	ldi	r30, 0x4E	; 78
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	81 60       	ori	r24, 0x01	; 1
    1666:	8c 93       	st	X, r24


    // Set OC1A (PB1) to non-inverted PWM
    SET_BIT(TCCRA, COM);
    1668:	af e4       	ldi	r26, 0x4F	; 79
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ef e4       	ldi	r30, 0x4F	; 79
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 68       	ori	r24, 0x80	; 128
    1674:	8c 93       	st	X, r24
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(u8 duty_cycle) {
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	89 83       	std	Y+1, r24	; 0x01
	if(duty_cycle < MIN_DUTY){
		duty_cycle = MIN_DUTY;
	}


    OCR = duty_cycle;
    1688:	ea e4       	ldi	r30, 0x4A	; 74
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
}
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <PWM_isSignalHigh>:


u8 PWM_isSignalHigh(){
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(OC_PIN, PD0);
    16a6:	e0 e3       	ldi	r30, 0x30	; 48
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	81 70       	andi	r24, 0x01	; 1
}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <PWM_createSignalsSeries>:


void PWM_createSignalsSeries(u16* signals_series, u8 series_length){
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	28 97       	sbiw	r28, 0x08	; 8
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	9b 83       	std	Y+3, r25	; 0x03
    16ca:	8a 83       	std	Y+2, r24	; 0x02
    16cc:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i = 0; i<series_length; i++){
    16ce:	19 82       	std	Y+1, r1	; 0x01
    16d0:	23 c0       	rjmp	.+70     	; 0x1718 <PWM_createSignalsSeries+0x64>
		signals_series[i] = (PWM_isSignalHigh()? HIGH : LOW);
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c 01       	movw	r18, r24
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	ac 01       	movw	r20, r24
    16e4:	42 0f       	add	r20, r18
    16e6:	53 1f       	adc	r21, r19
    16e8:	58 87       	std	Y+8, r21	; 0x08
    16ea:	4f 83       	std	Y+7, r20	; 0x07
    16ec:	0e 94 4f 0b 	call	0x169e	; 0x169e <PWM_isSignalHigh>
    16f0:	88 23       	and	r24, r24
    16f2:	29 f0       	breq	.+10     	; 0x16fe <PWM_createSignalsSeries+0x4a>
    16f4:	87 e5       	ldi	r24, 0x57	; 87
    16f6:	94 e0       	ldi	r25, 0x04	; 4
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <PWM_createSignalsSeries+0x52>
    16fe:	e8 ee       	ldi	r30, 0xE8	; 232
    1700:	f3 e0       	ldi	r31, 0x03	; 3
    1702:	fe 83       	std	Y+6, r31	; 0x06
    1704:	ed 83       	std	Y+5, r30	; 0x05
    1706:	4d 81       	ldd	r20, Y+5	; 0x05
    1708:	5e 81       	ldd	r21, Y+6	; 0x06
    170a:	ef 81       	ldd	r30, Y+7	; 0x07
    170c:	f8 85       	ldd	r31, Y+8	; 0x08
    170e:	51 83       	std	Z+1, r21	; 0x01
    1710:	40 83       	st	Z, r20
	return GET_BIT(OC_PIN, PD0);
}


void PWM_createSignalsSeries(u16* signals_series, u8 series_length){
	for(u8 i = 0; i<series_length; i++){
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	99 81       	ldd	r25, Y+1	; 0x01
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	98 17       	cp	r25, r24
    171e:	c8 f2       	brcs	.-78     	; 0x16d2 <PWM_createSignalsSeries+0x1e>
		signals_series[i] = (PWM_isSignalHigh()? HIGH : LOW);
	}
}
    1720:	28 96       	adiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <PWM_getDutyCycle>:


u16 PWM_getDutyCycle(){
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	return OCR;
    173a:	ea e4       	ldi	r30, 0x4A	; 74
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <PWM_get_frequency>:

f32 PWM_get_frequency(u16 prescaler) {
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <PWM_get_frequency+0x6>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
	 return ((double)F_CPU / (prescaler * 256.0)) / 1000.0;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	cc 01       	movw	r24, r24
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	53 e4       	ldi	r21, 0x43	; 67
    1778:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9c 01       	movw	r18, r24
    1782:	ad 01       	movw	r20, r26
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	74 e2       	ldi	r23, 0x24	; 36
    1788:	84 e7       	ldi	r24, 0x74	; 116
    178a:	9b e4       	ldi	r25, 0x4B	; 75
    178c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	bc 01       	movw	r22, r24
    1796:	cd 01       	movw	r24, r26
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	54 e4       	ldi	r21, 0x44	; 68
    17a0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
}
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <PWM_get_time>:

f32 PWM_get_time(u16 prescaler) {
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <PWM_get_time+0x6>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    return 1.0 / PWM_get_frequency(prescaler);
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <PWM_get_frequency>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	80 e8       	ldi	r24, 0x80	; 128
    17d6:	9f e3       	ldi	r25, 0x3F	; 63
    17d8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
}
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <LCD_init>:


#include "LCD_Driver.h"

// Function to initialize the LCD
void LCD_init() {
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	2e 97       	sbiw	r28, 0x0e	; 14
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    // Set PC0, PC1, PC2 as output for E, RW, RS
    DDRB |= (1 << PB1) | (1 << PB2) | (1 << PB3);
    1802:	a7 e3       	ldi	r26, 0x37	; 55
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e3       	ldi	r30, 0x37	; 55
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8e 60       	ori	r24, 0x0E	; 14
    180e:	8c 93       	st	X, r24

    // Set PA0 to PA7 as output for data bits
    DDRA = 0xFF;
    1810:	ea e3       	ldi	r30, 0x3A	; 58
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8f ef       	ldi	r24, 0xFF	; 255
    1816:	80 83       	st	Z, r24
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e7       	ldi	r26, 0x70	; 112
    181e:	b1 e4       	ldi	r27, 0x41	; 65
    1820:	8b 87       	std	Y+11, r24	; 0x0b
    1822:	9c 87       	std	Y+12, r25	; 0x0c
    1824:	ad 87       	std	Y+13, r26	; 0x0d
    1826:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	6b 85       	ldd	r22, Y+11	; 0x0b
    182a:	7c 85       	ldd	r23, Y+12	; 0x0c
    182c:	8d 85       	ldd	r24, Y+13	; 0x0d
    182e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a e7       	ldi	r20, 0x7A	; 122
    1836:	55 e4       	ldi	r21, 0x45	; 69
    1838:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8f 83       	std	Y+7, r24	; 0x07
    1842:	98 87       	std	Y+8, r25	; 0x08
    1844:	a9 87       	std	Y+9, r26	; 0x09
    1846:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1848:	6f 81       	ldd	r22, Y+7	; 0x07
    184a:	78 85       	ldd	r23, Y+8	; 0x08
    184c:	89 85       	ldd	r24, Y+9	; 0x09
    184e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <LCD_init+0x7c>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <LCD_init+0xfa>
	else if (__tmp > 65535)
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <LCD_init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	6b 85       	ldd	r22, Y+11	; 0x0b
    1884:	7c 85       	ldd	r23, Y+12	; 0x0c
    1886:	8d 85       	ldd	r24, Y+13	; 0x0d
    1888:	9e 85       	ldd	r25, Y+14	; 0x0e
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <LCD_init+0xdc>
    18ac:	80 e9       	ldi	r24, 0x90	; 144
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_init+0xca>
    18bc:	9c 83       	std	Y+4, r25	; 0x04
    18be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	9e 81       	ldd	r25, Y+6	; 0x06
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <LCD_init+0xbe>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <LCD_init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_init+0x106>
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01

    // Initialize LCD in 8-bit mode
    _delay_ms(POWER_DELAY);             // Wait for power-up
    LCD_write_command(0x38);   // 8-bit, 4-line
    18fc:	88 e3       	ldi	r24, 0x38	; 56
    18fe:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>
    LCD_write_command(0x0C);   // Display ON, Cursor OFF
    1902:	8c e0       	ldi	r24, 0x0C	; 12
    1904:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>
    LCD_clearScreen();   // Clear display
    1908:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <LCD_clearScreen>
    LCD_write_command(0x06);   // Entry mode: Increment cursor, no display shift
    190c:	86 e0       	ldi	r24, 0x06	; 6
    190e:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>
}
    1912:	2e 96       	adiw	r28, 0x0e	; 14
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <LCD_write_command>:

// Function to write a command to the LCD
void LCD_write_command(u8 command) {
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	69 97       	sbiw	r28, 0x19	; 25
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	89 8f       	std	Y+25, r24	; 0x19
    // RS = 0 for command mode
    PORTB &= ~(1 << PB1);
    193a:	a8 e3       	ldi	r26, 0x38	; 56
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e8 e3       	ldi	r30, 0x38	; 56
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8d 7f       	andi	r24, 0xFD	; 253
    1946:	8c 93       	st	X, r24
    // RW = 0 for write mode
    PORTB &= ~(1 << PB2);
    1948:	a8 e3       	ldi	r26, 0x38	; 56
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e8 e3       	ldi	r30, 0x38	; 56
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8b 7f       	andi	r24, 0xFB	; 251
    1954:	8c 93       	st	X, r24
    // Enable the E signal
    PORTB |= (1 << PB3);
    1956:	a8 e3       	ldi	r26, 0x38	; 56
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e8 e3       	ldi	r30, 0x38	; 56
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	88 60       	ori	r24, 0x08	; 8
    1962:	8c 93       	st	X, r24
    // Send the command
    PORTA = command;
    1964:	eb e3       	ldi	r30, 0x3B	; 59
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	89 8d       	ldd	r24, Y+25	; 0x19
    196a:	80 83       	st	Z, r24
    // Disable the E signal
    PORTB &= ~(1 << PB3);
    196c:	a8 e3       	ldi	r26, 0x38	; 56
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e8 e3       	ldi	r30, 0x38	; 56
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	87 7f       	andi	r24, 0xF7	; 247
    1978:	8c 93       	st	X, r24
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a0 e8       	ldi	r26, 0x80	; 128
    1980:	bf e3       	ldi	r27, 0x3F	; 63
    1982:	8d 8b       	std	Y+21, r24	; 0x15
    1984:	9e 8b       	std	Y+22, r25	; 0x16
    1986:	af 8b       	std	Y+23, r26	; 0x17
    1988:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    198a:	6d 89       	ldd	r22, Y+21	; 0x15
    198c:	7e 89       	ldd	r23, Y+22	; 0x16
    198e:	8f 89       	ldd	r24, Y+23	; 0x17
    1990:	98 8d       	ldd	r25, Y+24	; 0x18
    1992:	2b ea       	ldi	r18, 0xAB	; 171
    1994:	3a ea       	ldi	r19, 0xAA	; 170
    1996:	4a ea       	ldi	r20, 0xAA	; 170
    1998:	50 e4       	ldi	r21, 0x40	; 64
    199a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	89 8b       	std	Y+17, r24	; 0x11
    19a4:	9a 8b       	std	Y+18, r25	; 0x12
    19a6:	ab 8b       	std	Y+19, r26	; 0x13
    19a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19aa:	69 89       	ldd	r22, Y+17	; 0x11
    19ac:	7a 89       	ldd	r23, Y+18	; 0x12
    19ae:	8b 89       	ldd	r24, Y+19	; 0x13
    19b0:	9c 89       	ldd	r25, Y+20	; 0x14
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e8       	ldi	r20, 0x80	; 128
    19b8:	5f e3       	ldi	r21, 0x3F	; 63
    19ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    19be:	88 23       	and	r24, r24
    19c0:	1c f4       	brge	.+6      	; 0x19c8 <LCD_write_command+0xa4>
		__ticks = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	88 8b       	std	Y+16, r24	; 0x10
    19c6:	91 c0       	rjmp	.+290    	; 0x1aea <LCD_write_command+0x1c6>
	else if (__tmp > 255)
    19c8:	69 89       	ldd	r22, Y+17	; 0x11
    19ca:	7a 89       	ldd	r23, Y+18	; 0x12
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4f e7       	ldi	r20, 0x7F	; 127
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    19dc:	18 16       	cp	r1, r24
    19de:	0c f0       	brlt	.+2      	; 0x19e2 <LCD_write_command+0xbe>
    19e0:	7b c0       	rjmp	.+246    	; 0x1ad8 <LCD_write_command+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8c 87       	std	Y+12, r24	; 0x0c
    19fc:	9d 87       	std	Y+13, r25	; 0x0d
    19fe:	ae 87       	std	Y+14, r26	; 0x0e
    1a00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a e7       	ldi	r20, 0x7A	; 122
    1a10:	55 e4       	ldi	r21, 0x45	; 69
    1a12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	88 87       	std	Y+8, r24	; 0x08
    1a1c:	99 87       	std	Y+9, r25	; 0x09
    1a1e:	aa 87       	std	Y+10, r26	; 0x0a
    1a20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a22:	68 85       	ldd	r22, Y+8	; 0x08
    1a24:	79 85       	ldd	r23, Y+9	; 0x09
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <LCD_write_command+0x120>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9f 83       	std	Y+7, r25	; 0x07
    1a40:	8e 83       	std	Y+6, r24	; 0x06
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <LCD_write_command+0x19e>
	else if (__tmp > 65535)
    1a44:	68 85       	ldd	r22, Y+8	; 0x08
    1a46:	79 85       	ldd	r23, Y+9	; 0x09
    1a48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <LCD_write_command+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <LCD_write_command+0x180>
    1a86:	80 e9       	ldi	r24, 0x90	; 144
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	9d 83       	std	Y+5, r25	; 0x05
    1a8c:	8c 83       	std	Y+4, r24	; 0x04
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	9d 81       	ldd	r25, Y+5	; 0x05
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_write_command+0x16e>
    1a96:	9d 83       	std	Y+5, r25	; 0x05
    1a98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9f 83       	std	Y+7, r25	; 0x07
    1aa2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <LCD_write_command+0x162>
    1aac:	24 c0       	rjmp	.+72     	; 0x1af6 <LCD_write_command+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	68 85       	ldd	r22, Y+8	; 0x08
    1ab0:	79 85       	ldd	r23, Y+9	; 0x09
    1ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9f 83       	std	Y+7, r25	; 0x07
    1ac0:	8e 83       	std	Y+6, r24	; 0x06
    1ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac6:	9b 83       	std	Y+3, r25	; 0x03
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_write_command+0x1aa>
    1ad2:	9b 83       	std	Y+3, r25	; 0x03
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <LCD_write_command+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ad8:	69 89       	ldd	r22, Y+17	; 0x11
    1ada:	7a 89       	ldd	r23, Y+18	; 0x12
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	88 8b       	std	Y+16, r24	; 0x10
    1aea:	88 89       	ldd	r24, Y+16	; 0x10
    1aec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	8a 95       	dec	r24
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LCD_write_command+0x1cc>
    1af4:	89 83       	std	Y+1, r24	; 0x01
    // Delay to ensure the command is processed
    _delay_us(CMD_DELAY);
}
    1af6:	69 96       	adiw	r28, 0x19	; 25
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <LCD_write_char>:

// Function to write a character to the LCD
void LCD_write_char(u8 character) {
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	69 97       	sbiw	r28, 0x19	; 25
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	89 8f       	std	Y+25, r24	; 0x19
	 // RS = 1 for char mode
	    PORTB |= (1 << PB1);
    1b1e:	a8 e3       	ldi	r26, 0x38	; 56
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e8 e3       	ldi	r30, 0x38	; 56
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	82 60       	ori	r24, 0x02	; 2
    1b2a:	8c 93       	st	X, r24
	    // RW = 0 for write mode
	    PORTB &= ~(1 << PB2);
    1b2c:	a8 e3       	ldi	r26, 0x38	; 56
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e8 e3       	ldi	r30, 0x38	; 56
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8b 7f       	andi	r24, 0xFB	; 251
    1b38:	8c 93       	st	X, r24
	    // Enable the E signal
	    PORTB |= (1 << PB3);
    1b3a:	a8 e3       	ldi	r26, 0x38	; 56
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	88 60       	ori	r24, 0x08	; 8
    1b46:	8c 93       	st	X, r24
    // Send the character
    PORTA = character;
    1b48:	eb e3       	ldi	r30, 0x3B	; 59
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1b4e:	80 83       	st	Z, r24
    // Disable the E signal
    PORTB &= ~(1 << PB3);
    1b50:	a8 e3       	ldi	r26, 0x38	; 56
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	87 7f       	andi	r24, 0xF7	; 247
    1b5c:	8c 93       	st	X, r24
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	8d 8b       	std	Y+21, r24	; 0x15
    1b68:	9e 8b       	std	Y+22, r25	; 0x16
    1b6a:	af 8b       	std	Y+23, r26	; 0x17
    1b6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b70:	7e 89       	ldd	r23, Y+22	; 0x16
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	2b ea       	ldi	r18, 0xAB	; 171
    1b78:	3a ea       	ldi	r19, 0xAA	; 170
    1b7a:	4a ea       	ldi	r20, 0xAA	; 170
    1b7c:	50 e4       	ldi	r21, 0x40	; 64
    1b7e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	89 8b       	std	Y+17, r24	; 0x11
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	ab 8b       	std	Y+19, r26	; 0x13
    1b8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b8e:	69 89       	ldd	r22, Y+17	; 0x11
    1b90:	7a 89       	ldd	r23, Y+18	; 0x12
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	1c f4       	brge	.+6      	; 0x1bac <LCD_write_char+0xa4>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	88 8b       	std	Y+16, r24	; 0x10
    1baa:	91 c0       	rjmp	.+290    	; 0x1cce <LCD_write_char+0x1c6>
	else if (__tmp > 255)
    1bac:	69 89       	ldd	r22, Y+17	; 0x11
    1bae:	7a 89       	ldd	r23, Y+18	; 0x12
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	4f e7       	ldi	r20, 0x7F	; 127
    1bba:	53 e4       	ldi	r21, 0x43	; 67
    1bbc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bc0:	18 16       	cp	r1, r24
    1bc2:	0c f0       	brlt	.+2      	; 0x1bc6 <LCD_write_char+0xbe>
    1bc4:	7b c0       	rjmp	.+246    	; 0x1cbc <LCD_write_char+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a e7       	ldi	r20, 0x7A	; 122
    1bd4:	54 e4       	ldi	r21, 0x44	; 68
    1bd6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8c 87       	std	Y+12, r24	; 0x0c
    1be0:	9d 87       	std	Y+13, r25	; 0x0d
    1be2:	ae 87       	std	Y+14, r26	; 0x0e
    1be4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1be8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bea:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bec:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	88 87       	std	Y+8, r24	; 0x08
    1c00:	99 87       	std	Y+9, r25	; 0x09
    1c02:	aa 87       	std	Y+10, r26	; 0x0a
    1c04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c06:	68 85       	ldd	r22, Y+8	; 0x08
    1c08:	79 85       	ldd	r23, Y+9	; 0x09
    1c0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_write_char+0x120>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9f 83       	std	Y+7, r25	; 0x07
    1c24:	8e 83       	std	Y+6, r24	; 0x06
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_write_char+0x19e>
	else if (__tmp > 65535)
    1c28:	68 85       	ldd	r22, Y+8	; 0x08
    1c2a:	79 85       	ldd	r23, Y+9	; 0x09
    1c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_write_char+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c42:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c44:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c46:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9f 83       	std	Y+7, r25	; 0x07
    1c66:	8e 83       	std	Y+6, r24	; 0x06
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_write_char+0x180>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9d 83       	std	Y+5, r25	; 0x05
    1c70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_write_char+0x16e>
    1c7a:	9d 83       	std	Y+5, r25	; 0x05
    1c7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c80:	9f 81       	ldd	r25, Y+7	; 0x07
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9f 83       	std	Y+7, r25	; 0x07
    1c86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_write_char+0x162>
    1c90:	24 c0       	rjmp	.+72     	; 0x1cda <LCD_write_char+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	68 85       	ldd	r22, Y+8	; 0x08
    1c94:	79 85       	ldd	r23, Y+9	; 0x09
    1c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c9a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9f 83       	std	Y+7, r25	; 0x07
    1ca4:	8e 83       	std	Y+6, r24	; 0x06
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	9b 83       	std	Y+3, r25	; 0x03
    1cac:	8a 83       	std	Y+2, r24	; 0x02
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_write_char+0x1aa>
    1cb6:	9b 83       	std	Y+3, r25	; 0x03
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <LCD_write_char+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cbc:	69 89       	ldd	r22, Y+17	; 0x11
    1cbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	88 8b       	std	Y+16, r24	; 0x10
    1cce:	88 89       	ldd	r24, Y+16	; 0x10
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	8a 95       	dec	r24
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_write_char+0x1cc>
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    // Delay to ensure the character is processed
    _delay_us(CMD_DELAY);
}
    1cda:	69 96       	adiw	r28, 0x19	; 25
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_write_string>:

// Function to write a string to the LCD
void LCD_write_string(const u8* string) {
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <LCD_write_string+0x6>
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	0a c0       	rjmp	.+20     	; 0x1d10 <LCD_write_string+0x24>
    while (*string) {
        LCD_write_char(*string);
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	80 81       	ld	r24, Z
    1d02:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_write_char>
        string++;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(CMD_DELAY);
}

// Function to write a string to the LCD
void LCD_write_string(const u8* string) {
    while (*string) {
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	80 81       	ld	r24, Z
    1d16:	88 23       	and	r24, r24
    1d18:	89 f7       	brne	.-30     	; 0x1cfc <LCD_write_string+0x10>
        LCD_write_char(*string);
        string++;
    }
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_write_number>:

// Function to write a number to the LCD
void LCD_write_number(u16 number) {
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	62 97       	sbiw	r28, 0x12	; 18
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
    char buffer[16];  // Buffer to hold the converted string
    snprintf(buffer, sizeof(buffer), "%d", number);
    1d3c:	8d b7       	in	r24, 0x3d	; 61
    1d3e:	9e b7       	in	r25, 0x3e	; 62
    1d40:	08 97       	sbiw	r24, 0x08	; 8
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	9e bf       	out	0x3e, r25	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	8d bf       	out	0x3d, r24	; 61
    1d4c:	ed b7       	in	r30, 0x3d	; 61
    1d4e:	fe b7       	in	r31, 0x3e	; 62
    1d50:	31 96       	adiw	r30, 0x01	; 1
    1d52:	ce 01       	movw	r24, r28
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	80 e1       	ldi	r24, 0x10	; 16
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	93 83       	std	Z+3, r25	; 0x03
    1d60:	82 83       	std	Z+2, r24	; 0x02
    1d62:	81 e7       	ldi	r24, 0x71	; 113
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	95 83       	std	Z+5, r25	; 0x05
    1d68:	84 83       	std	Z+4, r24	; 0x04
    1d6a:	89 89       	ldd	r24, Y+17	; 0x11
    1d6c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6e:	97 83       	std	Z+7, r25	; 0x07
    1d70:	86 83       	std	Z+6, r24	; 0x06
    1d72:	0e 94 73 10 	call	0x20e6	; 0x20e6 <snprintf>
    1d76:	8d b7       	in	r24, 0x3d	; 61
    1d78:	9e b7       	in	r25, 0x3e	; 62
    1d7a:	08 96       	adiw	r24, 0x08	; 8
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	9e bf       	out	0x3e, r25	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	8d bf       	out	0x3d, r24	; 61
    LCD_write_string(buffer);
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_write_string>
}
    1d8e:	62 96       	adiw	r28, 0x12	; 18
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LCD_write_decimal_number>:

void LCD_write_decimal_number(f64 number, u16 decimalPlaces){
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	68 97       	sbiw	r28, 0x18	; 24
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	6b 8b       	std	Y+19, r22	; 0x13
    1dba:	7c 8b       	std	Y+20, r23	; 0x14
    1dbc:	8d 8b       	std	Y+21, r24	; 0x15
    1dbe:	9e 8b       	std	Y+22, r25	; 0x16
    1dc0:	58 8f       	std	Y+24, r21	; 0x18
    1dc2:	4f 8b       	std	Y+23, r20	; 0x17
    // Convert the double to a string with the desired number of decimal places
    char buffer[16]; // Adjust the size as needed
    dtostrf(number, 0, decimalPlaces, buffer); // Convert to string
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	ad 89       	ldd	r26, Y+21	; 0x15
    1dca:	be 89       	ldd	r27, Y+22	; 0x16
    1dcc:	2f 89       	ldd	r18, Y+23	; 0x17
    1dce:	38 8d       	ldd	r19, Y+24	; 0x18
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	33 96       	adiw	r30, 0x03	; 3
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	8f 01       	movw	r16, r30
    1dde:	0e 94 52 10 	call	0x20a4	; 0x20a4 <dtostrf>

    // Send each character of the string to the LCD
    for (int i = 0; buffer[i] != '\0'; i++) {
    1de2:	1a 82       	std	Y+2, r1	; 0x02
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_write_decimal_number+0x66>
        LCD_write_char(buffer[i]);
    1de8:	29 81       	ldd	r18, Y+1	; 0x01
    1dea:	3a 81       	ldd	r19, Y+2	; 0x02
    1dec:	ce 01       	movw	r24, r28
    1dee:	03 96       	adiw	r24, 0x03	; 3
    1df0:	fc 01       	movw	r30, r24
    1df2:	e2 0f       	add	r30, r18
    1df4:	f3 1f       	adc	r31, r19
    1df6:	80 81       	ld	r24, Z
    1df8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_write_char>
    // Convert the double to a string with the desired number of decimal places
    char buffer[16]; // Adjust the size as needed
    dtostrf(number, 0, decimalPlaces, buffer); // Convert to string

    // Send each character of the string to the LCD
    for (int i = 0; buffer[i] != '\0'; i++) {
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	29 81       	ldd	r18, Y+1	; 0x01
    1e08:	3a 81       	ldd	r19, Y+2	; 0x02
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	03 96       	adiw	r24, 0x03	; 3
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	80 81       	ld	r24, Z
    1e16:	88 23       	and	r24, r24
    1e18:	39 f7       	brne	.-50     	; 0x1de8 <LCD_write_decimal_number+0x48>
        LCD_write_char(buffer[i]);

    }
}
    1e1a:	68 96       	adiw	r28, 0x18	; 24
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <LCD_set_cursor>:



void LCD_set_cursor(u8 row, u8 col) {
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <LCD_set_cursor+0x6>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	6b 83       	std	Y+3, r22	; 0x03
    // Calculate the cursor address based on row and col
    uint8_t cursorAddress;
    if (row == 0) {
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	88 23       	and	r24, r24
    1e44:	21 f4       	brne	.+8      	; 0x1e4e <LCD_set_cursor+0x1e>
        cursorAddress = 0x80 + col; // First row
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	80 58       	subi	r24, 0x80	; 128
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	14 c0       	rjmp	.+40     	; 0x1e76 <LCD_set_cursor+0x46>
    } else if (row == 1) {
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	21 f4       	brne	.+8      	; 0x1e5c <LCD_set_cursor+0x2c>
        cursorAddress = 0xC0 + col; // Second row
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	80 54       	subi	r24, 0x40	; 64
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <LCD_set_cursor+0x46>
    } else if (row == 2) {
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	21 f4       	brne	.+8      	; 0x1e6a <LCD_set_cursor+0x3a>
        cursorAddress = 0x94 + col; // Third row
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	8c 56       	subi	r24, 0x6C	; 108
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	06 c0       	rjmp	.+12     	; 0x1e76 <LCD_set_cursor+0x46>
    } else if (row == 3) {
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	31 f4       	brne	.+12     	; 0x1e7c <LCD_set_cursor+0x4c>
        cursorAddress = 0xD4 + col; // Fourth row
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	8c 52       	subi	r24, 0x2C	; 44
    1e74:	89 83       	std	Y+1, r24	; 0x01
    } else {
        return;  // Invalid row
    }
    // Set the cursor address command
    LCD_write_command(cursorAddress);
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <LCD_create_custom_char>:


void LCD_create_custom_char(u16 char_num, const u8 *char_pattern) {
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <LCD_create_custom_char+0x6>
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <LCD_create_custom_char+0x8>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <LCD_create_custom_char+0xa>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	9c 83       	std	Y+4, r25	; 0x04
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	7e 83       	std	Y+6, r23	; 0x06
    1e9c:	6d 83       	std	Y+5, r22	; 0x05
    // Set CGRAM address for the custom character
	LCD_write_command(0x40 | (char_num << 3));
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	88 0f       	add	r24, r24
    1ea2:	88 0f       	add	r24, r24
    1ea4:	88 0f       	add	r24, r24
    1ea6:	80 64       	ori	r24, 0x40	; 64
    1ea8:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>

    // Send the custom character pattern
    for (int i = 0; i < 8; i++) {
    1eac:	1a 82       	std	Y+2, r1	; 0x02
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <LCD_create_custom_char+0x48>
        LCD_write_char(char_pattern[i]);
    1eb2:	29 81       	ldd	r18, Y+1	; 0x01
    1eb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e2 0f       	add	r30, r18
    1ebe:	f3 1f       	adc	r31, r19
    1ec0:	80 81       	ld	r24, Z
    1ec2:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_write_char>
void LCD_create_custom_char(u16 char_num, const u8 *char_pattern) {
    // Set CGRAM address for the custom character
	LCD_write_command(0x40 | (char_num << 3));

    // Send the custom character pattern
    for (int i = 0; i < 8; i++) {
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	88 30       	cpi	r24, 0x08	; 8
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	64 f3       	brlt	.-40     	; 0x1eb2 <LCD_create_custom_char+0x2a>
        LCD_write_char(char_pattern[i]);
    }

    // Return to DDRAM address
    LCD_write_command(0x80);
    1eda:	80 e8       	ldi	r24, 0x80	; 128
    1edc:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>
}
    1ee0:	26 96       	adiw	r28, 0x06	; 6
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <LCD_write_custom_char>:

void LCD_write_custom_char(u16 char_num) {
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <LCD_write_custom_char+0x6>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
    // Display the custom character
    LCD_write_char(char_num);
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <LCD_write_char>
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <LCD_clearScreen>:

void LCD_clearScreen(){
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	2e 97       	sbiw	r28, 0x0e	; 14
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command(0x01);   // Clear display
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	0e 94 92 0c 	call	0x1924	; 0x1924 <LCD_write_command>
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	b0 e4       	ldi	r27, 0x40	; 64
    1f32:	8b 87       	std	Y+11, r24	; 0x0b
    1f34:	9c 87       	std	Y+12, r25	; 0x0c
    1f36:	ad 87       	std	Y+13, r26	; 0x0d
    1f38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a e7       	ldi	r20, 0x7A	; 122
    1f48:	55 e4       	ldi	r21, 0x45	; 69
    1f4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	8f 83       	std	Y+7, r24	; 0x07
    1f54:	98 87       	std	Y+8, r25	; 0x08
    1f56:	a9 87       	std	Y+9, r26	; 0x09
    1f58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e8       	ldi	r20, 0x80	; 128
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1f6e:	88 23       	and	r24, r24
    1f70:	2c f4       	brge	.+10     	; 0x1f7c <LCD_clearScreen+0x6c>
		__ticks = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9e 83       	std	Y+6, r25	; 0x06
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	3f c0       	rjmp	.+126    	; 0x1ffa <LCD_clearScreen+0xea>
	else if (__tmp > 65535)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	3f ef       	ldi	r19, 0xFF	; 255
    1f88:	4f e7       	ldi	r20, 0x7F	; 127
    1f8a:	57 e4       	ldi	r21, 0x47	; 71
    1f8c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f90:	18 16       	cp	r1, r24
    1f92:	4c f5       	brge	.+82     	; 0x1fe6 <LCD_clearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <LCD_clearScreen+0xcc>
    1fbe:	80 e9       	ldi	r24, 0x90	; 144
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_clearScreen+0xba>
    1fce:	9c 83       	std	Y+4, r25	; 0x04
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <LCD_clearScreen+0xae>
    1fe4:	14 c0       	rjmp	.+40     	; 0x200e <LCD_clearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_clearScreen+0xf6>
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(CLEAR_DELAY);
}
    200e:	2e 96       	adiw	r28, 0x0e	; 14
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <main>:

#include "ProgramController/PWM_Drawer.h"



int main() {
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62


	PWM_Drawer_startProgram();
    2028:	0e 94 ab 09 	call	0x1356	; 0x1356 <PWM_Drawer_startProgram>


    return 0;
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
}
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <__prologue_saves__>:
    2036:	2f 92       	push	r2
    2038:	3f 92       	push	r3
    203a:	4f 92       	push	r4
    203c:	5f 92       	push	r5
    203e:	6f 92       	push	r6
    2040:	7f 92       	push	r7
    2042:	8f 92       	push	r8
    2044:	9f 92       	push	r9
    2046:	af 92       	push	r10
    2048:	bf 92       	push	r11
    204a:	cf 92       	push	r12
    204c:	df 92       	push	r13
    204e:	ef 92       	push	r14
    2050:	ff 92       	push	r15
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	ca 1b       	sub	r28, r26
    2060:	db 0b       	sbc	r29, r27
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	09 94       	ijmp

0000206e <__epilogue_restores__>:
    206e:	2a 88       	ldd	r2, Y+18	; 0x12
    2070:	39 88       	ldd	r3, Y+17	; 0x11
    2072:	48 88       	ldd	r4, Y+16	; 0x10
    2074:	5f 84       	ldd	r5, Y+15	; 0x0f
    2076:	6e 84       	ldd	r6, Y+14	; 0x0e
    2078:	7d 84       	ldd	r7, Y+13	; 0x0d
    207a:	8c 84       	ldd	r8, Y+12	; 0x0c
    207c:	9b 84       	ldd	r9, Y+11	; 0x0b
    207e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2080:	b9 84       	ldd	r11, Y+9	; 0x09
    2082:	c8 84       	ldd	r12, Y+8	; 0x08
    2084:	df 80       	ldd	r13, Y+7	; 0x07
    2086:	ee 80       	ldd	r14, Y+6	; 0x06
    2088:	fd 80       	ldd	r15, Y+5	; 0x05
    208a:	0c 81       	ldd	r16, Y+4	; 0x04
    208c:	1b 81       	ldd	r17, Y+3	; 0x03
    208e:	aa 81       	ldd	r26, Y+2	; 0x02
    2090:	b9 81       	ldd	r27, Y+1	; 0x01
    2092:	ce 0f       	add	r28, r30
    2094:	d1 1d       	adc	r29, r1
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	ed 01       	movw	r28, r26
    20a2:	08 95       	ret

000020a4 <dtostrf>:
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	f2 2f       	mov	r31, r18
    20ae:	f0 2e       	mov	r15, r16
    20b0:	47 fd       	sbrc	r20, 7
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <dtostrf+0x14>
    20b4:	e4 e0       	ldi	r30, 0x04	; 4
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <dtostrf+0x16>
    20b8:	e4 e1       	ldi	r30, 0x14	; 20
    20ba:	24 2f       	mov	r18, r20
    20bc:	33 27       	eor	r19, r19
    20be:	27 fd       	sbrc	r18, 7
    20c0:	30 95       	com	r19
    20c2:	37 ff       	sbrs	r19, 7
    20c4:	03 c0       	rjmp	.+6      	; 0x20cc <dtostrf+0x28>
    20c6:	30 95       	com	r19
    20c8:	21 95       	neg	r18
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	4f 2d       	mov	r20, r15
    20ce:	51 2f       	mov	r21, r17
    20d0:	0f 2f       	mov	r16, r31
    20d2:	ee 2e       	mov	r14, r30
    20d4:	0e 94 a1 12 	call	0x2542	; 0x2542 <dtoa_prf>
    20d8:	8f 2d       	mov	r24, r15
    20da:	91 2f       	mov	r25, r17
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <snprintf>:
    20e6:	ae e0       	ldi	r26, 0x0E	; 14
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e9 e7       	ldi	r30, 0x79	; 121
    20ec:	f0 e1       	ldi	r31, 0x10	; 16
    20ee:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x1c>
    20f2:	0d 89       	ldd	r16, Y+21	; 0x15
    20f4:	1e 89       	ldd	r17, Y+22	; 0x16
    20f6:	8f 89       	ldd	r24, Y+23	; 0x17
    20f8:	98 8d       	ldd	r25, Y+24	; 0x18
    20fa:	97 ff       	sbrs	r25, 7
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <snprintf+0x1c>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e8       	ldi	r25, 0x80	; 128
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	1a 83       	std	Y+2, r17	; 0x02
    210a:	09 83       	std	Y+1, r16	; 0x01
    210c:	86 e0       	ldi	r24, 0x06	; 6
    210e:	8c 83       	std	Y+4, r24	; 0x04
    2110:	9e 01       	movw	r18, r28
    2112:	25 5e       	subi	r18, 0xE5	; 229
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	69 8d       	ldd	r22, Y+25	; 0x19
    211c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211e:	a9 01       	movw	r20, r18
    2120:	0e 94 c4 10 	call	0x2188	; 0x2188 <vfprintf>
    2124:	4d 81       	ldd	r20, Y+5	; 0x05
    2126:	5e 81       	ldd	r21, Y+6	; 0x06
    2128:	57 fd       	sbrc	r21, 7
    212a:	0a c0       	rjmp	.+20     	; 0x2140 <snprintf+0x5a>
    212c:	2f 81       	ldd	r18, Y+7	; 0x07
    212e:	38 85       	ldd	r19, Y+8	; 0x08
    2130:	42 17       	cp	r20, r18
    2132:	53 07       	cpc	r21, r19
    2134:	0c f4       	brge	.+2      	; 0x2138 <snprintf+0x52>
    2136:	9a 01       	movw	r18, r20
    2138:	02 0f       	add	r16, r18
    213a:	13 1f       	adc	r17, r19
    213c:	f8 01       	movw	r30, r16
    213e:	10 82       	st	Z, r1
    2140:	2e 96       	adiw	r28, 0x0e	; 14
    2142:	e4 e0       	ldi	r30, 0x04	; 4
    2144:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x1c>

00002148 <round>:
    2148:	07 d5       	rcall	.+2574   	; 0x2b58 <__fp_splitA>
    214a:	e0 f0       	brcs	.+56     	; 0x2184 <round+0x3c>
    214c:	9e 37       	cpi	r25, 0x7E	; 126
    214e:	d8 f0       	brcs	.+54     	; 0x2186 <round+0x3e>
    2150:	96 39       	cpi	r25, 0x96	; 150
    2152:	b8 f4       	brcc	.+46     	; 0x2182 <round+0x3a>
    2154:	9e 38       	cpi	r25, 0x8E	; 142
    2156:	48 f4       	brcc	.+18     	; 0x216a <round+0x22>
    2158:	67 2f       	mov	r22, r23
    215a:	78 2f       	mov	r23, r24
    215c:	88 27       	eor	r24, r24
    215e:	98 5f       	subi	r25, 0xF8	; 248
    2160:	f9 cf       	rjmp	.-14     	; 0x2154 <round+0xc>
    2162:	86 95       	lsr	r24
    2164:	77 95       	ror	r23
    2166:	67 95       	ror	r22
    2168:	93 95       	inc	r25
    216a:	95 39       	cpi	r25, 0x95	; 149
    216c:	d0 f3       	brcs	.-12     	; 0x2162 <round+0x1a>
    216e:	b6 2f       	mov	r27, r22
    2170:	b1 70       	andi	r27, 0x01	; 1
    2172:	6b 0f       	add	r22, r27
    2174:	71 1d       	adc	r23, r1
    2176:	81 1d       	adc	r24, r1
    2178:	20 f4       	brcc	.+8      	; 0x2182 <round+0x3a>
    217a:	87 95       	ror	r24
    217c:	77 95       	ror	r23
    217e:	67 95       	ror	r22
    2180:	93 95       	inc	r25
    2182:	b9 c4       	rjmp	.+2418   	; 0x2af6 <__fp_mintl>
    2184:	d3 c4       	rjmp	.+2470   	; 0x2b2c <__fp_mpack>
    2186:	03 c5       	rjmp	.+2566   	; 0x2b8e <__fp_szero>

00002188 <vfprintf>:
    2188:	ab e0       	ldi	r26, 0x0B	; 11
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	ea ec       	ldi	r30, 0xCA	; 202
    218e:	f0 e1       	ldi	r31, 0x10	; 16
    2190:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__prologue_saves__>
    2194:	3c 01       	movw	r6, r24
    2196:	2b 01       	movw	r4, r22
    2198:	5a 01       	movw	r10, r20
    219a:	fc 01       	movw	r30, r24
    219c:	17 82       	std	Z+7, r1	; 0x07
    219e:	16 82       	std	Z+6, r1	; 0x06
    21a0:	83 81       	ldd	r24, Z+3	; 0x03
    21a2:	81 fd       	sbrc	r24, 1
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <vfprintf+0x24>
    21a6:	6f ef       	ldi	r22, 0xFF	; 255
    21a8:	7f ef       	ldi	r23, 0xFF	; 255
    21aa:	c6 c1       	rjmp	.+908    	; 0x2538 <vfprintf+0x3b0>
    21ac:	9a e0       	ldi	r25, 0x0A	; 10
    21ae:	89 2e       	mov	r8, r25
    21b0:	1e 01       	movw	r2, r28
    21b2:	08 94       	sec
    21b4:	21 1c       	adc	r2, r1
    21b6:	31 1c       	adc	r3, r1
    21b8:	f3 01       	movw	r30, r6
    21ba:	23 81       	ldd	r18, Z+3	; 0x03
    21bc:	f2 01       	movw	r30, r4
    21be:	23 fd       	sbrc	r18, 3
    21c0:	85 91       	lpm	r24, Z+
    21c2:	23 ff       	sbrs	r18, 3
    21c4:	81 91       	ld	r24, Z+
    21c6:	2f 01       	movw	r4, r30
    21c8:	88 23       	and	r24, r24
    21ca:	09 f4       	brne	.+2      	; 0x21ce <vfprintf+0x46>
    21cc:	b2 c1       	rjmp	.+868    	; 0x2532 <vfprintf+0x3aa>
    21ce:	85 32       	cpi	r24, 0x25	; 37
    21d0:	39 f4       	brne	.+14     	; 0x21e0 <vfprintf+0x58>
    21d2:	23 fd       	sbrc	r18, 3
    21d4:	85 91       	lpm	r24, Z+
    21d6:	23 ff       	sbrs	r18, 3
    21d8:	81 91       	ld	r24, Z+
    21da:	2f 01       	movw	r4, r30
    21dc:	85 32       	cpi	r24, 0x25	; 37
    21de:	29 f4       	brne	.+10     	; 0x21ea <vfprintf+0x62>
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	b3 01       	movw	r22, r6
    21e4:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    21e8:	e7 cf       	rjmp	.-50     	; 0x21b8 <vfprintf+0x30>
    21ea:	98 2f       	mov	r25, r24
    21ec:	ff 24       	eor	r15, r15
    21ee:	ee 24       	eor	r14, r14
    21f0:	99 24       	eor	r9, r9
    21f2:	ff e1       	ldi	r31, 0x1F	; 31
    21f4:	ff 15       	cp	r31, r15
    21f6:	d0 f0       	brcs	.+52     	; 0x222c <vfprintf+0xa4>
    21f8:	9b 32       	cpi	r25, 0x2B	; 43
    21fa:	69 f0       	breq	.+26     	; 0x2216 <vfprintf+0x8e>
    21fc:	9c 32       	cpi	r25, 0x2C	; 44
    21fe:	28 f4       	brcc	.+10     	; 0x220a <vfprintf+0x82>
    2200:	90 32       	cpi	r25, 0x20	; 32
    2202:	59 f0       	breq	.+22     	; 0x221a <vfprintf+0x92>
    2204:	93 32       	cpi	r25, 0x23	; 35
    2206:	91 f4       	brne	.+36     	; 0x222c <vfprintf+0xa4>
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <vfprintf+0x9e>
    220a:	9d 32       	cpi	r25, 0x2D	; 45
    220c:	49 f0       	breq	.+18     	; 0x2220 <vfprintf+0x98>
    220e:	90 33       	cpi	r25, 0x30	; 48
    2210:	69 f4       	brne	.+26     	; 0x222c <vfprintf+0xa4>
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	24 c0       	rjmp	.+72     	; 0x225e <vfprintf+0xd6>
    2216:	52 e0       	ldi	r21, 0x02	; 2
    2218:	f5 2a       	or	r15, r21
    221a:	84 e0       	ldi	r24, 0x04	; 4
    221c:	f8 2a       	or	r15, r24
    221e:	28 c0       	rjmp	.+80     	; 0x2270 <vfprintf+0xe8>
    2220:	98 e0       	ldi	r25, 0x08	; 8
    2222:	f9 2a       	or	r15, r25
    2224:	25 c0       	rjmp	.+74     	; 0x2270 <vfprintf+0xe8>
    2226:	e0 e1       	ldi	r30, 0x10	; 16
    2228:	fe 2a       	or	r15, r30
    222a:	22 c0       	rjmp	.+68     	; 0x2270 <vfprintf+0xe8>
    222c:	f7 fc       	sbrc	r15, 7
    222e:	29 c0       	rjmp	.+82     	; 0x2282 <vfprintf+0xfa>
    2230:	89 2f       	mov	r24, r25
    2232:	80 53       	subi	r24, 0x30	; 48
    2234:	8a 30       	cpi	r24, 0x0A	; 10
    2236:	70 f4       	brcc	.+28     	; 0x2254 <vfprintf+0xcc>
    2238:	f6 fe       	sbrs	r15, 6
    223a:	05 c0       	rjmp	.+10     	; 0x2246 <vfprintf+0xbe>
    223c:	98 9c       	mul	r9, r8
    223e:	90 2c       	mov	r9, r0
    2240:	11 24       	eor	r1, r1
    2242:	98 0e       	add	r9, r24
    2244:	15 c0       	rjmp	.+42     	; 0x2270 <vfprintf+0xe8>
    2246:	e8 9c       	mul	r14, r8
    2248:	e0 2c       	mov	r14, r0
    224a:	11 24       	eor	r1, r1
    224c:	e8 0e       	add	r14, r24
    224e:	f0 e2       	ldi	r31, 0x20	; 32
    2250:	ff 2a       	or	r15, r31
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <vfprintf+0xe8>
    2254:	9e 32       	cpi	r25, 0x2E	; 46
    2256:	29 f4       	brne	.+10     	; 0x2262 <vfprintf+0xda>
    2258:	f6 fc       	sbrc	r15, 6
    225a:	6b c1       	rjmp	.+726    	; 0x2532 <vfprintf+0x3aa>
    225c:	40 e4       	ldi	r20, 0x40	; 64
    225e:	f4 2a       	or	r15, r20
    2260:	07 c0       	rjmp	.+14     	; 0x2270 <vfprintf+0xe8>
    2262:	9c 36       	cpi	r25, 0x6C	; 108
    2264:	19 f4       	brne	.+6      	; 0x226c <vfprintf+0xe4>
    2266:	50 e8       	ldi	r21, 0x80	; 128
    2268:	f5 2a       	or	r15, r21
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0xe8>
    226c:	98 36       	cpi	r25, 0x68	; 104
    226e:	49 f4       	brne	.+18     	; 0x2282 <vfprintf+0xfa>
    2270:	f2 01       	movw	r30, r4
    2272:	23 fd       	sbrc	r18, 3
    2274:	95 91       	lpm	r25, Z+
    2276:	23 ff       	sbrs	r18, 3
    2278:	91 91       	ld	r25, Z+
    227a:	2f 01       	movw	r4, r30
    227c:	99 23       	and	r25, r25
    227e:	09 f0       	breq	.+2      	; 0x2282 <vfprintf+0xfa>
    2280:	b8 cf       	rjmp	.-144    	; 0x21f2 <vfprintf+0x6a>
    2282:	89 2f       	mov	r24, r25
    2284:	85 54       	subi	r24, 0x45	; 69
    2286:	83 30       	cpi	r24, 0x03	; 3
    2288:	18 f0       	brcs	.+6      	; 0x2290 <vfprintf+0x108>
    228a:	80 52       	subi	r24, 0x20	; 32
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	38 f4       	brcc	.+14     	; 0x229e <vfprintf+0x116>
    2290:	44 e0       	ldi	r20, 0x04	; 4
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	a4 0e       	add	r10, r20
    2296:	b5 1e       	adc	r11, r21
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	59 83       	std	Y+1, r21	; 0x01
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <vfprintf+0x134>
    229e:	93 36       	cpi	r25, 0x63	; 99
    22a0:	31 f0       	breq	.+12     	; 0x22ae <vfprintf+0x126>
    22a2:	93 37       	cpi	r25, 0x73	; 115
    22a4:	79 f0       	breq	.+30     	; 0x22c4 <vfprintf+0x13c>
    22a6:	93 35       	cpi	r25, 0x53	; 83
    22a8:	09 f0       	breq	.+2      	; 0x22ac <vfprintf+0x124>
    22aa:	56 c0       	rjmp	.+172    	; 0x2358 <vfprintf+0x1d0>
    22ac:	20 c0       	rjmp	.+64     	; 0x22ee <vfprintf+0x166>
    22ae:	f5 01       	movw	r30, r10
    22b0:	80 81       	ld	r24, Z
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	42 e0       	ldi	r20, 0x02	; 2
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	a4 0e       	add	r10, r20
    22ba:	b5 1e       	adc	r11, r21
    22bc:	61 01       	movw	r12, r2
    22be:	01 e0       	ldi	r16, 0x01	; 1
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	12 c0       	rjmp	.+36     	; 0x22e8 <vfprintf+0x160>
    22c4:	f5 01       	movw	r30, r10
    22c6:	c0 80       	ld	r12, Z
    22c8:	d1 80       	ldd	r13, Z+1	; 0x01
    22ca:	f6 fc       	sbrc	r15, 6
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <vfprintf+0x14c>
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f ef       	ldi	r23, 0xFF	; 255
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x150>
    22d4:	69 2d       	mov	r22, r9
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	42 e0       	ldi	r20, 0x02	; 2
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	a4 0e       	add	r10, r20
    22de:	b5 1e       	adc	r11, r21
    22e0:	c6 01       	movw	r24, r12
    22e2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <strnlen>
    22e6:	8c 01       	movw	r16, r24
    22e8:	5f e7       	ldi	r21, 0x7F	; 127
    22ea:	f5 22       	and	r15, r21
    22ec:	14 c0       	rjmp	.+40     	; 0x2316 <vfprintf+0x18e>
    22ee:	f5 01       	movw	r30, r10
    22f0:	c0 80       	ld	r12, Z
    22f2:	d1 80       	ldd	r13, Z+1	; 0x01
    22f4:	f6 fc       	sbrc	r15, 6
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <vfprintf+0x176>
    22f8:	6f ef       	ldi	r22, 0xFF	; 255
    22fa:	7f ef       	ldi	r23, 0xFF	; 255
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <vfprintf+0x17a>
    22fe:	69 2d       	mov	r22, r9
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	42 e0       	ldi	r20, 0x02	; 2
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	a4 0e       	add	r10, r20
    2308:	b5 1e       	adc	r11, r21
    230a:	c6 01       	movw	r24, r12
    230c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <strnlen_P>
    2310:	8c 01       	movw	r16, r24
    2312:	50 e8       	ldi	r21, 0x80	; 128
    2314:	f5 2a       	or	r15, r21
    2316:	f3 fe       	sbrs	r15, 3
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <vfprintf+0x1a0>
    231a:	1a c0       	rjmp	.+52     	; 0x2350 <vfprintf+0x1c8>
    231c:	80 e2       	ldi	r24, 0x20	; 32
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	b3 01       	movw	r22, r6
    2322:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    2326:	ea 94       	dec	r14
    2328:	8e 2d       	mov	r24, r14
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	08 17       	cp	r16, r24
    232e:	19 07       	cpc	r17, r25
    2330:	a8 f3       	brcs	.-22     	; 0x231c <vfprintf+0x194>
    2332:	0e c0       	rjmp	.+28     	; 0x2350 <vfprintf+0x1c8>
    2334:	f6 01       	movw	r30, r12
    2336:	f7 fc       	sbrc	r15, 7
    2338:	85 91       	lpm	r24, Z+
    233a:	f7 fe       	sbrs	r15, 7
    233c:	81 91       	ld	r24, Z+
    233e:	6f 01       	movw	r12, r30
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	b3 01       	movw	r22, r6
    2344:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    2348:	e1 10       	cpse	r14, r1
    234a:	ea 94       	dec	r14
    234c:	01 50       	subi	r16, 0x01	; 1
    234e:	10 40       	sbci	r17, 0x00	; 0
    2350:	01 15       	cp	r16, r1
    2352:	11 05       	cpc	r17, r1
    2354:	79 f7       	brne	.-34     	; 0x2334 <vfprintf+0x1ac>
    2356:	ea c0       	rjmp	.+468    	; 0x252c <vfprintf+0x3a4>
    2358:	94 36       	cpi	r25, 0x64	; 100
    235a:	11 f0       	breq	.+4      	; 0x2360 <vfprintf+0x1d8>
    235c:	99 36       	cpi	r25, 0x69	; 105
    235e:	69 f5       	brne	.+90     	; 0x23ba <vfprintf+0x232>
    2360:	f7 fe       	sbrs	r15, 7
    2362:	08 c0       	rjmp	.+16     	; 0x2374 <vfprintf+0x1ec>
    2364:	f5 01       	movw	r30, r10
    2366:	20 81       	ld	r18, Z
    2368:	31 81       	ldd	r19, Z+1	; 0x01
    236a:	42 81       	ldd	r20, Z+2	; 0x02
    236c:	53 81       	ldd	r21, Z+3	; 0x03
    236e:	84 e0       	ldi	r24, 0x04	; 4
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0a c0       	rjmp	.+20     	; 0x2388 <vfprintf+0x200>
    2374:	f5 01       	movw	r30, r10
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	9c 01       	movw	r18, r24
    237c:	44 27       	eor	r20, r20
    237e:	37 fd       	sbrc	r19, 7
    2380:	40 95       	com	r20
    2382:	54 2f       	mov	r21, r20
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a8 0e       	add	r10, r24
    238a:	b9 1e       	adc	r11, r25
    238c:	9f e6       	ldi	r25, 0x6F	; 111
    238e:	f9 22       	and	r15, r25
    2390:	57 ff       	sbrs	r21, 7
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <vfprintf+0x21e>
    2394:	50 95       	com	r21
    2396:	40 95       	com	r20
    2398:	30 95       	com	r19
    239a:	21 95       	neg	r18
    239c:	3f 4f       	sbci	r19, 0xFF	; 255
    239e:	4f 4f       	sbci	r20, 0xFF	; 255
    23a0:	5f 4f       	sbci	r21, 0xFF	; 255
    23a2:	e0 e8       	ldi	r30, 0x80	; 128
    23a4:	fe 2a       	or	r15, r30
    23a6:	ca 01       	movw	r24, r20
    23a8:	b9 01       	movw	r22, r18
    23aa:	a1 01       	movw	r20, r2
    23ac:	2a e0       	ldi	r18, 0x0A	; 10
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__ultoa_invert>
    23b4:	d8 2e       	mov	r13, r24
    23b6:	d2 18       	sub	r13, r2
    23b8:	40 c0       	rjmp	.+128    	; 0x243a <vfprintf+0x2b2>
    23ba:	95 37       	cpi	r25, 0x75	; 117
    23bc:	29 f4       	brne	.+10     	; 0x23c8 <vfprintf+0x240>
    23be:	1f 2d       	mov	r17, r15
    23c0:	1f 7e       	andi	r17, 0xEF	; 239
    23c2:	2a e0       	ldi	r18, 0x0A	; 10
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	1d c0       	rjmp	.+58     	; 0x2402 <vfprintf+0x27a>
    23c8:	1f 2d       	mov	r17, r15
    23ca:	19 7f       	andi	r17, 0xF9	; 249
    23cc:	9f 36       	cpi	r25, 0x6F	; 111
    23ce:	61 f0       	breq	.+24     	; 0x23e8 <vfprintf+0x260>
    23d0:	90 37       	cpi	r25, 0x70	; 112
    23d2:	20 f4       	brcc	.+8      	; 0x23dc <vfprintf+0x254>
    23d4:	98 35       	cpi	r25, 0x58	; 88
    23d6:	09 f0       	breq	.+2      	; 0x23da <vfprintf+0x252>
    23d8:	ac c0       	rjmp	.+344    	; 0x2532 <vfprintf+0x3aa>
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <vfprintf+0x272>
    23dc:	90 37       	cpi	r25, 0x70	; 112
    23de:	39 f0       	breq	.+14     	; 0x23ee <vfprintf+0x266>
    23e0:	98 37       	cpi	r25, 0x78	; 120
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <vfprintf+0x25e>
    23e4:	a6 c0       	rjmp	.+332    	; 0x2532 <vfprintf+0x3aa>
    23e6:	04 c0       	rjmp	.+8      	; 0x23f0 <vfprintf+0x268>
    23e8:	28 e0       	ldi	r18, 0x08	; 8
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	0a c0       	rjmp	.+20     	; 0x2402 <vfprintf+0x27a>
    23ee:	10 61       	ori	r17, 0x10	; 16
    23f0:	14 fd       	sbrc	r17, 4
    23f2:	14 60       	ori	r17, 0x04	; 4
    23f4:	20 e1       	ldi	r18, 0x10	; 16
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <vfprintf+0x27a>
    23fa:	14 fd       	sbrc	r17, 4
    23fc:	16 60       	ori	r17, 0x06	; 6
    23fe:	20 e1       	ldi	r18, 0x10	; 16
    2400:	32 e0       	ldi	r19, 0x02	; 2
    2402:	17 ff       	sbrs	r17, 7
    2404:	08 c0       	rjmp	.+16     	; 0x2416 <vfprintf+0x28e>
    2406:	f5 01       	movw	r30, r10
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	44 e0       	ldi	r20, 0x04	; 4
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	08 c0       	rjmp	.+16     	; 0x2426 <vfprintf+0x29e>
    2416:	f5 01       	movw	r30, r10
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	bc 01       	movw	r22, r24
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	42 e0       	ldi	r20, 0x02	; 2
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	a4 0e       	add	r10, r20
    2428:	b5 1e       	adc	r11, r21
    242a:	a1 01       	movw	r20, r2
    242c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <__ultoa_invert>
    2430:	d8 2e       	mov	r13, r24
    2432:	d2 18       	sub	r13, r2
    2434:	8f e7       	ldi	r24, 0x7F	; 127
    2436:	f8 2e       	mov	r15, r24
    2438:	f1 22       	and	r15, r17
    243a:	f6 fe       	sbrs	r15, 6
    243c:	0b c0       	rjmp	.+22     	; 0x2454 <vfprintf+0x2cc>
    243e:	5e ef       	ldi	r21, 0xFE	; 254
    2440:	f5 22       	and	r15, r21
    2442:	d9 14       	cp	r13, r9
    2444:	38 f4       	brcc	.+14     	; 0x2454 <vfprintf+0x2cc>
    2446:	f4 fe       	sbrs	r15, 4
    2448:	07 c0       	rjmp	.+14     	; 0x2458 <vfprintf+0x2d0>
    244a:	f2 fc       	sbrc	r15, 2
    244c:	05 c0       	rjmp	.+10     	; 0x2458 <vfprintf+0x2d0>
    244e:	8f ee       	ldi	r24, 0xEF	; 239
    2450:	f8 22       	and	r15, r24
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <vfprintf+0x2d0>
    2454:	1d 2d       	mov	r17, r13
    2456:	01 c0       	rjmp	.+2      	; 0x245a <vfprintf+0x2d2>
    2458:	19 2d       	mov	r17, r9
    245a:	f4 fe       	sbrs	r15, 4
    245c:	0d c0       	rjmp	.+26     	; 0x2478 <vfprintf+0x2f0>
    245e:	fe 01       	movw	r30, r28
    2460:	ed 0d       	add	r30, r13
    2462:	f1 1d       	adc	r31, r1
    2464:	80 81       	ld	r24, Z
    2466:	80 33       	cpi	r24, 0x30	; 48
    2468:	19 f4       	brne	.+6      	; 0x2470 <vfprintf+0x2e8>
    246a:	99 ee       	ldi	r25, 0xE9	; 233
    246c:	f9 22       	and	r15, r25
    246e:	08 c0       	rjmp	.+16     	; 0x2480 <vfprintf+0x2f8>
    2470:	1f 5f       	subi	r17, 0xFF	; 255
    2472:	f2 fe       	sbrs	r15, 2
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <vfprintf+0x2f8>
    2476:	03 c0       	rjmp	.+6      	; 0x247e <vfprintf+0x2f6>
    2478:	8f 2d       	mov	r24, r15
    247a:	86 78       	andi	r24, 0x86	; 134
    247c:	09 f0       	breq	.+2      	; 0x2480 <vfprintf+0x2f8>
    247e:	1f 5f       	subi	r17, 0xFF	; 255
    2480:	0f 2d       	mov	r16, r15
    2482:	f3 fc       	sbrc	r15, 3
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <vfprintf+0x326>
    2486:	f0 fe       	sbrs	r15, 0
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <vfprintf+0x320>
    248a:	1e 15       	cp	r17, r14
    248c:	10 f0       	brcs	.+4      	; 0x2492 <vfprintf+0x30a>
    248e:	9d 2c       	mov	r9, r13
    2490:	0b c0       	rjmp	.+22     	; 0x24a8 <vfprintf+0x320>
    2492:	9d 2c       	mov	r9, r13
    2494:	9e 0c       	add	r9, r14
    2496:	91 1a       	sub	r9, r17
    2498:	1e 2d       	mov	r17, r14
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <vfprintf+0x320>
    249c:	80 e2       	ldi	r24, 0x20	; 32
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	b3 01       	movw	r22, r6
    24a2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    24a6:	1f 5f       	subi	r17, 0xFF	; 255
    24a8:	1e 15       	cp	r17, r14
    24aa:	c0 f3       	brcs	.-16     	; 0x249c <vfprintf+0x314>
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <vfprintf+0x32e>
    24ae:	1e 15       	cp	r17, r14
    24b0:	10 f4       	brcc	.+4      	; 0x24b6 <vfprintf+0x32e>
    24b2:	e1 1a       	sub	r14, r17
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <vfprintf+0x330>
    24b6:	ee 24       	eor	r14, r14
    24b8:	04 ff       	sbrs	r16, 4
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <vfprintf+0x352>
    24bc:	80 e3       	ldi	r24, 0x30	; 48
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	b3 01       	movw	r22, r6
    24c2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    24c6:	02 ff       	sbrs	r16, 2
    24c8:	1d c0       	rjmp	.+58     	; 0x2504 <vfprintf+0x37c>
    24ca:	01 fd       	sbrc	r16, 1
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <vfprintf+0x34c>
    24ce:	88 e7       	ldi	r24, 0x78	; 120
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e c0       	rjmp	.+28     	; 0x24f0 <vfprintf+0x368>
    24d4:	88 e5       	ldi	r24, 0x58	; 88
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0b c0       	rjmp	.+22     	; 0x24f0 <vfprintf+0x368>
    24da:	80 2f       	mov	r24, r16
    24dc:	86 78       	andi	r24, 0x86	; 134
    24de:	91 f0       	breq	.+36     	; 0x2504 <vfprintf+0x37c>
    24e0:	01 ff       	sbrs	r16, 1
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <vfprintf+0x360>
    24e4:	8b e2       	ldi	r24, 0x2B	; 43
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <vfprintf+0x362>
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	f7 fc       	sbrc	r15, 7
    24ec:	8d e2       	ldi	r24, 0x2D	; 45
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	b3 01       	movw	r22, r6
    24f2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    24f6:	06 c0       	rjmp	.+12     	; 0x2504 <vfprintf+0x37c>
    24f8:	80 e3       	ldi	r24, 0x30	; 48
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	b3 01       	movw	r22, r6
    24fe:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    2502:	9a 94       	dec	r9
    2504:	d9 14       	cp	r13, r9
    2506:	c0 f3       	brcs	.-16     	; 0x24f8 <vfprintf+0x370>
    2508:	da 94       	dec	r13
    250a:	f1 01       	movw	r30, r2
    250c:	ed 0d       	add	r30, r13
    250e:	f1 1d       	adc	r31, r1
    2510:	80 81       	ld	r24, Z
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	b3 01       	movw	r22, r6
    2516:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    251a:	dd 20       	and	r13, r13
    251c:	a9 f7       	brne	.-22     	; 0x2508 <vfprintf+0x380>
    251e:	06 c0       	rjmp	.+12     	; 0x252c <vfprintf+0x3a4>
    2520:	80 e2       	ldi	r24, 0x20	; 32
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	b3 01       	movw	r22, r6
    2526:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <fputc>
    252a:	ea 94       	dec	r14
    252c:	ee 20       	and	r14, r14
    252e:	c1 f7       	brne	.-16     	; 0x2520 <vfprintf+0x398>
    2530:	43 ce       	rjmp	.-890    	; 0x21b8 <vfprintf+0x30>
    2532:	f3 01       	movw	r30, r6
    2534:	66 81       	ldd	r22, Z+6	; 0x06
    2536:	77 81       	ldd	r23, Z+7	; 0x07
    2538:	cb 01       	movw	r24, r22
    253a:	2b 96       	adiw	r28, 0x0b	; 11
    253c:	e2 e1       	ldi	r30, 0x12	; 18
    253e:	0c 94 37 10 	jmp	0x206e	; 0x206e <__epilogue_restores__>

00002542 <dtoa_prf>:
    2542:	a9 e0       	ldi	r26, 0x09	; 9
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e7 ea       	ldi	r30, 0xA7	; 167
    2548:	f2 e1       	ldi	r31, 0x12	; 18
    254a:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__prologue_saves__+0x8>
    254e:	6a 01       	movw	r12, r20
    2550:	12 2f       	mov	r17, r18
    2552:	a0 2e       	mov	r10, r16
    2554:	be 2c       	mov	r11, r14
    2556:	2b e3       	ldi	r18, 0x3B	; 59
    2558:	20 17       	cp	r18, r16
    255a:	18 f4       	brcc	.+6      	; 0x2562 <dtoa_prf+0x20>
    255c:	2c e3       	ldi	r18, 0x3C	; 60
    255e:	92 2e       	mov	r9, r18
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <dtoa_prf+0x24>
    2562:	90 2e       	mov	r9, r16
    2564:	93 94       	inc	r9
    2566:	ae 01       	movw	r20, r28
    2568:	4f 5f       	subi	r20, 0xFF	; 255
    256a:	5f 4f       	sbci	r21, 0xFF	; 255
    256c:	27 e0       	ldi	r18, 0x07	; 7
    256e:	09 2d       	mov	r16, r9
    2570:	0e 94 03 14 	call	0x2806	; 0x2806 <__ftoa_engine>
    2574:	bc 01       	movw	r22, r24
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	e8 2e       	mov	r14, r24
    257a:	ff 24       	eor	r15, r15
    257c:	c7 01       	movw	r24, r14
    257e:	89 70       	andi	r24, 0x09	; 9
    2580:	90 70       	andi	r25, 0x00	; 0
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	11 f4       	brne	.+4      	; 0x258a <dtoa_prf+0x48>
    2586:	ad e2       	ldi	r26, 0x2D	; 45
    2588:	09 c0       	rjmp	.+18     	; 0x259c <dtoa_prf+0x5a>
    258a:	b1 fe       	sbrs	r11, 1
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <dtoa_prf+0x50>
    258e:	ab e2       	ldi	r26, 0x2B	; 43
    2590:	05 c0       	rjmp	.+10     	; 0x259c <dtoa_prf+0x5a>
    2592:	b0 fc       	sbrc	r11, 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <dtoa_prf+0x58>
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	01 c0       	rjmp	.+2      	; 0x259c <dtoa_prf+0x5a>
    259a:	a0 e2       	ldi	r26, 0x20	; 32
    259c:	e3 fe       	sbrs	r14, 3
    259e:	3b c0       	rjmp	.+118    	; 0x2616 <dtoa_prf+0xd4>
    25a0:	aa 23       	and	r26, r26
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <dtoa_prf+0x66>
    25a4:	23 e0       	ldi	r18, 0x03	; 3
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <dtoa_prf+0x68>
    25a8:	24 e0       	ldi	r18, 0x04	; 4
    25aa:	21 17       	cp	r18, r17
    25ac:	10 f0       	brcs	.+4      	; 0x25b2 <dtoa_prf+0x70>
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <dtoa_prf+0x74>
    25b2:	12 1b       	sub	r17, r18
    25b4:	21 2f       	mov	r18, r17
    25b6:	eb 2c       	mov	r14, r11
    25b8:	b4 fe       	sbrs	r11, 4
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <dtoa_prf+0x7e>
    25bc:	32 2f       	mov	r19, r18
    25be:	0a c0       	rjmp	.+20     	; 0x25d4 <dtoa_prf+0x92>
    25c0:	f6 01       	movw	r30, r12
    25c2:	32 2f       	mov	r19, r18
    25c4:	80 e2       	ldi	r24, 0x20	; 32
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <dtoa_prf+0x8a>
    25c8:	81 93       	st	Z+, r24
    25ca:	31 50       	subi	r19, 0x01	; 1
    25cc:	33 23       	and	r19, r19
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <dtoa_prf+0x86>
    25d0:	c2 0e       	add	r12, r18
    25d2:	d1 1c       	adc	r13, r1
    25d4:	aa 23       	and	r26, r26
    25d6:	19 f0       	breq	.+6      	; 0x25de <dtoa_prf+0x9c>
    25d8:	f6 01       	movw	r30, r12
    25da:	a1 93       	st	Z+, r26
    25dc:	6f 01       	movw	r12, r30
    25de:	f6 01       	movw	r30, r12
    25e0:	31 96       	adiw	r30, 0x01	; 1
    25e2:	e2 fe       	sbrs	r14, 2
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <dtoa_prf+0xae>
    25e6:	9e e4       	ldi	r25, 0x4E	; 78
    25e8:	d6 01       	movw	r26, r12
    25ea:	9c 93       	st	X, r25
    25ec:	81 e4       	ldi	r24, 0x41	; 65
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <dtoa_prf+0xb6>
    25f0:	9e e6       	ldi	r25, 0x6E	; 110
    25f2:	d6 01       	movw	r26, r12
    25f4:	9c 93       	st	X, r25
    25f6:	81 e6       	ldi	r24, 0x61	; 97
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	8c 93       	st	X, r24
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	32 96       	adiw	r30, 0x02	; 2
    2600:	df 01       	movw	r26, r30
    2602:	83 2f       	mov	r24, r19
    2604:	90 e2       	ldi	r25, 0x20	; 32
    2606:	02 c0       	rjmp	.+4      	; 0x260c <dtoa_prf+0xca>
    2608:	9d 93       	st	X+, r25
    260a:	81 50       	subi	r24, 0x01	; 1
    260c:	88 23       	and	r24, r24
    260e:	e1 f7       	brne	.-8      	; 0x2608 <dtoa_prf+0xc6>
    2610:	e3 0f       	add	r30, r19
    2612:	f1 1d       	adc	r31, r1
    2614:	40 c0       	rjmp	.+128    	; 0x2696 <dtoa_prf+0x154>
    2616:	e2 fe       	sbrs	r14, 2
    2618:	42 c0       	rjmp	.+132    	; 0x269e <dtoa_prf+0x15c>
    261a:	aa 23       	and	r26, r26
    261c:	11 f4       	brne	.+4      	; 0x2622 <dtoa_prf+0xe0>
    261e:	23 e0       	ldi	r18, 0x03	; 3
    2620:	01 c0       	rjmp	.+2      	; 0x2624 <dtoa_prf+0xe2>
    2622:	24 e0       	ldi	r18, 0x04	; 4
    2624:	21 17       	cp	r18, r17
    2626:	10 f0       	brcs	.+4      	; 0x262c <dtoa_prf+0xea>
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <dtoa_prf+0xee>
    262c:	12 1b       	sub	r17, r18
    262e:	21 2f       	mov	r18, r17
    2630:	eb 2c       	mov	r14, r11
    2632:	b4 fe       	sbrs	r11, 4
    2634:	02 c0       	rjmp	.+4      	; 0x263a <dtoa_prf+0xf8>
    2636:	92 2f       	mov	r25, r18
    2638:	0a c0       	rjmp	.+20     	; 0x264e <dtoa_prf+0x10c>
    263a:	f6 01       	movw	r30, r12
    263c:	92 2f       	mov	r25, r18
    263e:	80 e2       	ldi	r24, 0x20	; 32
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <dtoa_prf+0x104>
    2642:	81 93       	st	Z+, r24
    2644:	91 50       	subi	r25, 0x01	; 1
    2646:	99 23       	and	r25, r25
    2648:	e1 f7       	brne	.-8      	; 0x2642 <dtoa_prf+0x100>
    264a:	c2 0e       	add	r12, r18
    264c:	d1 1c       	adc	r13, r1
    264e:	aa 23       	and	r26, r26
    2650:	19 f0       	breq	.+6      	; 0x2658 <dtoa_prf+0x116>
    2652:	f6 01       	movw	r30, r12
    2654:	a1 93       	st	Z+, r26
    2656:	6f 01       	movw	r12, r30
    2658:	f6 01       	movw	r30, r12
    265a:	31 96       	adiw	r30, 0x01	; 1
    265c:	e2 fe       	sbrs	r14, 2
    265e:	08 c0       	rjmp	.+16     	; 0x2670 <dtoa_prf+0x12e>
    2660:	89 e4       	ldi	r24, 0x49	; 73
    2662:	d6 01       	movw	r26, r12
    2664:	8c 93       	st	X, r24
    2666:	8e e4       	ldi	r24, 0x4E	; 78
    2668:	11 96       	adiw	r26, 0x01	; 1
    266a:	8c 93       	st	X, r24
    266c:	86 e4       	ldi	r24, 0x46	; 70
    266e:	07 c0       	rjmp	.+14     	; 0x267e <dtoa_prf+0x13c>
    2670:	89 e6       	ldi	r24, 0x69	; 105
    2672:	d6 01       	movw	r26, r12
    2674:	8c 93       	st	X, r24
    2676:	8e e6       	ldi	r24, 0x6E	; 110
    2678:	11 96       	adiw	r26, 0x01	; 1
    267a:	8c 93       	st	X, r24
    267c:	86 e6       	ldi	r24, 0x66	; 102
    267e:	81 83       	std	Z+1, r24	; 0x01
    2680:	32 96       	adiw	r30, 0x02	; 2
    2682:	df 01       	movw	r26, r30
    2684:	89 2f       	mov	r24, r25
    2686:	20 e2       	ldi	r18, 0x20	; 32
    2688:	02 c0       	rjmp	.+4      	; 0x268e <dtoa_prf+0x14c>
    268a:	2d 93       	st	X+, r18
    268c:	81 50       	subi	r24, 0x01	; 1
    268e:	88 23       	and	r24, r24
    2690:	e1 f7       	brne	.-8      	; 0x268a <dtoa_prf+0x148>
    2692:	e9 0f       	add	r30, r25
    2694:	f1 1d       	adc	r31, r1
    2696:	10 82       	st	Z, r1
    2698:	2e ef       	ldi	r18, 0xFE	; 254
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	af c0       	rjmp	.+350    	; 0x27fc <dtoa_prf+0x2ba>
    269e:	16 16       	cp	r1, r22
    26a0:	17 06       	cpc	r1, r23
    26a2:	1c f0       	brlt	.+6      	; 0x26aa <dtoa_prf+0x168>
    26a4:	41 e0       	ldi	r20, 0x01	; 1
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	03 c0       	rjmp	.+6      	; 0x26b0 <dtoa_prf+0x16e>
    26aa:	ab 01       	movw	r20, r22
    26ac:	4f 5f       	subi	r20, 0xFF	; 255
    26ae:	5f 4f       	sbci	r21, 0xFF	; 255
    26b0:	aa 20       	and	r10, r10
    26b2:	19 f4       	brne	.+6      	; 0x26ba <dtoa_prf+0x178>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <dtoa_prf+0x17e>
    26ba:	8a 2d       	mov	r24, r10
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	aa 23       	and	r26, r26
    26c6:	11 f0       	breq	.+4      	; 0x26cc <dtoa_prf+0x18a>
    26c8:	21 e0       	ldi	r18, 0x01	; 1
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	24 0f       	add	r18, r20
    26ce:	35 1f       	adc	r19, r21
    26d0:	28 0f       	add	r18, r24
    26d2:	39 1f       	adc	r19, r25
    26d4:	81 2f       	mov	r24, r17
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	28 17       	cp	r18, r24
    26da:	39 07       	cpc	r19, r25
    26dc:	14 f0       	brlt	.+4      	; 0x26e2 <dtoa_prf+0x1a0>
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <dtoa_prf+0x1a4>
    26e2:	12 1b       	sub	r17, r18
    26e4:	21 2f       	mov	r18, r17
    26e6:	4b 2d       	mov	r20, r11
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	ca 01       	movw	r24, r20
    26ec:	80 71       	andi	r24, 0x10	; 16
    26ee:	90 70       	andi	r25, 0x00	; 0
    26f0:	b4 fc       	sbrc	r11, 4
    26f2:	0d c0       	rjmp	.+26     	; 0x270e <dtoa_prf+0x1cc>
    26f4:	b3 fc       	sbrc	r11, 3
    26f6:	0b c0       	rjmp	.+22     	; 0x270e <dtoa_prf+0x1cc>
    26f8:	f6 01       	movw	r30, r12
    26fa:	32 2f       	mov	r19, r18
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <dtoa_prf+0x1c2>
    2700:	41 93       	st	Z+, r20
    2702:	31 50       	subi	r19, 0x01	; 1
    2704:	33 23       	and	r19, r19
    2706:	e1 f7       	brne	.-8      	; 0x2700 <dtoa_prf+0x1be>
    2708:	c2 0e       	add	r12, r18
    270a:	d1 1c       	adc	r13, r1
    270c:	01 c0       	rjmp	.+2      	; 0x2710 <dtoa_prf+0x1ce>
    270e:	32 2f       	mov	r19, r18
    2710:	aa 23       	and	r26, r26
    2712:	19 f0       	breq	.+6      	; 0x271a <dtoa_prf+0x1d8>
    2714:	f6 01       	movw	r30, r12
    2716:	a1 93       	st	Z+, r26
    2718:	6f 01       	movw	r12, r30
    271a:	89 2b       	or	r24, r25
    271c:	11 f0       	breq	.+4      	; 0x2722 <dtoa_prf+0x1e0>
    271e:	13 2f       	mov	r17, r19
    2720:	0a c0       	rjmp	.+20     	; 0x2736 <dtoa_prf+0x1f4>
    2722:	f6 01       	movw	r30, r12
    2724:	13 2f       	mov	r17, r19
    2726:	80 e3       	ldi	r24, 0x30	; 48
    2728:	02 c0       	rjmp	.+4      	; 0x272e <dtoa_prf+0x1ec>
    272a:	81 93       	st	Z+, r24
    272c:	11 50       	subi	r17, 0x01	; 1
    272e:	11 23       	and	r17, r17
    2730:	e1 f7       	brne	.-8      	; 0x272a <dtoa_prf+0x1e8>
    2732:	c3 0e       	add	r12, r19
    2734:	d1 1c       	adc	r13, r1
    2736:	09 2d       	mov	r16, r9
    2738:	06 0f       	add	r16, r22
    273a:	ba 80       	ldd	r11, Y+2	; 0x02
    273c:	90 e1       	ldi	r25, 0x10	; 16
    273e:	89 2e       	mov	r8, r25
    2740:	91 2c       	mov	r9, r1
    2742:	8e 20       	and	r8, r14
    2744:	9f 20       	and	r9, r15
    2746:	e4 fe       	sbrs	r14, 4
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <dtoa_prf+0x210>
    274a:	f1 e3       	ldi	r31, 0x31	; 49
    274c:	bf 16       	cp	r11, r31
    274e:	09 f4       	brne	.+2      	; 0x2752 <dtoa_prf+0x210>
    2750:	01 50       	subi	r16, 0x01	; 1
    2752:	10 16       	cp	r1, r16
    2754:	14 f0       	brlt	.+4      	; 0x275a <dtoa_prf+0x218>
    2756:	01 e0       	ldi	r16, 0x01	; 1
    2758:	03 c0       	rjmp	.+6      	; 0x2760 <dtoa_prf+0x21e>
    275a:	09 30       	cpi	r16, 0x09	; 9
    275c:	08 f0       	brcs	.+2      	; 0x2760 <dtoa_prf+0x21e>
    275e:	08 e0       	ldi	r16, 0x08	; 8
    2760:	9b 01       	movw	r18, r22
    2762:	77 ff       	sbrs	r23, 7
    2764:	02 c0       	rjmp	.+4      	; 0x276a <dtoa_prf+0x228>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	cb 01       	movw	r24, r22
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	82 1b       	sub	r24, r18
    2770:	93 0b       	sbc	r25, r19
    2772:	fe 01       	movw	r30, r28
    2774:	31 96       	adiw	r30, 0x01	; 1
    2776:	e8 0f       	add	r30, r24
    2778:	f9 1f       	adc	r31, r25
    277a:	8e e2       	ldi	r24, 0x2E	; 46
    277c:	f8 2e       	mov	r15, r24
    277e:	3b 01       	movw	r6, r22
    2780:	60 1a       	sub	r6, r16
    2782:	71 08       	sbc	r7, r1
    2784:	8a 2d       	mov	r24, r10
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	44 27       	eor	r20, r20
    278a:	55 27       	eor	r21, r21
    278c:	48 1b       	sub	r20, r24
    278e:	59 0b       	sbc	r21, r25
    2790:	8f ef       	ldi	r24, 0xFF	; 255
    2792:	2f 3f       	cpi	r18, 0xFF	; 255
    2794:	38 07       	cpc	r19, r24
    2796:	19 f4       	brne	.+6      	; 0x279e <dtoa_prf+0x25c>
    2798:	d6 01       	movw	r26, r12
    279a:	fd 92       	st	X+, r15
    279c:	6d 01       	movw	r12, r26
    279e:	62 17       	cp	r22, r18
    27a0:	73 07       	cpc	r23, r19
    27a2:	2c f0       	brlt	.+10     	; 0x27ae <dtoa_prf+0x26c>
    27a4:	62 16       	cp	r6, r18
    27a6:	73 06       	cpc	r7, r19
    27a8:	14 f4       	brge	.+4      	; 0x27ae <dtoa_prf+0x26c>
    27aa:	80 81       	ld	r24, Z
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <dtoa_prf+0x26e>
    27ae:	80 e3       	ldi	r24, 0x30	; 48
    27b0:	21 50       	subi	r18, 0x01	; 1
    27b2:	30 40       	sbci	r19, 0x00	; 0
    27b4:	31 96       	adiw	r30, 0x01	; 1
    27b6:	24 17       	cp	r18, r20
    27b8:	35 07       	cpc	r19, r21
    27ba:	24 f0       	brlt	.+8      	; 0x27c4 <dtoa_prf+0x282>
    27bc:	d6 01       	movw	r26, r12
    27be:	8d 93       	st	X+, r24
    27c0:	6d 01       	movw	r12, r26
    27c2:	e6 cf       	rjmp	.-52     	; 0x2790 <dtoa_prf+0x24e>
    27c4:	26 17       	cp	r18, r22
    27c6:	37 07       	cpc	r19, r23
    27c8:	49 f4       	brne	.+18     	; 0x27dc <dtoa_prf+0x29a>
    27ca:	b5 e3       	ldi	r27, 0x35	; 53
    27cc:	bb 15       	cp	r27, r11
    27ce:	28 f0       	brcs	.+10     	; 0x27da <dtoa_prf+0x298>
    27d0:	bb 16       	cp	r11, r27
    27d2:	21 f4       	brne	.+8      	; 0x27dc <dtoa_prf+0x29a>
    27d4:	81 14       	cp	r8, r1
    27d6:	91 04       	cpc	r9, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <dtoa_prf+0x29a>
    27da:	81 e3       	ldi	r24, 0x31	; 49
    27dc:	f6 01       	movw	r30, r12
    27de:	81 93       	st	Z+, r24
    27e0:	d6 01       	movw	r26, r12
    27e2:	81 2f       	mov	r24, r17
    27e4:	90 e2       	ldi	r25, 0x20	; 32
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <dtoa_prf+0x2aa>
    27e8:	9c 93       	st	X, r25
    27ea:	81 50       	subi	r24, 0x01	; 1
    27ec:	11 96       	adiw	r26, 0x01	; 1
    27ee:	88 23       	and	r24, r24
    27f0:	d9 f7       	brne	.-10     	; 0x27e8 <dtoa_prf+0x2a6>
    27f2:	e1 0f       	add	r30, r17
    27f4:	f1 1d       	adc	r31, r1
    27f6:	10 82       	st	Z, r1
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	c9 01       	movw	r24, r18
    27fe:	29 96       	adiw	r28, 0x09	; 9
    2800:	ee e0       	ldi	r30, 0x0E	; 14
    2802:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__epilogue_restores__+0x8>

00002806 <__ftoa_engine>:
    2806:	28 30       	cpi	r18, 0x08	; 8
    2808:	08 f0       	brcs	.+2      	; 0x280c <__ftoa_engine+0x6>
    280a:	27 e0       	ldi	r18, 0x07	; 7
    280c:	33 27       	eor	r19, r19
    280e:	da 01       	movw	r26, r20
    2810:	99 0f       	add	r25, r25
    2812:	31 1d       	adc	r19, r1
    2814:	87 fd       	sbrc	r24, 7
    2816:	91 60       	ori	r25, 0x01	; 1
    2818:	00 96       	adiw	r24, 0x00	; 0
    281a:	61 05       	cpc	r22, r1
    281c:	71 05       	cpc	r23, r1
    281e:	39 f4       	brne	.+14     	; 0x282e <__ftoa_engine+0x28>
    2820:	32 60       	ori	r19, 0x02	; 2
    2822:	2e 5f       	subi	r18, 0xFE	; 254
    2824:	3d 93       	st	X+, r19
    2826:	30 e3       	ldi	r19, 0x30	; 48
    2828:	2a 95       	dec	r18
    282a:	e1 f7       	brne	.-8      	; 0x2824 <__ftoa_engine+0x1e>
    282c:	08 95       	ret
    282e:	9f 3f       	cpi	r25, 0xFF	; 255
    2830:	30 f0       	brcs	.+12     	; 0x283e <__ftoa_engine+0x38>
    2832:	80 38       	cpi	r24, 0x80	; 128
    2834:	71 05       	cpc	r23, r1
    2836:	61 05       	cpc	r22, r1
    2838:	09 f0       	breq	.+2      	; 0x283c <__ftoa_engine+0x36>
    283a:	3c 5f       	subi	r19, 0xFC	; 252
    283c:	3c 5f       	subi	r19, 0xFC	; 252
    283e:	3d 93       	st	X+, r19
    2840:	91 30       	cpi	r25, 0x01	; 1
    2842:	08 f0       	brcs	.+2      	; 0x2846 <__ftoa_engine+0x40>
    2844:	80 68       	ori	r24, 0x80	; 128
    2846:	91 1d       	adc	r25, r1
    2848:	df 93       	push	r29
    284a:	cf 93       	push	r28
    284c:	1f 93       	push	r17
    284e:	0f 93       	push	r16
    2850:	ff 92       	push	r15
    2852:	ef 92       	push	r14
    2854:	19 2f       	mov	r17, r25
    2856:	98 7f       	andi	r25, 0xF8	; 248
    2858:	96 95       	lsr	r25
    285a:	e9 2f       	mov	r30, r25
    285c:	96 95       	lsr	r25
    285e:	96 95       	lsr	r25
    2860:	e9 0f       	add	r30, r25
    2862:	ff 27       	eor	r31, r31
    2864:	e2 55       	subi	r30, 0x52	; 82
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	99 27       	eor	r25, r25
    286a:	33 27       	eor	r19, r19
    286c:	ee 24       	eor	r14, r14
    286e:	ff 24       	eor	r15, r15
    2870:	a7 01       	movw	r20, r14
    2872:	e7 01       	movw	r28, r14
    2874:	05 90       	lpm	r0, Z+
    2876:	08 94       	sec
    2878:	07 94       	ror	r0
    287a:	28 f4       	brcc	.+10     	; 0x2886 <__ftoa_engine+0x80>
    287c:	36 0f       	add	r19, r22
    287e:	e7 1e       	adc	r14, r23
    2880:	f8 1e       	adc	r15, r24
    2882:	49 1f       	adc	r20, r25
    2884:	51 1d       	adc	r21, r1
    2886:	66 0f       	add	r22, r22
    2888:	77 1f       	adc	r23, r23
    288a:	88 1f       	adc	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	06 94       	lsr	r0
    2890:	a1 f7       	brne	.-24     	; 0x287a <__ftoa_engine+0x74>
    2892:	05 90       	lpm	r0, Z+
    2894:	07 94       	ror	r0
    2896:	28 f4       	brcc	.+10     	; 0x28a2 <__ftoa_engine+0x9c>
    2898:	e7 0e       	add	r14, r23
    289a:	f8 1e       	adc	r15, r24
    289c:	49 1f       	adc	r20, r25
    289e:	56 1f       	adc	r21, r22
    28a0:	c1 1d       	adc	r28, r1
    28a2:	77 0f       	add	r23, r23
    28a4:	88 1f       	adc	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	66 1f       	adc	r22, r22
    28aa:	06 94       	lsr	r0
    28ac:	a1 f7       	brne	.-24     	; 0x2896 <__ftoa_engine+0x90>
    28ae:	05 90       	lpm	r0, Z+
    28b0:	07 94       	ror	r0
    28b2:	28 f4       	brcc	.+10     	; 0x28be <__ftoa_engine+0xb8>
    28b4:	f8 0e       	add	r15, r24
    28b6:	49 1f       	adc	r20, r25
    28b8:	56 1f       	adc	r21, r22
    28ba:	c7 1f       	adc	r28, r23
    28bc:	d1 1d       	adc	r29, r1
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	66 1f       	adc	r22, r22
    28c4:	77 1f       	adc	r23, r23
    28c6:	06 94       	lsr	r0
    28c8:	a1 f7       	brne	.-24     	; 0x28b2 <__ftoa_engine+0xac>
    28ca:	05 90       	lpm	r0, Z+
    28cc:	07 94       	ror	r0
    28ce:	20 f4       	brcc	.+8      	; 0x28d8 <__ftoa_engine+0xd2>
    28d0:	49 0f       	add	r20, r25
    28d2:	56 1f       	adc	r21, r22
    28d4:	c7 1f       	adc	r28, r23
    28d6:	d8 1f       	adc	r29, r24
    28d8:	99 0f       	add	r25, r25
    28da:	66 1f       	adc	r22, r22
    28dc:	77 1f       	adc	r23, r23
    28de:	88 1f       	adc	r24, r24
    28e0:	06 94       	lsr	r0
    28e2:	a9 f7       	brne	.-22     	; 0x28ce <__ftoa_engine+0xc8>
    28e4:	84 91       	lpm	r24, Z+
    28e6:	10 95       	com	r17
    28e8:	17 70       	andi	r17, 0x07	; 7
    28ea:	41 f0       	breq	.+16     	; 0x28fc <__ftoa_engine+0xf6>
    28ec:	d6 95       	lsr	r29
    28ee:	c7 95       	ror	r28
    28f0:	57 95       	ror	r21
    28f2:	47 95       	ror	r20
    28f4:	f7 94       	ror	r15
    28f6:	e7 94       	ror	r14
    28f8:	1a 95       	dec	r17
    28fa:	c1 f7       	brne	.-16     	; 0x28ec <__ftoa_engine+0xe6>
    28fc:	e4 e5       	ldi	r30, 0x54	; 84
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	68 94       	set
    2902:	15 90       	lpm	r1, Z+
    2904:	15 91       	lpm	r17, Z+
    2906:	35 91       	lpm	r19, Z+
    2908:	65 91       	lpm	r22, Z+
    290a:	95 91       	lpm	r25, Z+
    290c:	05 90       	lpm	r0, Z+
    290e:	7f e2       	ldi	r23, 0x2F	; 47
    2910:	73 95       	inc	r23
    2912:	e1 18       	sub	r14, r1
    2914:	f1 0a       	sbc	r15, r17
    2916:	43 0b       	sbc	r20, r19
    2918:	56 0b       	sbc	r21, r22
    291a:	c9 0b       	sbc	r28, r25
    291c:	d0 09       	sbc	r29, r0
    291e:	c0 f7       	brcc	.-16     	; 0x2910 <__ftoa_engine+0x10a>
    2920:	e1 0c       	add	r14, r1
    2922:	f1 1e       	adc	r15, r17
    2924:	43 1f       	adc	r20, r19
    2926:	56 1f       	adc	r21, r22
    2928:	c9 1f       	adc	r28, r25
    292a:	d0 1d       	adc	r29, r0
    292c:	7e f4       	brtc	.+30     	; 0x294c <__ftoa_engine+0x146>
    292e:	70 33       	cpi	r23, 0x30	; 48
    2930:	11 f4       	brne	.+4      	; 0x2936 <__ftoa_engine+0x130>
    2932:	8a 95       	dec	r24
    2934:	e6 cf       	rjmp	.-52     	; 0x2902 <__ftoa_engine+0xfc>
    2936:	e8 94       	clt
    2938:	01 50       	subi	r16, 0x01	; 1
    293a:	30 f0       	brcs	.+12     	; 0x2948 <__ftoa_engine+0x142>
    293c:	08 0f       	add	r16, r24
    293e:	0a f4       	brpl	.+2      	; 0x2942 <__ftoa_engine+0x13c>
    2940:	00 27       	eor	r16, r16
    2942:	02 17       	cp	r16, r18
    2944:	08 f4       	brcc	.+2      	; 0x2948 <__ftoa_engine+0x142>
    2946:	20 2f       	mov	r18, r16
    2948:	23 95       	inc	r18
    294a:	02 2f       	mov	r16, r18
    294c:	7a 33       	cpi	r23, 0x3A	; 58
    294e:	28 f0       	brcs	.+10     	; 0x295a <__ftoa_engine+0x154>
    2950:	79 e3       	ldi	r23, 0x39	; 57
    2952:	7d 93       	st	X+, r23
    2954:	2a 95       	dec	r18
    2956:	e9 f7       	brne	.-6      	; 0x2952 <__ftoa_engine+0x14c>
    2958:	10 c0       	rjmp	.+32     	; 0x297a <__ftoa_engine+0x174>
    295a:	7d 93       	st	X+, r23
    295c:	2a 95       	dec	r18
    295e:	89 f6       	brne	.-94     	; 0x2902 <__ftoa_engine+0xfc>
    2960:	06 94       	lsr	r0
    2962:	97 95       	ror	r25
    2964:	67 95       	ror	r22
    2966:	37 95       	ror	r19
    2968:	17 95       	ror	r17
    296a:	17 94       	ror	r1
    296c:	e1 18       	sub	r14, r1
    296e:	f1 0a       	sbc	r15, r17
    2970:	43 0b       	sbc	r20, r19
    2972:	56 0b       	sbc	r21, r22
    2974:	c9 0b       	sbc	r28, r25
    2976:	d0 09       	sbc	r29, r0
    2978:	98 f0       	brcs	.+38     	; 0x29a0 <__ftoa_engine+0x19a>
    297a:	23 95       	inc	r18
    297c:	7e 91       	ld	r23, -X
    297e:	73 95       	inc	r23
    2980:	7a 33       	cpi	r23, 0x3A	; 58
    2982:	08 f0       	brcs	.+2      	; 0x2986 <__ftoa_engine+0x180>
    2984:	70 e3       	ldi	r23, 0x30	; 48
    2986:	7c 93       	st	X, r23
    2988:	20 13       	cpse	r18, r16
    298a:	b8 f7       	brcc	.-18     	; 0x297a <__ftoa_engine+0x174>
    298c:	7e 91       	ld	r23, -X
    298e:	70 61       	ori	r23, 0x10	; 16
    2990:	7d 93       	st	X+, r23
    2992:	30 f0       	brcs	.+12     	; 0x29a0 <__ftoa_engine+0x19a>
    2994:	83 95       	inc	r24
    2996:	71 e3       	ldi	r23, 0x31	; 49
    2998:	7d 93       	st	X+, r23
    299a:	70 e3       	ldi	r23, 0x30	; 48
    299c:	2a 95       	dec	r18
    299e:	e1 f7       	brne	.-8      	; 0x2998 <__ftoa_engine+0x192>
    29a0:	11 24       	eor	r1, r1
    29a2:	ef 90       	pop	r14
    29a4:	ff 90       	pop	r15
    29a6:	0f 91       	pop	r16
    29a8:	1f 91       	pop	r17
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	99 27       	eor	r25, r25
    29b0:	87 fd       	sbrc	r24, 7
    29b2:	90 95       	com	r25
    29b4:	08 95       	ret

000029b6 <strnlen_P>:
    29b6:	fc 01       	movw	r30, r24
    29b8:	05 90       	lpm	r0, Z+
    29ba:	61 50       	subi	r22, 0x01	; 1
    29bc:	70 40       	sbci	r23, 0x00	; 0
    29be:	01 10       	cpse	r0, r1
    29c0:	d8 f7       	brcc	.-10     	; 0x29b8 <strnlen_P+0x2>
    29c2:	80 95       	com	r24
    29c4:	90 95       	com	r25
    29c6:	8e 0f       	add	r24, r30
    29c8:	9f 1f       	adc	r25, r31
    29ca:	08 95       	ret

000029cc <strnlen>:
    29cc:	fc 01       	movw	r30, r24
    29ce:	61 50       	subi	r22, 0x01	; 1
    29d0:	70 40       	sbci	r23, 0x00	; 0
    29d2:	01 90       	ld	r0, Z+
    29d4:	01 10       	cpse	r0, r1
    29d6:	d8 f7       	brcc	.-10     	; 0x29ce <strnlen+0x2>
    29d8:	80 95       	com	r24
    29da:	90 95       	com	r25
    29dc:	8e 0f       	add	r24, r30
    29de:	9f 1f       	adc	r25, r31
    29e0:	08 95       	ret

000029e2 <fputc>:
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	8c 01       	movw	r16, r24
    29ec:	eb 01       	movw	r28, r22
    29ee:	8b 81       	ldd	r24, Y+3	; 0x03
    29f0:	81 ff       	sbrs	r24, 1
    29f2:	1b c0       	rjmp	.+54     	; 0x2a2a <fputc+0x48>
    29f4:	82 ff       	sbrs	r24, 2
    29f6:	0d c0       	rjmp	.+26     	; 0x2a12 <fputc+0x30>
    29f8:	2e 81       	ldd	r18, Y+6	; 0x06
    29fa:	3f 81       	ldd	r19, Y+7	; 0x07
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2a00:	28 17       	cp	r18, r24
    2a02:	39 07       	cpc	r19, r25
    2a04:	64 f4       	brge	.+24     	; 0x2a1e <fputc+0x3c>
    2a06:	e8 81       	ld	r30, Y
    2a08:	f9 81       	ldd	r31, Y+1	; 0x01
    2a0a:	01 93       	st	Z+, r16
    2a0c:	f9 83       	std	Y+1, r31	; 0x01
    2a0e:	e8 83       	st	Y, r30
    2a10:	06 c0       	rjmp	.+12     	; 0x2a1e <fputc+0x3c>
    2a12:	e8 85       	ldd	r30, Y+8	; 0x08
    2a14:	f9 85       	ldd	r31, Y+9	; 0x09
    2a16:	80 2f       	mov	r24, r16
    2a18:	09 95       	icall
    2a1a:	89 2b       	or	r24, r25
    2a1c:	31 f4       	brne	.+12     	; 0x2a2a <fputc+0x48>
    2a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a20:	9f 81       	ldd	r25, Y+7	; 0x07
    2a22:	01 96       	adiw	r24, 0x01	; 1
    2a24:	9f 83       	std	Y+7, r25	; 0x07
    2a26:	8e 83       	std	Y+6, r24	; 0x06
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <fputc+0x4c>
    2a2a:	0f ef       	ldi	r16, 0xFF	; 255
    2a2c:	1f ef       	ldi	r17, 0xFF	; 255
    2a2e:	c8 01       	movw	r24, r16
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	08 95       	ret

00002a3a <__ultoa_invert>:
    2a3a:	fa 01       	movw	r30, r20
    2a3c:	aa 27       	eor	r26, r26
    2a3e:	28 30       	cpi	r18, 0x08	; 8
    2a40:	51 f1       	breq	.+84     	; 0x2a96 <__ultoa_invert+0x5c>
    2a42:	20 31       	cpi	r18, 0x10	; 16
    2a44:	81 f1       	breq	.+96     	; 0x2aa6 <__ultoa_invert+0x6c>
    2a46:	e8 94       	clt
    2a48:	6f 93       	push	r22
    2a4a:	6e 7f       	andi	r22, 0xFE	; 254
    2a4c:	6e 5f       	subi	r22, 0xFE	; 254
    2a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a50:	8f 4f       	sbci	r24, 0xFF	; 255
    2a52:	9f 4f       	sbci	r25, 0xFF	; 255
    2a54:	af 4f       	sbci	r26, 0xFF	; 255
    2a56:	b1 e0       	ldi	r27, 0x01	; 1
    2a58:	3e d0       	rcall	.+124    	; 0x2ad6 <__ultoa_invert+0x9c>
    2a5a:	b4 e0       	ldi	r27, 0x04	; 4
    2a5c:	3c d0       	rcall	.+120    	; 0x2ad6 <__ultoa_invert+0x9c>
    2a5e:	67 0f       	add	r22, r23
    2a60:	78 1f       	adc	r23, r24
    2a62:	89 1f       	adc	r24, r25
    2a64:	9a 1f       	adc	r25, r26
    2a66:	a1 1d       	adc	r26, r1
    2a68:	68 0f       	add	r22, r24
    2a6a:	79 1f       	adc	r23, r25
    2a6c:	8a 1f       	adc	r24, r26
    2a6e:	91 1d       	adc	r25, r1
    2a70:	a1 1d       	adc	r26, r1
    2a72:	6a 0f       	add	r22, r26
    2a74:	71 1d       	adc	r23, r1
    2a76:	81 1d       	adc	r24, r1
    2a78:	91 1d       	adc	r25, r1
    2a7a:	a1 1d       	adc	r26, r1
    2a7c:	20 d0       	rcall	.+64     	; 0x2abe <__ultoa_invert+0x84>
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <__ultoa_invert+0x48>
    2a80:	68 94       	set
    2a82:	3f 91       	pop	r19
    2a84:	2a e0       	ldi	r18, 0x0A	; 10
    2a86:	26 9f       	mul	r18, r22
    2a88:	11 24       	eor	r1, r1
    2a8a:	30 19       	sub	r19, r0
    2a8c:	30 5d       	subi	r19, 0xD0	; 208
    2a8e:	31 93       	st	Z+, r19
    2a90:	de f6       	brtc	.-74     	; 0x2a48 <__ultoa_invert+0xe>
    2a92:	cf 01       	movw	r24, r30
    2a94:	08 95       	ret
    2a96:	46 2f       	mov	r20, r22
    2a98:	47 70       	andi	r20, 0x07	; 7
    2a9a:	40 5d       	subi	r20, 0xD0	; 208
    2a9c:	41 93       	st	Z+, r20
    2a9e:	b3 e0       	ldi	r27, 0x03	; 3
    2aa0:	0f d0       	rcall	.+30     	; 0x2ac0 <__ultoa_invert+0x86>
    2aa2:	c9 f7       	brne	.-14     	; 0x2a96 <__ultoa_invert+0x5c>
    2aa4:	f6 cf       	rjmp	.-20     	; 0x2a92 <__ultoa_invert+0x58>
    2aa6:	46 2f       	mov	r20, r22
    2aa8:	4f 70       	andi	r20, 0x0F	; 15
    2aaa:	40 5d       	subi	r20, 0xD0	; 208
    2aac:	4a 33       	cpi	r20, 0x3A	; 58
    2aae:	18 f0       	brcs	.+6      	; 0x2ab6 <__ultoa_invert+0x7c>
    2ab0:	49 5d       	subi	r20, 0xD9	; 217
    2ab2:	31 fd       	sbrc	r19, 1
    2ab4:	40 52       	subi	r20, 0x20	; 32
    2ab6:	41 93       	st	Z+, r20
    2ab8:	02 d0       	rcall	.+4      	; 0x2abe <__ultoa_invert+0x84>
    2aba:	a9 f7       	brne	.-22     	; 0x2aa6 <__ultoa_invert+0x6c>
    2abc:	ea cf       	rjmp	.-44     	; 0x2a92 <__ultoa_invert+0x58>
    2abe:	b4 e0       	ldi	r27, 0x04	; 4
    2ac0:	a6 95       	lsr	r26
    2ac2:	97 95       	ror	r25
    2ac4:	87 95       	ror	r24
    2ac6:	77 95       	ror	r23
    2ac8:	67 95       	ror	r22
    2aca:	ba 95       	dec	r27
    2acc:	c9 f7       	brne	.-14     	; 0x2ac0 <__ultoa_invert+0x86>
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	61 05       	cpc	r22, r1
    2ad2:	71 05       	cpc	r23, r1
    2ad4:	08 95       	ret
    2ad6:	9b 01       	movw	r18, r22
    2ad8:	ac 01       	movw	r20, r24
    2ada:	0a 2e       	mov	r0, r26
    2adc:	06 94       	lsr	r0
    2ade:	57 95       	ror	r21
    2ae0:	47 95       	ror	r20
    2ae2:	37 95       	ror	r19
    2ae4:	27 95       	ror	r18
    2ae6:	ba 95       	dec	r27
    2ae8:	c9 f7       	brne	.-14     	; 0x2adc <__ultoa_invert+0xa2>
    2aea:	62 0f       	add	r22, r18
    2aec:	73 1f       	adc	r23, r19
    2aee:	84 1f       	adc	r24, r20
    2af0:	95 1f       	adc	r25, r21
    2af2:	a0 1d       	adc	r26, r0
    2af4:	08 95       	ret

00002af6 <__fp_mintl>:
    2af6:	88 23       	and	r24, r24
    2af8:	71 f4       	brne	.+28     	; 0x2b16 <__fp_mintl+0x20>
    2afa:	77 23       	and	r23, r23
    2afc:	21 f0       	breq	.+8      	; 0x2b06 <__fp_mintl+0x10>
    2afe:	98 50       	subi	r25, 0x08	; 8
    2b00:	87 2b       	or	r24, r23
    2b02:	76 2f       	mov	r23, r22
    2b04:	07 c0       	rjmp	.+14     	; 0x2b14 <__fp_mintl+0x1e>
    2b06:	66 23       	and	r22, r22
    2b08:	11 f4       	brne	.+4      	; 0x2b0e <__fp_mintl+0x18>
    2b0a:	99 27       	eor	r25, r25
    2b0c:	0d c0       	rjmp	.+26     	; 0x2b28 <__fp_mintl+0x32>
    2b0e:	90 51       	subi	r25, 0x10	; 16
    2b10:	86 2b       	or	r24, r22
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	2a f0       	brmi	.+10     	; 0x2b22 <__fp_mintl+0x2c>
    2b18:	9a 95       	dec	r25
    2b1a:	66 0f       	add	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	88 1f       	adc	r24, r24
    2b20:	da f7       	brpl	.-10     	; 0x2b18 <__fp_mintl+0x22>
    2b22:	88 0f       	add	r24, r24
    2b24:	96 95       	lsr	r25
    2b26:	87 95       	ror	r24
    2b28:	97 f9       	bld	r25, 7
    2b2a:	08 95       	ret

00002b2c <__fp_mpack>:
    2b2c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b2e:	31 f0       	breq	.+12     	; 0x2b3c <__fp_mpack_finite+0xc>

00002b30 <__fp_mpack_finite>:
    2b30:	91 50       	subi	r25, 0x01	; 1
    2b32:	20 f4       	brcc	.+8      	; 0x2b3c <__fp_mpack_finite+0xc>
    2b34:	87 95       	ror	r24
    2b36:	77 95       	ror	r23
    2b38:	67 95       	ror	r22
    2b3a:	b7 95       	ror	r27
    2b3c:	88 0f       	add	r24, r24
    2b3e:	91 1d       	adc	r25, r1
    2b40:	96 95       	lsr	r25
    2b42:	87 95       	ror	r24
    2b44:	97 f9       	bld	r25, 7
    2b46:	08 95       	ret

00002b48 <__fp_split3>:
    2b48:	57 fd       	sbrc	r21, 7
    2b4a:	90 58       	subi	r25, 0x80	; 128
    2b4c:	44 0f       	add	r20, r20
    2b4e:	55 1f       	adc	r21, r21
    2b50:	59 f0       	breq	.+22     	; 0x2b68 <__fp_splitA+0x10>
    2b52:	5f 3f       	cpi	r21, 0xFF	; 255
    2b54:	71 f0       	breq	.+28     	; 0x2b72 <__fp_splitA+0x1a>
    2b56:	47 95       	ror	r20

00002b58 <__fp_splitA>:
    2b58:	88 0f       	add	r24, r24
    2b5a:	97 fb       	bst	r25, 7
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	61 f0       	breq	.+24     	; 0x2b78 <__fp_splitA+0x20>
    2b60:	9f 3f       	cpi	r25, 0xFF	; 255
    2b62:	79 f0       	breq	.+30     	; 0x2b82 <__fp_splitA+0x2a>
    2b64:	87 95       	ror	r24
    2b66:	08 95       	ret
    2b68:	12 16       	cp	r1, r18
    2b6a:	13 06       	cpc	r1, r19
    2b6c:	14 06       	cpc	r1, r20
    2b6e:	55 1f       	adc	r21, r21
    2b70:	f2 cf       	rjmp	.-28     	; 0x2b56 <__fp_split3+0xe>
    2b72:	46 95       	lsr	r20
    2b74:	f1 df       	rcall	.-30     	; 0x2b58 <__fp_splitA>
    2b76:	08 c0       	rjmp	.+16     	; 0x2b88 <__fp_splitA+0x30>
    2b78:	16 16       	cp	r1, r22
    2b7a:	17 06       	cpc	r1, r23
    2b7c:	18 06       	cpc	r1, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	f1 cf       	rjmp	.-30     	; 0x2b64 <__fp_splitA+0xc>
    2b82:	86 95       	lsr	r24
    2b84:	71 05       	cpc	r23, r1
    2b86:	61 05       	cpc	r22, r1
    2b88:	08 94       	sec
    2b8a:	08 95       	ret

00002b8c <__fp_zero>:
    2b8c:	e8 94       	clt

00002b8e <__fp_szero>:
    2b8e:	bb 27       	eor	r27, r27
    2b90:	66 27       	eor	r22, r22
    2b92:	77 27       	eor	r23, r23
    2b94:	cb 01       	movw	r24, r22
    2b96:	97 f9       	bld	r25, 7
    2b98:	08 95       	ret

00002b9a <_exit>:
    2b9a:	f8 94       	cli

00002b9c <__stop_program>:
    2b9c:	ff cf       	rjmp	.-2      	; 0x2b9c <__stop_program>
