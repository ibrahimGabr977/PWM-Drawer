
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  000029da  00002a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080019e  0080019e  00002bac  2**0
                  ALLOC
  3 .stab         00001c50  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f9c  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00005b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000817e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000964c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000a958  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea ed       	ldi	r30, 0xDA	; 218
     162:	f9 e2       	ldi	r31, 0x29	; 41
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ae 39       	cpi	r26, 0x9E	; 158
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	ae e9       	ldi	r26, 0x9E	; 158
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a0 3c       	cpi	r26, 0xC0	; 192
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 97 11 	call	0x232e	; 0x232e <main>
     184:	0c 94 eb 14 	jmp	0x29d6	; 0x29d6 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ab e6       	ldi	r26, 0x6B	; 107
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8b e6       	ldi	r24, 0x6B	; 107
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6b e6       	ldi	r22, 0x6B	; 107
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x20>

00000b08 <__floatunsisf>:
     b08:	a8 e0       	ldi	r26, 0x08	; 8
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x10>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__floatunsisf+0x20>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	60 c0       	rjmp	.+192    	; 0xbe8 <__floatunsisf+0xe0>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	8e e1       	ldi	r24, 0x1E	; 30
     b2e:	c8 2e       	mov	r12, r24
     b30:	d1 2c       	mov	r13, r1
     b32:	dc 82       	std	Y+4, r13	; 0x04
     b34:	cb 82       	std	Y+3, r12	; 0x03
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     b46:	fc 01       	movw	r30, r24
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f7 ff       	sbrs	r31, 7
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <__floatunsisf+0xbc>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	2e 1b       	sub	r18, r30
     b54:	3f 0b       	sbc	r19, r31
     b56:	57 01       	movw	r10, r14
     b58:	68 01       	movw	r12, r16
     b5a:	02 2e       	mov	r0, r18
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__floatunsisf+0x5e>
     b5e:	d6 94       	lsr	r13
     b60:	c7 94       	ror	r12
     b62:	b7 94       	ror	r11
     b64:	a7 94       	ror	r10
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <__floatunsisf+0x56>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__floatunsisf+0x7c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__floatunsisf+0x74>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatunsisf+0x9e>
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	4a 29       	or	r20, r10
     ba8:	5b 29       	or	r21, r11
     baa:	6c 29       	or	r22, r12
     bac:	7d 29       	or	r23, r13
     bae:	4d 83       	std	Y+5, r20	; 0x05
     bb0:	5e 83       	std	Y+6, r21	; 0x06
     bb2:	6f 83       	std	Y+7, r22	; 0x07
     bb4:	78 87       	std	Y+8, r23	; 0x08
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8e 1b       	sub	r24, r30
     bbc:	9f 0b       	sbc	r25, r31
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <__floatunsisf+0xe0>
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__floatunsisf+0xe0>
     bc8:	0e 2e       	mov	r0, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__floatunsisf+0xcc>
     bcc:	ee 0c       	add	r14, r14
     bce:	ff 1c       	adc	r15, r15
     bd0:	00 1f       	adc	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__floatunsisf+0xc4>
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	ce 1a       	sub	r12, r30
     be2:	df 0a       	sbc	r13, r31
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	cb 82       	std	Y+3, r12	; 0x03
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__+0x10>

00000bfa <__clzsi2>:
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	e8 16       	cp	r14, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	f8 06       	cpc	r15, r24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 07       	cpc	r16, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	18 07       	cpc	r17, r24
     c16:	88 f4       	brcc	.+34     	; 0xc3a <__clzsi2+0x40>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	31 f0       	breq	.+12     	; 0xc30 <__clzsi2+0x36>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__clzsi2+0x36>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__clzsi2+0x64>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <__clzsi2+0x64>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	e8 16       	cp	r14, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	f8 06       	cpc	r15, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 07       	cpc	r16, r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	18 07       	cpc	r17, r24
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x5c>
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__clzsi2+0x64>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	4a 0b       	sbc	r20, r26
     c6c:	5b 0b       	sbc	r21, r27
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__clzsi2+0x7e>
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__clzsi2+0x76>
     c7c:	f7 01       	movw	r30, r14
     c7e:	ed 58       	subi	r30, 0x8D	; 141
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	80 81       	ld	r24, Z
     c84:	28 1b       	sub	r18, r24
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
     c8c:	c9 01       	movw	r24, r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <__pack_f>:
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	fc 01       	movw	r30, r24
     ca4:	e4 80       	ldd	r14, Z+4	; 0x04
     ca6:	f5 80       	ldd	r15, Z+5	; 0x05
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	80 81       	ld	r24, Z
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__pack_f+0x2e>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e1       	ldi	r26, 0x10	; 16
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 2a       	or	r14, r24
     cbe:	f9 2a       	or	r15, r25
     cc0:	0a 2b       	or	r16, r26
     cc2:	1b 2b       	or	r17, r27
     cc4:	a5 c0       	rjmp	.+330    	; 0xe10 <__pack_f+0x178>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	09 f4       	brne	.+2      	; 0xccc <__pack_f+0x34>
     cca:	9f c0       	rjmp	.+318    	; 0xe0a <__pack_f+0x172>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__pack_f+0x40>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	87 01       	movw	r16, r14
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x4a>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	01 05       	cpc	r16, r1
     cde:	11 05       	cpc	r17, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__pack_f+0x50>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	96 c0       	rjmp	.+300    	; 0xe14 <__pack_f+0x17c>
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	62 38       	cpi	r22, 0x82	; 130
     cf0:	79 07       	cpc	r23, r25
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__pack_f+0x5e>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <__pack_f+0x114>
     cf6:	22 e8       	ldi	r18, 0x82	; 130
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2a 31       	cpi	r18, 0x1A	; 26
     d00:	31 05       	cpc	r19, r1
     d02:	2c f0       	brlt	.+10     	; 0xd0e <__pack_f+0x76>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <__pack_f+0xca>
     d0e:	b8 01       	movw	r22, r16
     d10:	a7 01       	movw	r20, r14
     d12:	02 2e       	mov	r0, r18
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__pack_f+0x86>
     d16:	76 95       	lsr	r23
     d18:	67 95       	ror	r22
     d1a:	57 95       	ror	r21
     d1c:	47 95       	ror	r20
     d1e:	0a 94       	dec	r0
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__pack_f+0x7e>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__pack_f+0x9c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	2a 95       	dec	r18
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <__pack_f+0x94>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	a1 09       	sbc	r26, r1
     d3c:	b1 09       	sbc	r27, r1
     d3e:	8e 21       	and	r24, r14
     d40:	9f 21       	and	r25, r15
     d42:	a0 23       	and	r26, r16
     d44:	b1 23       	and	r27, r17
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__pack_f+0xbe>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	9a 01       	movw	r18, r20
     d58:	ab 01       	movw	r20, r22
     d5a:	28 2b       	or	r18, r24
     d5c:	39 2b       	or	r19, r25
     d5e:	4a 2b       	or	r20, r26
     d60:	5b 2b       	or	r21, r27
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	a0 70       	andi	r26, 0x00	; 0
     d6c:	b0 70       	andi	r27, 0x00	; 0
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <__pack_f+0xee>
     d78:	27 ff       	sbrs	r18, 7
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__pack_f+0xf6>
     d7c:	20 5c       	subi	r18, 0xC0	; 192
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__pack_f+0xf6>
     d86:	21 5c       	subi	r18, 0xC1	; 193
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	4f 4f       	sbci	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	3a 07       	cpc	r19, r26
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 07       	cpc	r20, r26
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	5a 07       	cpc	r21, r26
     da0:	10 f0       	brcs	.+4      	; 0xda6 <__pack_f+0x10e>
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	79 01       	movw	r14, r18
     da8:	8a 01       	movw	r16, r20
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <__pack_f+0x162>
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	71 05       	cpc	r23, r1
     db0:	64 f5       	brge	.+88     	; 0xe0a <__pack_f+0x172>
     db2:	fb 01       	movw	r30, r22
     db4:	e1 58       	subi	r30, 0x81	; 129
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	d8 01       	movw	r26, r16
     dba:	c7 01       	movw	r24, r14
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	a0 70       	andi	r26, 0x00	; 0
     dc2:	b0 70       	andi	r27, 0x00	; 0
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <__pack_f+0x144>
     dce:	e7 fe       	sbrs	r14, 7
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__pack_f+0x154>
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__pack_f+0x14c>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 0e       	add	r14, r24
     de6:	f9 1e       	adc	r15, r25
     de8:	0a 1f       	adc	r16, r26
     dea:	1b 1f       	adc	r17, r27
     dec:	17 ff       	sbrs	r17, 7
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__pack_f+0x162>
     df0:	16 95       	lsr	r17
     df2:	07 95       	ror	r16
     df4:	f7 94       	ror	r15
     df6:	e7 94       	ror	r14
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	16 95       	lsr	r17
     dfe:	07 95       	ror	r16
     e00:	f7 94       	ror	r15
     e02:	e7 94       	ror	r14
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__pack_f+0x164>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__pack_f+0x17c>
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	87 01       	movw	r16, r14
     e10:	ef ef       	ldi	r30, 0xFF	; 255
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	6e 2f       	mov	r22, r30
     e16:	67 95       	ror	r22
     e18:	66 27       	eor	r22, r22
     e1a:	67 95       	ror	r22
     e1c:	90 2f       	mov	r25, r16
     e1e:	9f 77       	andi	r25, 0x7F	; 127
     e20:	d7 94       	ror	r13
     e22:	dd 24       	eor	r13, r13
     e24:	d7 94       	ror	r13
     e26:	8e 2f       	mov	r24, r30
     e28:	86 95       	lsr	r24
     e2a:	49 2f       	mov	r20, r25
     e2c:	46 2b       	or	r20, r22
     e2e:	58 2f       	mov	r21, r24
     e30:	5d 29       	or	r21, r13
     e32:	b7 01       	movw	r22, r14
     e34:	ca 01       	movw	r24, r20
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <__unpack_f>:
     e42:	fc 01       	movw	r30, r24
     e44:	db 01       	movw	r26, r22
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	62 2f       	mov	r22, r18
     e4e:	6f 77       	andi	r22, 0x7F	; 127
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	22 1f       	adc	r18, r18
     e54:	22 27       	eor	r18, r18
     e56:	22 1f       	adc	r18, r18
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	89 2f       	mov	r24, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	82 2b       	or	r24, r18
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	99 1f       	adc	r25, r25
     e66:	99 27       	eor	r25, r25
     e68:	99 1f       	adc	r25, r25
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <__unpack_f+0x9e>
     e76:	41 15       	cp	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__unpack_f+0x42>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <__unpack_f+0xb0>
     e84:	82 e8       	ldi	r24, 0x82	; 130
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	9a 01       	movw	r18, r20
     e92:	ab 01       	movw	r20, r22
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <__unpack_f+0x54>
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8c 93       	st	X, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__unpack_f+0x80>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	20 30       	cpi	r18, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	38 07       	cpc	r19, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	48 07       	cpc	r20, r24
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	58 07       	cpc	r21, r24
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__unpack_f+0x66>
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	2d 93       	st	X+, r18
     ed6:	3d 93       	st	X+, r19
     ed8:	4d 93       	st	X+, r20
     eda:	5c 93       	st	X, r21
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret
     ee0:	2f 3f       	cpi	r18, 0xFF	; 255
     ee2:	31 05       	cpc	r19, r1
     ee4:	79 f4       	brne	.+30     	; 0xf04 <__unpack_f+0xc2>
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	61 05       	cpc	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	19 f4       	brne	.+6      	; 0xef6 <__unpack_f+0xb4>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
     ef4:	08 95       	ret
     ef6:	64 ff       	sbrs	r22, 4
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <__unpack_f+0xbe>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__unpack_f+0xe2>
     f00:	1c 92       	st	X, r1
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <__unpack_f+0xe2>
     f04:	2f 57       	subi	r18, 0x7F	; 127
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	3c 93       	st	X, r19
     f0c:	2e 93       	st	-X, r18
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8c 93       	st	X, r24
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	d1 f7       	brne	.-12     	; 0xf16 <__unpack_f+0xd4>
     f22:	70 64       	ori	r23, 0x40	; 64
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	4d 93       	st	X+, r20
     f28:	5d 93       	st	X+, r21
     f2a:	6d 93       	st	X+, r22
     f2c:	7c 93       	st	X, r23
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	08 95       	ret

00000f32 <__fpcmp_parts_f>:
     f32:	1f 93       	push	r17
     f34:	dc 01       	movw	r26, r24
     f36:	fb 01       	movw	r30, r22
     f38:	9c 91       	ld	r25, X
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__fpcmp_parts_f+0xe>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <__fpcmp_parts_f+0x9c>
     f40:	80 81       	ld	r24, Z
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0x16>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <__fpcmp_parts_f+0x9c>
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	51 f4       	brne	.+20     	; 0xf60 <__fpcmp_parts_f+0x2e>
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 91       	ld	r17, X
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	99 f5       	brne	.+102    	; 0xfba <__fpcmp_parts_f+0x88>
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	61 1b       	sub	r22, r17
     f5c:	71 09       	sbc	r23, r1
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <__fpcmp_parts_f+0xac>
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	21 f0       	breq	.+8      	; 0xf6c <__fpcmp_parts_f+0x3a>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__fpcmp_parts_f+0x42>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	b9 f1       	breq	.+110    	; 0xfda <__fpcmp_parts_f+0xa8>
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	89 f1       	breq	.+98     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     f72:	2d c0       	rjmp	.+90     	; 0xfce <__fpcmp_parts_f+0x9c>
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	1c 91       	ld	r17, X
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	f1 f0       	breq	.+60     	; 0xfba <__fpcmp_parts_f+0x88>
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	18 17       	cp	r17, r24
     f82:	d9 f4       	brne	.+54     	; 0xfba <__fpcmp_parts_f+0x88>
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	94 f0       	brlt	.+36     	; 0xfba <__fpcmp_parts_f+0x88>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	bc f0       	brlt	.+46     	; 0xfca <__fpcmp_parts_f+0x98>
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	8d 91       	ld	r24, X+
     fa0:	9d 91       	ld	r25, X+
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	24 81       	ldd	r18, Z+4	; 0x04
     faa:	35 81       	ldd	r19, Z+5	; 0x05
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <__fpcmp_parts_f+0x8e>
     fba:	11 23       	and	r17, r17
     fbc:	41 f0       	breq	.+16     	; 0xfce <__fpcmp_parts_f+0x9c>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	a4 07       	cpc	r26, r20
     fc6:	b5 07       	cpc	r27, r21
     fc8:	40 f4       	brcc	.+16     	; 0xfda <__fpcmp_parts_f+0xa8>
     fca:	11 23       	and	r17, r17
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <__fpcmp_parts_f+0xac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__fpcmp_parts_f+0xac>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	1f 91       	pop	r17
     fe2:	08 95       	ret

00000fe4 <WaveDrawer_init>:
};




void WaveDrawer_init(){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62

	WaveDrawer_LCD_init();
     fec:	0e 94 00 08 	call	0x1000	; 0x1000 <WaveDrawer_LCD_init>

	PWM_init();
     ff0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <PWM_init>

	PWM_SetDutyCycle(INITIAL_DUTY); //test 50%
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <PWM_SetDutyCycle>


}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <WaveDrawer_LCD_init>:



static void WaveDrawer_LCD_init(){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1008:	0e 94 ad 0b 	call	0x175a	; 0x175a <LCD_init>
	LCD_create_custom_char(VER_INVER_L_ADDRESS, vInver_L);
    100c:	25 e7       	ldi	r18, 0x75	; 117
    100e:	31 e0       	ldi	r19, 0x01	; 1
    1010:	86 e0       	ldi	r24, 0x06	; 6
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	b9 01       	movw	r22, r18
    1016:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_create_custom_char>
	LCD_create_custom_char(HORI_INVER_OF0_ADDRESS, hInver_vInver_L);
    101a:	2d e7       	ldi	r18, 0x7D	; 125
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	94 e0       	ldi	r25, 0x04	; 4
    1022:	b9 01       	movw	r22, r18
    1024:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_create_custom_char>
	LCD_create_custom_char(UPPERSCORE_ADDRESS, upperscore);
    1028:	25 e8       	ldi	r18, 0x85	; 133
    102a:	31 e0       	ldi	r19, 0x01	; 1
    102c:	88 e0       	ldi	r24, 0x08	; 8
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	b9 01       	movw	r22, r18
    1032:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_create_custom_char>
	LCD_create_custom_char(MUNDERSCORE_ADDRESS, underscore);
    1036:	2d e8       	ldi	r18, 0x8D	; 141
    1038:	31 e0       	ldi	r19, 0x01	; 1
    103a:	89 e0       	ldi	r24, 0x09	; 9
    103c:	94 e0       	ldi	r25, 0x04	; 4
    103e:	b9 01       	movw	r22, r18
    1040:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_create_custom_char>
	LCD_create_custom_char(CUSTOM_N_ADDRESS, custom_N);
    1044:	25 e9       	ldi	r18, 0x95	; 149
    1046:	31 e0       	ldi	r19, 0x01	; 1
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	b9 01       	movw	r22, r18
    104e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_create_custom_char>



}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <WaveDrawer_displayInfo>:

//display sample
//F=65 T=.03 D=76%
void WaveDrawer_displayInfo(){
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	freq = round(PWM_get_frequency(1));
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <PWM_get_frequency>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 1b 12 	call	0x2436	; 0x2436 <round>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	90 93 9f 01 	sts	0x019F, r25
    1088:	80 93 9e 01 	sts	0x019E, r24
	LCD_set_cursor(0, 0);
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_set_cursor>
	LCD_write_string("F=");
    1094:	80 e6       	ldi	r24, 0x60	; 96
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_write_string>
	LCD_write_number(freq);
    109c:	80 91 9e 01 	lds	r24, 0x019E
    10a0:	90 91 9f 01 	lds	r25, 0x019F
    10a4:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_write_number>
	LCD_write_string(" T=");
    10a8:	83 e6       	ldi	r24, 0x63	; 99
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_write_string>
	LCD_write_decimal_number(PWM_get_time(1), 2);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 91 0b 	call	0x1722	; 0x1722 <PWM_get_time>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	42 e0       	ldi	r20, 0x02	; 2
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_write_decimal_number>
	LCD_write_string(" D=");
    10c8:	87 e6       	ldi	r24, 0x67	; 103
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <LCD_write_string>
	LCD_write_number((u8)round(((PWM_getDutyCycle()*1.0 / MAX_DUTY*1.0))*100.0));
    10d0:	0e 94 4f 0b 	call	0x169e	; 0x169e <PWM_getDutyCycle>
    10d4:	cc 01       	movw	r24, r24
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	53 e4       	ldi	r21, 0x43	; 67
    10f2:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	48 ec       	ldi	r20, 0xC8	; 200
    1104:	52 e4       	ldi	r21, 0x42	; 66
    1106:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 1b 12 	call	0x2436	; 0x2436 <round>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_write_number>
	LCD_write_char('%');
    112e:	85 e2       	ldi	r24, 0x25	; 37
    1130:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
}
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <WaveDrawer_draw>:





void WaveDrawer_draw(u16* ss){
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <WaveDrawer_draw+0x6>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	9b 83       	std	Y+3, r25	; 0x03
    1148:	8a 83       	std	Y+2, r24	; 0x02
	LCD_set_cursor(1, 0);
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <LCD_set_cursor>



	for(u8 i = 0; i < LCD_COLS; i++){
    1152:	19 82       	std	Y+1, r1	; 0x01
    1154:	b3 c0       	rjmp	.+358    	; 0x12bc <WaveDrawer_draw+0x182>


		if((ss[i-1] == LOW && ss[i] == HIGH && ss[i+1] == LOW)){     //LOW_TO_HIGH_TO_LOW case on middle of screen
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	82 1b       	sub	r24, r18
    1162:	93 0b       	sbc	r25, r19
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	22 27       	eor	r18, r18
    116a:	33 27       	eor	r19, r19
    116c:	28 1b       	sub	r18, r24
    116e:	39 0b       	sbc	r19, r25
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	fc 01       	movw	r30, r24
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	23 e0       	ldi	r18, 0x03	; 3
    1180:	88 3e       	cpi	r24, 0xE8	; 232
    1182:	92 07       	cpc	r25, r18
    1184:	41 f5       	brne	.+80     	; 0x11d6 <WaveDrawer_draw+0x9c>
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 01       	movw	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	9b 81       	ldd	r25, Y+3	; 0x03
    1196:	fc 01       	movw	r30, r24
    1198:	e2 0f       	add	r30, r18
    119a:	f3 1f       	adc	r31, r19
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	24 e0       	ldi	r18, 0x04	; 4
    11a2:	87 35       	cpi	r24, 0x57	; 87
    11a4:	92 07       	cpc	r25, r18
    11a6:	b9 f4       	brne	.+46     	; 0x11d6 <WaveDrawer_draw+0x9c>
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	9c 01       	movw	r18, r24
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	fc 01       	movw	r30, r24
    11bc:	e2 0f       	add	r30, r18
    11be:	f3 1f       	adc	r31, r19
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	23 e0       	ldi	r18, 0x03	; 3
    11c6:	88 3e       	cpi	r24, 0xE8	; 232
    11c8:	92 07       	cpc	r25, r18
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <WaveDrawer_draw+0x9c>

			LCD_write_custom_char(CUSTOM_N_ADDRESS);
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	94 e0       	ldi	r25, 0x04	; 4
    11d0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_write_custom_char>
    11d4:	70 c0       	rjmp	.+224    	; 0x12b6 <WaveDrawer_draw+0x17c>


		}else if(ss[i] == HIGH && ss[i+1] == LOW){                   //HIGH_TO_LOW case on middle of screen
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9c 01       	movw	r18, r24
    11de:	22 0f       	add	r18, r18
    11e0:	33 1f       	adc	r19, r19
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	fc 01       	movw	r30, r24
    11e8:	e2 0f       	add	r30, r18
    11ea:	f3 1f       	adc	r31, r19
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	24 e0       	ldi	r18, 0x04	; 4
    11f2:	87 35       	cpi	r24, 0x57	; 87
    11f4:	92 07       	cpc	r25, r18
    11f6:	b9 f4       	brne	.+46     	; 0x1226 <WaveDrawer_draw+0xec>
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	9c 01       	movw	r18, r24
    1202:	22 0f       	add	r18, r18
    1204:	33 1f       	adc	r19, r19
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	9b 81       	ldd	r25, Y+3	; 0x03
    120a:	fc 01       	movw	r30, r24
    120c:	e2 0f       	add	r30, r18
    120e:	f3 1f       	adc	r31, r19
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	23 e0       	ldi	r18, 0x03	; 3
    1216:	88 3e       	cpi	r24, 0xE8	; 232
    1218:	92 07       	cpc	r25, r18
    121a:	29 f4       	brne	.+10     	; 0x1226 <WaveDrawer_draw+0xec>

			LCD_write_custom_char(HORI_INVER_OF0_ADDRESS);
    121c:	87 e0       	ldi	r24, 0x07	; 7
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_write_custom_char>
    1224:	48 c0       	rjmp	.+144    	; 0x12b6 <WaveDrawer_draw+0x17c>


		}else if(ss[i-1] == LOW && ss[i] == HIGH){                   //LOW_TO_HIGH case on middle of the screen
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	82 1b       	sub	r24, r18
    1232:	93 0b       	sbc	r25, r19
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	22 27       	eor	r18, r18
    123a:	33 27       	eor	r19, r19
    123c:	28 1b       	sub	r18, r24
    123e:	39 0b       	sbc	r19, r25
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	9b 81       	ldd	r25, Y+3	; 0x03
    1244:	fc 01       	movw	r30, r24
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	23 e0       	ldi	r18, 0x03	; 3
    1250:	88 3e       	cpi	r24, 0xE8	; 232
    1252:	92 07       	cpc	r25, r18
    1254:	b1 f4       	brne	.+44     	; 0x1282 <WaveDrawer_draw+0x148>
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9c 01       	movw	r18, r24
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	fc 01       	movw	r30, r24
    1268:	e2 0f       	add	r30, r18
    126a:	f3 1f       	adc	r31, r19
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	24 e0       	ldi	r18, 0x04	; 4
    1272:	87 35       	cpi	r24, 0x57	; 87
    1274:	92 07       	cpc	r25, r18
    1276:	29 f4       	brne	.+10     	; 0x1282 <WaveDrawer_draw+0x148>
			LCD_write_custom_char(VER_INVER_L_ADDRESS);
    1278:	86 e0       	ldi	r24, 0x06	; 6
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_write_custom_char>
    1280:	1a c0       	rjmp	.+52     	; 0x12b6 <WaveDrawer_draw+0x17c>


		}else if(ss[i] == HIGH){                                     //other HIGH cases
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9c 01       	movw	r18, r24
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	fc 01       	movw	r30, r24
    1294:	e2 0f       	add	r30, r18
    1296:	f3 1f       	adc	r31, r19
    1298:	80 81       	ld	r24, Z
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	24 e0       	ldi	r18, 0x04	; 4
    129e:	87 35       	cpi	r24, 0x57	; 87
    12a0:	92 07       	cpc	r25, r18
    12a2:	29 f4       	brne	.+10     	; 0x12ae <WaveDrawer_draw+0x174>
			LCD_write_custom_char(UPPERSCORE_ADDRESS);
    12a4:	88 e0       	ldi	r24, 0x08	; 8
    12a6:	94 e0       	ldi	r25, 0x04	; 4
    12a8:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_write_custom_char>
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <WaveDrawer_draw+0x17c>

		}else{                                                       //other low cases
			LCD_write_custom_char(MUNDERSCORE_ADDRESS);
    12ae:	89 e0       	ldi	r24, 0x09	; 9
    12b0:	94 e0       	ldi	r25, 0x04	; 4
    12b2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <LCD_write_custom_char>
void WaveDrawer_draw(u16* ss){
	LCD_set_cursor(1, 0);



	for(u8 i = 0; i < LCD_COLS; i++){
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	80 31       	cpi	r24, 0x10	; 16
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <WaveDrawer_draw+0x18a>
    12c2:	49 cf       	rjmp	.-366    	; 0x1156 <WaveDrawer_draw+0x1c>
			LCD_write_custom_char(MUNDERSCORE_ADDRESS);
		}
	}


}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <PWM_Drawer_startProgram>:

const u16 signals_series[LCD_COLS];
u16 duty_cycle = INITIAL_DUTY;


void PWM_Drawer_startProgram(){
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	init();
    12d8:	0e 94 92 09 	call	0x1324	; 0x1324 <init>

	startDrawing();
    12dc:	0e 94 bd 0a 	call	0x157a	; 0x157a <startDrawing>
	 while (1) {



		 if(isIncreaseDutyCycleButtonClicked()){
    12e0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <isIncreaseDutyCycleButtonClicked>
    12e4:	88 23       	and	r24, r24
    12e6:	39 f0       	breq	.+14     	; 0x12f6 <PWM_Drawer_startProgram+0x26>

			 updateDisplayWithNewDutyCycle(INCREASE);
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <updateDisplayWithNewDutyCycle>

			 while(isIncreaseDutyCycleButtonClicked());
    12ee:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <isIncreaseDutyCycleButtonClicked>
    12f2:	88 23       	and	r24, r24
    12f4:	e1 f7       	brne	.-8      	; 0x12ee <PWM_Drawer_startProgram+0x1e>



		 }

		 if (isDecreaseDutyCycleButtonClicked()){
    12f6:	0e 94 de 09 	call	0x13bc	; 0x13bc <isDecreaseDutyCycleButtonClicked>
    12fa:	88 23       	and	r24, r24
    12fc:	39 f0       	breq	.+14     	; 0x130c <PWM_Drawer_startProgram+0x3c>

			 updateDisplayWithNewDutyCycle(DECREASE);
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <updateDisplayWithNewDutyCycle>



			 while(isDecreaseDutyCycleButtonClicked());
    1304:	0e 94 de 09 	call	0x13bc	; 0x13bc <isDecreaseDutyCycleButtonClicked>
    1308:	88 23       	and	r24, r24
    130a:	e1 f7       	brne	.-8      	; 0x1304 <PWM_Drawer_startProgram+0x34>
		 }



		 if (isReDrawButtonClicked()){
    130c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <isReDrawButtonClicked>
    1310:	88 23       	and	r24, r24
    1312:	31 f3       	breq	.-52     	; 0x12e0 <PWM_Drawer_startProgram+0x10>

		    updateDisplayWithNewDutyCycle(REDRAW);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <updateDisplayWithNewDutyCycle>



			while(isReDrawButtonClicked());
    131a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <isReDrawButtonClicked>
    131e:	88 23       	and	r24, r24
    1320:	e1 f7       	brne	.-8      	; 0x131a <PWM_Drawer_startProgram+0x4a>
    1322:	de cf       	rjmp	.-68     	; 0x12e0 <PWM_Drawer_startProgram+0x10>

00001324 <init>:
	     }
	 }
}


static void init(){
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	WaveDrawer_init();
    132c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <WaveDrawer_init>
	PWM_createSignalsSeries(signals_series, LCD_COLS);
    1330:	80 ea       	ldi	r24, 0xA0	; 160
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	60 e1       	ldi	r22, 0x10	; 16
    1336:	0e 94 10 0b 	call	0x1620	; 0x1620 <PWM_createSignalsSeries>

	initControllersButtons();
    133a:	0e 94 a2 09 	call	0x1344	; 0x1344 <initControllersButtons>
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <initControllersButtons>:



static void initControllersButtons(){
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(CONTROLLERS_DDR, INCREASE_BUTTON_BIT);
    134c:	a1 e3       	ldi	r26, 0x31	; 49
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e1 e3       	ldi	r30, 0x31	; 49
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8b 7f       	andi	r24, 0xFB	; 251
    1358:	8c 93       	st	X, r24
	CLR_BIT(CONTROLLERS_DDR, DECREASE_BUTTON_BIT);
    135a:	a1 e3       	ldi	r26, 0x31	; 49
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e1 e3       	ldi	r30, 0x31	; 49
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8f 7b       	andi	r24, 0xBF	; 191
    1366:	8c 93       	st	X, r24
	CLR_BIT(REDRAW_BUTTON_DDR, REDRAW_BUTTON_BIT);
    1368:	a7 e3       	ldi	r26, 0x37	; 55
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e7 e3       	ldi	r30, 0x37	; 55
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8e 7f       	andi	r24, 0xFE	; 254
    1374:	8c 93       	st	X, r24

	SET_BIT(CONTROLLERS_PORT, INCREASE_BUTTON_BIT);
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	8c 93       	st	X, r24
	SET_BIT(CONTROLLERS_PORT, DECREASE_BUTTON_BIT);
    1384:	a2 e3       	ldi	r26, 0x32	; 50
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e2 e3       	ldi	r30, 0x32	; 50
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	80 64       	ori	r24, 0x40	; 64
    1390:	8c 93       	st	X, r24
	SET_BIT(REDRAW_BUTTON_PORT, REDRAW_BUTTON_BIT);
    1392:	a8 e3       	ldi	r26, 0x38	; 56
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e8 e3       	ldi	r30, 0x38	; 56
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	8c 93       	st	X, r24
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <isIncreaseDutyCycleButtonClicked>:



static u8 isIncreaseDutyCycleButtonClicked(){
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(CONTROLLERS_PIN, INCREASE_BUTTON_BIT);
    13ae:	e0 e3       	ldi	r30, 0x30	; 48
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 70       	andi	r24, 0x04	; 4

}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <isDecreaseDutyCycleButtonClicked>:


static u8 isDecreaseDutyCycleButtonClicked(){
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(CONTROLLERS_PIN, DECREASE_BUTTON_BIT);
    13c4:	e0 e3       	ldi	r30, 0x30	; 48
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 74       	andi	r24, 0x40	; 64
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <isReDrawButtonClicked>:


static u8 isReDrawButtonClicked(){
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(REDRAW_BUTTON_PIN, REDRAW_BUTTON_BIT);
    13da:	e6 e3       	ldi	r30, 0x36	; 54
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 70       	andi	r24, 0x01	; 1
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <updateDisplayWithNewDutyCycle>:


//update duty cycle by percentage for example by 5%
static void updateDisplayWithNewDutyCycle(s8 direction){
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	61 97       	sbiw	r28, 0x11	; 17
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	89 8b       	std	Y+17, r24	; 0x11
	u16 newDuty = PWM_getDutyCycle() +(direction * (MAX_DUTY *(BOOST_STEP/100.0)));
    1406:	0e 94 4f 0b 	call	0x169e	; 0x169e <PWM_getDutyCycle>
    140a:	cc 01       	movw	r24, r24
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    1418:	7b 01       	movw	r14, r22
    141a:	8c 01       	movw	r16, r24
    141c:	89 89       	ldd	r24, Y+17	; 0x11
    141e:	99 27       	eor	r25, r25
    1420:	87 fd       	sbrc	r24, 7
    1422:	90 95       	com	r25
    1424:	a9 2f       	mov	r26, r25
    1426:	b9 2f       	mov	r27, r25
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	bc 01       	movw	r22, r24
    1436:	cd 01       	movw	r24, r26
    1438:	2d ec       	ldi	r18, 0xCD	; 205
    143a:	3c ec       	ldi	r19, 0xCC	; 204
    143c:	4c e4       	ldi	r20, 0x4C	; 76
    143e:	51 e4       	ldi	r21, 0x41	; 65
    1440:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9c 01       	movw	r18, r24
    144a:	ad 01       	movw	r20, r26
    144c:	c8 01       	movw	r24, r16
    144e:	b7 01       	movw	r22, r14
    1450:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	98 8b       	std	Y+16, r25	; 0x10
    1466:	8f 87       	std	Y+15, r24	; 0x0f

	PWM_SetDutyCycle(newDuty);
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <PWM_SetDutyCycle>

	PWM_createSignalsSeries(signals_series, LCD_COLS);
    146e:	80 ea       	ldi	r24, 0xA0	; 160
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	60 e1       	ldi	r22, 0x10	; 16
    1474:	0e 94 10 0b 	call	0x1620	; 0x1620 <PWM_createSignalsSeries>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e8       	ldi	r26, 0x80	; 128
    147e:	bf e3       	ldi	r27, 0x3F	; 63
    1480:	8b 87       	std	Y+11, r24	; 0x0b
    1482:	9c 87       	std	Y+12, r25	; 0x0c
    1484:	ad 87       	std	Y+13, r26	; 0x0d
    1486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	6b 85       	ldd	r22, Y+11	; 0x0b
    148a:	7c 85       	ldd	r23, Y+12	; 0x0c
    148c:	8d 85       	ldd	r24, Y+13	; 0x0d
    148e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	4a e7       	ldi	r20, 0x7A	; 122
    1496:	55 e4       	ldi	r21, 0x45	; 69
    1498:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8f 83       	std	Y+7, r24	; 0x07
    14a2:	98 87       	std	Y+8, r25	; 0x08
    14a4:	a9 87       	std	Y+9, r26	; 0x09
    14a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a8:	6f 81       	ldd	r22, Y+7	; 0x07
    14aa:	78 85       	ldd	r23, Y+8	; 0x08
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e8       	ldi	r20, 0x80	; 128
    14b6:	5f e3       	ldi	r21, 0x3F	; 63
    14b8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    14bc:	88 23       	and	r24, r24
    14be:	2c f4       	brge	.+10     	; 0x14ca <updateDisplayWithNewDutyCycle+0xe2>
		__ticks = 1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	3f c0       	rjmp	.+126    	; 0x1548 <updateDisplayWithNewDutyCycle+0x160>
	else if (__tmp > 65535)
    14ca:	6f 81       	ldd	r22, Y+7	; 0x07
    14cc:	78 85       	ldd	r23, Y+8	; 0x08
    14ce:	89 85       	ldd	r24, Y+9	; 0x09
    14d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	4c f5       	brge	.+82     	; 0x1534 <updateDisplayWithNewDutyCycle+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	0f c0       	rjmp	.+30     	; 0x152a <updateDisplayWithNewDutyCycle+0x142>
    150c:	80 e9       	ldi	r24, 0x90	; 144
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	9c 83       	std	Y+4, r25	; 0x04
    1512:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <updateDisplayWithNewDutyCycle+0x130>
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	69 f7       	brne	.-38     	; 0x150c <updateDisplayWithNewDutyCycle+0x124>
    1532:	14 c0       	rjmp	.+40     	; 0x155c <updateDisplayWithNewDutyCycle+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1534:	6f 81       	ldd	r22, Y+7	; 0x07
    1536:	78 85       	ldd	r23, Y+8	; 0x08
    1538:	89 85       	ldd	r24, Y+9	; 0x09
    153a:	9a 85       	ldd	r25, Y+10	; 0x0a
    153c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	9a 81       	ldd	r25, Y+2	; 0x02
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <updateDisplayWithNewDutyCycle+0x16c>
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	startDrawing();
    155c:	0e 94 bd 0a 	call	0x157a	; 0x157a <startDrawing>

}
    1560:	61 96       	adiw	r28, 0x11	; 17
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	ef 90       	pop	r14
    1578:	08 95       	ret

0000157a <startDrawing>:





static void startDrawing(){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	WaveDrawer_displayInfo();
    1582:	0e 94 2c 08 	call	0x1058	; 0x1058 <WaveDrawer_displayInfo>
	WaveDrawer_draw(signals_series);
    1586:	80 ea       	ldi	r24, 0xA0	; 160
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 9d 08 	call	0x113a	; 0x113a <WaveDrawer_draw>

}
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <PWM_init>:
 */


#include "PWM_Driver.h"

void PWM_init() {
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62

    // Set OC1A (PD5) as an output
    SET_BIT(OC_DIR, OC);
    159c:	a1 e3       	ldi	r26, 0x31	; 49
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e1 e3       	ldi	r30, 0x31	; 49
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 62       	ori	r24, 0x20	; 32
    15a8:	8c 93       	st	X, r24

    // Configure Timer1 for Fast PWM mode, 8-bit
    SET_BIT(TCCRA, WGM1);
    15aa:	af e4       	ldi	r26, 0x4F	; 79
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ef e4       	ldi	r30, 0x4F	; 79
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	8c 93       	st	X, r24
    SET_BIT(TCCRB, WGM2);
    15b8:	ae e4       	ldi	r26, 0x4E	; 78
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ee e4       	ldi	r30, 0x4E	; 78
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	88 60       	ori	r24, 0x08	; 8
    15c4:	8c 93       	st	X, r24
    SET_BIT(TCCRB, CS);
    15c6:	ae e4       	ldi	r26, 0x4E	; 78
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ee e4       	ldi	r30, 0x4E	; 78
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	81 60       	ori	r24, 0x01	; 1
    15d2:	8c 93       	st	X, r24


    // Set OC1A (PB1) to non-inverted PWM
    SET_BIT(TCCRA, COM);
    15d4:	af e4       	ldi	r26, 0x4F	; 79
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ef e4       	ldi	r30, 0x4F	; 79
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 68       	ori	r24, 0x80	; 128
    15e0:	8c 93       	st	X, r24
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(u8 duty_cycle) {
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	0f 92       	push	r0
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	89 83       	std	Y+1, r24	; 0x01

    if(duty_cycle < MIN_DUTY){
			duty_cycle = MIN_DUTY;
    }

    OCR = duty_cycle;
    15f4:	ea e4       	ldi	r30, 0x4A	; 74
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
}
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <PWM_isSignalHigh>:


u8 PWM_isSignalHigh(){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(OC_PIN, OC);
    1612:	e0 e3       	ldi	r30, 0x30	; 48
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	80 72       	andi	r24, 0x20	; 32
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <PWM_createSignalsSeries>:


void PWM_createSignalsSeries(u16* signals_series, u8 series_length){
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	28 97       	sbiw	r28, 0x08	; 8
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	9b 83       	std	Y+3, r25	; 0x03
    1636:	8a 83       	std	Y+2, r24	; 0x02
    1638:	6c 83       	std	Y+4, r22	; 0x04
	for(u8 i = 0; i<series_length; i++){
    163a:	19 82       	std	Y+1, r1	; 0x01
    163c:	23 c0       	rjmp	.+70     	; 0x1684 <PWM_createSignalsSeries+0x64>
		signals_series[i] = (PWM_isSignalHigh()? HIGH : LOW);
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9c 01       	movw	r18, r24
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	ac 01       	movw	r20, r24
    1650:	42 0f       	add	r20, r18
    1652:	53 1f       	adc	r21, r19
    1654:	58 87       	std	Y+8, r21	; 0x08
    1656:	4f 83       	std	Y+7, r20	; 0x07
    1658:	0e 94 05 0b 	call	0x160a	; 0x160a <PWM_isSignalHigh>
    165c:	88 23       	and	r24, r24
    165e:	29 f0       	breq	.+10     	; 0x166a <PWM_createSignalsSeries+0x4a>
    1660:	87 e5       	ldi	r24, 0x57	; 87
    1662:	94 e0       	ldi	r25, 0x04	; 4
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <PWM_createSignalsSeries+0x52>
    166a:	e8 ee       	ldi	r30, 0xE8	; 232
    166c:	f3 e0       	ldi	r31, 0x03	; 3
    166e:	fe 83       	std	Y+6, r31	; 0x06
    1670:	ed 83       	std	Y+5, r30	; 0x05
    1672:	4d 81       	ldd	r20, Y+5	; 0x05
    1674:	5e 81       	ldd	r21, Y+6	; 0x06
    1676:	ef 81       	ldd	r30, Y+7	; 0x07
    1678:	f8 85       	ldd	r31, Y+8	; 0x08
    167a:	51 83       	std	Z+1, r21	; 0x01
    167c:	40 83       	st	Z, r20
	return GET_BIT(OC_PIN, OC);
}


void PWM_createSignalsSeries(u16* signals_series, u8 series_length){
	for(u8 i = 0; i<series_length; i++){
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	8f 5f       	subi	r24, 0xFF	; 255
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	99 81       	ldd	r25, Y+1	; 0x01
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	98 17       	cp	r25, r24
    168a:	c8 f2       	brcs	.-78     	; 0x163e <PWM_createSignalsSeries+0x1e>
		signals_series[i] = (PWM_isSignalHigh()? HIGH : LOW);
	}
}
    168c:	28 96       	adiw	r28, 0x08	; 8
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <PWM_getDutyCycle>:


u16 PWM_getDutyCycle(){
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	return OCR;
    16a6:	ea e4       	ldi	r30, 0x4A	; 74
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <PWM_get_frequency>:

f32 PWM_get_frequency(u16 prescaler) {
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <PWM_get_frequency+0x6>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	9a 83       	std	Y+2, r25	; 0x02
    16c0:	89 83       	std	Y+1, r24	; 0x01
	 return ((double)F_CPU / (prescaler * 256.0)) / 1000.0;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	9a 81       	ldd	r25, Y+2	; 0x02
    16c6:	cc 01       	movw	r24, r24
    16c8:	a0 e0       	ldi	r26, 0x00	; 0
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	53 e4       	ldi	r21, 0x43	; 67
    16e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9c 01       	movw	r18, r24
    16ee:	ad 01       	movw	r20, r26
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	74 e2       	ldi	r23, 0x24	; 36
    16f4:	84 e7       	ldi	r24, 0x74	; 116
    16f6:	9b e4       	ldi	r25, 0x4B	; 75
    16f8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a e7       	ldi	r20, 0x7A	; 122
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
}
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <PWM_get_time>:

f32 PWM_get_time(u16 prescaler) {
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <PWM_get_time+0x6>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
    return 1.0 / PWM_get_frequency(prescaler);
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <PWM_get_frequency>
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	80 e8       	ldi	r24, 0x80	; 128
    1742:	9f e3       	ldi	r25, 0x3F	; 63
    1744:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
}
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <LCD_init>:


#include "LCD_Driver.h"


void LCD_init() {
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	2e 97       	sbiw	r28, 0x0e	; 14
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
  // // Set PA4 to PA7 as output for data bits
  SET_REG(LCD_DATA_DDR, LCD_DATA_MASK);
    176e:	aa e3       	ldi	r26, 0x3A	; 58
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ea e3       	ldi	r30, 0x3A	; 58
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 6f       	ori	r24, 0xF0	; 240
    177a:	8c 93       	st	X, r24

  SET_BIT(LCD_CONFIG_DDR, LCD_RS);
    177c:	a7 e3       	ldi	r26, 0x37	; 55
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e7 e3       	ldi	r30, 0x37	; 55
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	8c 93       	st	X, r24
  SET_BIT(LCD_CONFIG_DDR, LCD_Rw);
    178a:	a7 e3       	ldi	r26, 0x37	; 55
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e7 e3       	ldi	r30, 0x37	; 55
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	84 60       	ori	r24, 0x04	; 4
    1796:	8c 93       	st	X, r24
  SET_BIT(LCD_CONFIG_DDR, LCD_E);
    1798:	a7 e3       	ldi	r26, 0x37	; 55
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e7 e3       	ldi	r30, 0x37	; 55
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	88 60       	ori	r24, 0x08	; 8
    17a4:	8c 93       	st	X, r24
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	a0 e7       	ldi	r26, 0x70	; 112
    17ac:	b1 e4       	ldi	r27, 0x41	; 65
    17ae:	8b 87       	std	Y+11, r24	; 0x0b
    17b0:	9c 87       	std	Y+12, r25	; 0x0c
    17b2:	ad 87       	std	Y+13, r26	; 0x0d
    17b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    17bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	55 e4       	ldi	r21, 0x45	; 69
    17c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8f 83       	std	Y+7, r24	; 0x07
    17d0:	98 87       	std	Y+8, r25	; 0x08
    17d2:	a9 87       	std	Y+9, r26	; 0x09
    17d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <LCD_init+0x9e>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	3f c0       	rjmp	.+126    	; 0x1876 <LCD_init+0x11c>
	else if (__tmp > 65535)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	3f ef       	ldi	r19, 0xFF	; 255
    1804:	4f e7       	ldi	r20, 0x7F	; 127
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    180c:	18 16       	cp	r1, r24
    180e:	4c f5       	brge	.+82     	; 0x1862 <LCD_init+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1810:	6b 85       	ldd	r22, Y+11	; 0x0b
    1812:	7c 85       	ldd	r23, Y+12	; 0x0c
    1814:	8d 85       	ldd	r24, Y+13	; 0x0d
    1816:	9e 85       	ldd	r25, Y+14	; 0x0e
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <LCD_init+0xfe>
    183a:	80 e9       	ldi	r24, 0x90	; 144
    183c:	91 e0       	ldi	r25, 0x01	; 1
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_init+0xec>
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	69 f7       	brne	.-38     	; 0x183a <LCD_init+0xe0>
    1860:	14 c0       	rjmp	.+40     	; 0x188a <LCD_init+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_init+0x128>
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01


  // Initialize LCD in 4-bit mode
  _delay_ms(POWER_DELAY);             // Wait for power-up
  LCD_write_command(0x02);
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
  LCD_write_command(0x28); // 4-bit, 2-line mode
    1890:	88 e2       	ldi	r24, 0x28	; 40
    1892:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
  LCD_write_command(0x0C); // Display on, cursor off
    1896:	8c e0       	ldi	r24, 0x0C	; 12
    1898:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
  LCD_clearScreen(); // Clear display
    189c:	0e 94 0f 11 	call	0x221e	; 0x221e <LCD_clearScreen>
  LCD_write_command(0x06); // Entry mode: increment cursor, no shift
    18a0:	86 e0       	ldi	r24, 0x06	; 6
    18a2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
}
    18a6:	2e 96       	adiw	r28, 0x0e	; 14
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <LCD_write_command>:



void LCD_write_command(u8 command) {
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	69 97       	sbiw	r28, 0x19	; 25
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	89 8f       	std	Y+25, r24	; 0x19


	prepareWriting(COMMAND);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <prepareWriting>
	write(command);
    18d4:	89 8d       	ldd	r24, Y+25	; 0x19
    18d6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <write>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e8       	ldi	r26, 0x80	; 128
    18e0:	bf e3       	ldi	r27, 0x3F	; 63
    18e2:	8d 8b       	std	Y+21, r24	; 0x15
    18e4:	9e 8b       	std	Y+22, r25	; 0x16
    18e6:	af 8b       	std	Y+23, r26	; 0x17
    18e8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18ea:	6d 89       	ldd	r22, Y+21	; 0x15
    18ec:	7e 89       	ldd	r23, Y+22	; 0x16
    18ee:	8f 89       	ldd	r24, Y+23	; 0x17
    18f0:	98 8d       	ldd	r25, Y+24	; 0x18
    18f2:	2b ea       	ldi	r18, 0xAB	; 171
    18f4:	3a ea       	ldi	r19, 0xAA	; 170
    18f6:	4a ea       	ldi	r20, 0xAA	; 170
    18f8:	50 e4       	ldi	r21, 0x40	; 64
    18fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	89 8b       	std	Y+17, r24	; 0x11
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	ab 8b       	std	Y+19, r26	; 0x13
    1908:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    190a:	69 89       	ldd	r22, Y+17	; 0x11
    190c:	7a 89       	ldd	r23, Y+18	; 0x12
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	1c f4       	brge	.+6      	; 0x1928 <LCD_write_command+0x70>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	88 8b       	std	Y+16, r24	; 0x10
    1926:	91 c0       	rjmp	.+290    	; 0x1a4a <LCD_write_command+0x192>
	else if (__tmp > 255)
    1928:	69 89       	ldd	r22, Y+17	; 0x11
    192a:	7a 89       	ldd	r23, Y+18	; 0x12
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	53 e4       	ldi	r21, 0x43	; 67
    1938:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	0c f0       	brlt	.+2      	; 0x1942 <LCD_write_command+0x8a>
    1940:	7b c0       	rjmp	.+246    	; 0x1a38 <LCD_write_command+0x180>
	{
		_delay_ms(__us / 1000.0);
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a e7       	ldi	r20, 0x7A	; 122
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8c 87       	std	Y+12, r24	; 0x0c
    195c:	9d 87       	std	Y+13, r25	; 0x0d
    195e:	ae 87       	std	Y+14, r26	; 0x0e
    1960:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1962:	6c 85       	ldd	r22, Y+12	; 0x0c
    1964:	7d 85       	ldd	r23, Y+13	; 0x0d
    1966:	8e 85       	ldd	r24, Y+14	; 0x0e
    1968:	9f 85       	ldd	r25, Y+15	; 0x0f
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	4a e7       	ldi	r20, 0x7A	; 122
    1970:	55 e4       	ldi	r21, 0x45	; 69
    1972:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	88 87       	std	Y+8, r24	; 0x08
    197c:	99 87       	std	Y+9, r25	; 0x09
    197e:	aa 87       	std	Y+10, r26	; 0x0a
    1980:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1982:	68 85       	ldd	r22, Y+8	; 0x08
    1984:	79 85       	ldd	r23, Y+9	; 0x09
    1986:	8a 85       	ldd	r24, Y+10	; 0x0a
    1988:	9b 85       	ldd	r25, Y+11	; 0x0b
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	5f e3       	ldi	r21, 0x3F	; 63
    1992:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1996:	88 23       	and	r24, r24
    1998:	2c f4       	brge	.+10     	; 0x19a4 <LCD_write_command+0xec>
		__ticks = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9f 83       	std	Y+7, r25	; 0x07
    19a0:	8e 83       	std	Y+6, r24	; 0x06
    19a2:	3f c0       	rjmp	.+126    	; 0x1a22 <LCD_write_command+0x16a>
	else if (__tmp > 65535)
    19a4:	68 85       	ldd	r22, Y+8	; 0x08
    19a6:	79 85       	ldd	r23, Y+9	; 0x09
    19a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	4c f5       	brge	.+82     	; 0x1a0e <LCD_write_command+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    19be:	7d 85       	ldd	r23, Y+13	; 0x0d
    19c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e2       	ldi	r20, 0x20	; 32
    19ca:	51 e4       	ldi	r21, 0x41	; 65
    19cc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9f 83       	std	Y+7, r25	; 0x07
    19e2:	8e 83       	std	Y+6, r24	; 0x06
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <LCD_write_command+0x14c>
    19e6:	80 e9       	ldi	r24, 0x90	; 144
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	9d 83       	std	Y+5, r25	; 0x05
    19ec:	8c 83       	std	Y+4, r24	; 0x04
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_write_command+0x13a>
    19f6:	9d 83       	std	Y+5, r25	; 0x05
    19f8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	8e 81       	ldd	r24, Y+6	; 0x06
    19fc:	9f 81       	ldd	r25, Y+7	; 0x07
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9f 83       	std	Y+7, r25	; 0x07
    1a02:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a04:	8e 81       	ldd	r24, Y+6	; 0x06
    1a06:	9f 81       	ldd	r25, Y+7	; 0x07
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <LCD_write_command+0x12e>
    1a0c:	24 c0       	rjmp	.+72     	; 0x1a56 <LCD_write_command+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0e:	68 85       	ldd	r22, Y+8	; 0x08
    1a10:	79 85       	ldd	r23, Y+9	; 0x09
    1a12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a16:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9f 83       	std	Y+7, r25	; 0x07
    1a20:	8e 83       	std	Y+6, r24	; 0x06
    1a22:	8e 81       	ldd	r24, Y+6	; 0x06
    1a24:	9f 81       	ldd	r25, Y+7	; 0x07
    1a26:	9b 83       	std	Y+3, r25	; 0x03
    1a28:	8a 83       	std	Y+2, r24	; 0x02
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_write_command+0x176>
    1a32:	9b 83       	std	Y+3, r25	; 0x03
    1a34:	8a 83       	std	Y+2, r24	; 0x02
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <LCD_write_command+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a38:	69 89       	ldd	r22, Y+17	; 0x11
    1a3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	88 8b       	std	Y+16, r24	; 0x10
    1a4a:	88 89       	ldd	r24, Y+16	; 0x10
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	8a 95       	dec	r24
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_write_command+0x198>
    1a54:	89 83       	std	Y+1, r24	; 0x01
  // Wait for the command to complete
	 _delay_us(CMD_DELAY);
}
    1a56:	69 96       	adiw	r28, 0x19	; 25
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <LCD_write_char>:



void LCD_write_char(u8 char0) {
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	69 97       	sbiw	r28, 0x19	; 25
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	89 8f       	std	Y+25, r24	; 0x19

	prepareWriting(DATA);
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <prepareWriting>
	write(char0);
    1a84:	89 8d       	ldd	r24, Y+25	; 0x19
    1a86:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <write>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	8d 8b       	std	Y+21, r24	; 0x15
    1a94:	9e 8b       	std	Y+22, r25	; 0x16
    1a96:	af 8b       	std	Y+23, r26	; 0x17
    1a98:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa2:	2b ea       	ldi	r18, 0xAB	; 171
    1aa4:	3a ea       	ldi	r19, 0xAA	; 170
    1aa6:	4a ea       	ldi	r20, 0xAA	; 170
    1aa8:	50 e4       	ldi	r21, 0x40	; 64
    1aaa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	89 8b       	std	Y+17, r24	; 0x11
    1ab4:	9a 8b       	std	Y+18, r25	; 0x12
    1ab6:	ab 8b       	std	Y+19, r26	; 0x13
    1ab8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1aba:	69 89       	ldd	r22, Y+17	; 0x11
    1abc:	7a 89       	ldd	r23, Y+18	; 0x12
    1abe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	1c f4       	brge	.+6      	; 0x1ad8 <LCD_write_char+0x70>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	88 8b       	std	Y+16, r24	; 0x10
    1ad6:	91 c0       	rjmp	.+290    	; 0x1bfa <LCD_write_char+0x192>
	else if (__tmp > 255)
    1ad8:	69 89       	ldd	r22, Y+17	; 0x11
    1ada:	7a 89       	ldd	r23, Y+18	; 0x12
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	53 e4       	ldi	r21, 0x43	; 67
    1ae8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	0c f0       	brlt	.+2      	; 0x1af2 <LCD_write_char+0x8a>
    1af0:	7b c0       	rjmp	.+246    	; 0x1be8 <LCD_write_char+0x180>
	{
		_delay_ms(__us / 1000.0);
    1af2:	6d 89       	ldd	r22, Y+21	; 0x15
    1af4:	7e 89       	ldd	r23, Y+22	; 0x16
    1af6:	8f 89       	ldd	r24, Y+23	; 0x17
    1af8:	98 8d       	ldd	r25, Y+24	; 0x18
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a e7       	ldi	r20, 0x7A	; 122
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8c 87       	std	Y+12, r24	; 0x0c
    1b0c:	9d 87       	std	Y+13, r25	; 0x0d
    1b0e:	ae 87       	std	Y+14, r26	; 0x0e
    1b10:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b14:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	55 e4       	ldi	r21, 0x45	; 69
    1b22:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	88 87       	std	Y+8, r24	; 0x08
    1b2c:	99 87       	std	Y+9, r25	; 0x09
    1b2e:	aa 87       	std	Y+10, r26	; 0x0a
    1b30:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b32:	68 85       	ldd	r22, Y+8	; 0x08
    1b34:	79 85       	ldd	r23, Y+9	; 0x09
    1b36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <LCD_write_char+0xec>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9f 83       	std	Y+7, r25	; 0x07
    1b50:	8e 83       	std	Y+6, r24	; 0x06
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <LCD_write_char+0x16a>
	else if (__tmp > 65535)
    1b54:	68 85       	ldd	r22, Y+8	; 0x08
    1b56:	79 85       	ldd	r23, Y+9	; 0x09
    1b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <LCD_write_char+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b70:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b72:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9f 83       	std	Y+7, r25	; 0x07
    1b92:	8e 83       	std	Y+6, r24	; 0x06
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <LCD_write_char+0x14c>
    1b96:	80 e9       	ldi	r24, 0x90	; 144
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	9d 83       	std	Y+5, r25	; 0x05
    1b9c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_write_char+0x13a>
    1ba6:	9d 83       	std	Y+5, r25	; 0x05
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9f 83       	std	Y+7, r25	; 0x07
    1bb2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <LCD_write_char+0x12e>
    1bbc:	24 c0       	rjmp	.+72     	; 0x1c06 <LCD_write_char+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	68 85       	ldd	r22, Y+8	; 0x08
    1bc0:	79 85       	ldd	r23, Y+9	; 0x09
    1bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9f 83       	std	Y+7, r25	; 0x07
    1bd0:	8e 83       	std	Y+6, r24	; 0x06
    1bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd6:	9b 83       	std	Y+3, r25	; 0x03
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_write_char+0x176>
    1be2:	9b 83       	std	Y+3, r25	; 0x03
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <LCD_write_char+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1be8:	69 89       	ldd	r22, Y+17	; 0x11
    1bea:	7a 89       	ldd	r23, Y+18	; 0x12
    1bec:	8b 89       	ldd	r24, Y+19	; 0x13
    1bee:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	88 8b       	std	Y+16, r24	; 0x10
    1bfa:	88 89       	ldd	r24, Y+16	; 0x10
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	8a 95       	dec	r24
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_write_char+0x198>
    1c04:	89 83       	std	Y+1, r24	; 0x01
  // Wait for the data to be written
	 _delay_us(CMD_DELAY);
}
    1c06:	69 96       	adiw	r28, 0x19	; 25
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <LCD_write_string>:


void LCD_write_string(const u8* str) {
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <LCD_write_string+0x6>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	0a c0       	rjmp	.+20     	; 0x1c3c <LCD_write_string+0x24>
    while (*str) {
        LCD_write_char(*str);
    1c28:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2c:	80 81       	ld	r24, Z
    1c2e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
        str++;
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	9a 81       	ldd	r25, Y+2	; 0x02
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	9a 83       	std	Y+2, r25	; 0x02
    1c3a:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(CMD_DELAY);
}


void LCD_write_string(const u8* str) {
    while (*str) {
    1c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	89 f7       	brne	.-30     	; 0x1c28 <LCD_write_string+0x10>
        LCD_write_char(*str);
        str++;
    }
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <LCD_write_number>:





void LCD_write_number(u16 number) {
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	2a 97       	sbiw	r28, 0x0a	; 10
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	9a 87       	std	Y+10, r25	; 0x0a
    1c66:	89 87       	std	Y+9, r24	; 0x09
    // If the number is zero, send '0' to the LCD
    if (number == 0) {
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	21 f4       	brne	.+8      	; 0x1c78 <LCD_write_number+0x28>
    	LCD_write_char('0');
    1c70:	80 e3       	ldi	r24, 0x30	; 48
    1c72:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
    1c76:	26 c0       	rjmp	.+76     	; 0x1cc4 <LCD_write_number+0x74>
        return;
    }

    // Convert the number to a string
    char buffer[6]; // Assuming a 16-bit number can be up to 5 digits
    itoa(number, buffer, 10); // Convert number to ASCII string in base 10
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	9e 01       	movw	r18, r28
    1c7e:	2d 5f       	subi	r18, 0xFD	; 253
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	b9 01       	movw	r22, r18
    1c84:	4a e0       	ldi	r20, 0x0A	; 10
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <itoa>

    // Send each character of the string to the LCD
    for (int i = 0; buffer[i] != '\0'; i++) {
    1c8c:	1a 82       	std	Y+2, r1	; 0x02
    1c8e:	19 82       	std	Y+1, r1	; 0x01
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_write_number+0x60>
    	LCD_write_char(buffer[i]);
    1c92:	29 81       	ldd	r18, Y+1	; 0x01
    1c94:	3a 81       	ldd	r19, Y+2	; 0x02
    1c96:	ce 01       	movw	r24, r28
    1c98:	03 96       	adiw	r24, 0x03	; 3
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	e2 0f       	add	r30, r18
    1c9e:	f3 1f       	adc	r31, r19
    1ca0:	80 81       	ld	r24, Z
    1ca2:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
    // Convert the number to a string
    char buffer[6]; // Assuming a 16-bit number can be up to 5 digits
    itoa(number, buffer, 10); // Convert number to ASCII string in base 10

    // Send each character of the string to the LCD
    for (int i = 0; buffer[i] != '\0'; i++) {
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	29 81       	ldd	r18, Y+1	; 0x01
    1cb2:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	03 96       	adiw	r24, 0x03	; 3
    1cb8:	fc 01       	movw	r30, r24
    1cba:	e2 0f       	add	r30, r18
    1cbc:	f3 1f       	adc	r31, r19
    1cbe:	80 81       	ld	r24, Z
    1cc0:	88 23       	and	r24, r24
    1cc2:	39 f7       	brne	.-50     	; 0x1c92 <LCD_write_number+0x42>
    	LCD_write_char(buffer[i]);
    }
}
    1cc4:	2a 96       	adiw	r28, 0x0a	; 10
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <LCD_write_decimal_number>:


void LCD_write_decimal_number(f64 number, u16 decimalPlaces){
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	68 97       	sbiw	r28, 0x18	; 24
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	6b 8b       	std	Y+19, r22	; 0x13
    1cf0:	7c 8b       	std	Y+20, r23	; 0x14
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	58 8f       	std	Y+24, r21	; 0x18
    1cf8:	4f 8b       	std	Y+23, r20	; 0x17
    // Convert the double to a string with the desired number of decimal places
    char buffer[16]; // Adjust the size as needed
    dtostrf(number, 0, decimalPlaces, buffer); // Convert to string
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	ad 89       	ldd	r26, Y+21	; 0x15
    1d00:	be 89       	ldd	r27, Y+22	; 0x16
    1d02:	2f 89       	ldd	r18, Y+23	; 0x17
    1d04:	38 8d       	ldd	r19, Y+24	; 0x18
    1d06:	fe 01       	movw	r30, r28
    1d08:	33 96       	adiw	r30, 0x03	; 3
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	8f 01       	movw	r16, r30
    1d14:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <dtostrf>

    // Send each character of the string to the LCD
    for (int i = 0; buffer[i] != '\0'; i++) {
    1d18:	1a 82       	std	Y+2, r1	; 0x02
    1d1a:	19 82       	std	Y+1, r1	; 0x01
    1d1c:	1d c0       	rjmp	.+58     	; 0x1d58 <LCD_write_decimal_number+0x82>

    	if(i == 0 && buffer[i] == '0'){
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	51 f4       	brne	.+20     	; 0x1d3a <LCD_write_decimal_number+0x64>
    1d26:	29 81       	ldd	r18, Y+1	; 0x01
    1d28:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	03 96       	adiw	r24, 0x03	; 3
    1d2e:	fc 01       	movw	r30, r24
    1d30:	e2 0f       	add	r30, r18
    1d32:	f3 1f       	adc	r31, r19
    1d34:	80 81       	ld	r24, Z
    1d36:	80 33       	cpi	r24, 0x30	; 48
    1d38:	51 f0       	breq	.+20     	; 0x1d4e <LCD_write_decimal_number+0x78>
    	    continue;
    	}

    	LCD_write_char(buffer[i]);
    1d3a:	29 81       	ldd	r18, Y+1	; 0x01
    1d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d3e:	ce 01       	movw	r24, r28
    1d40:	03 96       	adiw	r24, 0x03	; 3
    1d42:	fc 01       	movw	r30, r24
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	80 81       	ld	r24, Z
    1d4a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
    // Convert the double to a string with the desired number of decimal places
    char buffer[16]; // Adjust the size as needed
    dtostrf(number, 0, decimalPlaces, buffer); // Convert to string

    // Send each character of the string to the LCD
    for (int i = 0; buffer[i] != '\0'; i++) {
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	29 81       	ldd	r18, Y+1	; 0x01
    1d5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	03 96       	adiw	r24, 0x03	; 3
    1d60:	fc 01       	movw	r30, r24
    1d62:	e2 0f       	add	r30, r18
    1d64:	f3 1f       	adc	r31, r19
    1d66:	80 81       	ld	r24, Z
    1d68:	88 23       	and	r24, r24
    1d6a:	c9 f6       	brne	.-78     	; 0x1d1e <LCD_write_decimal_number+0x48>

    	LCD_write_char(buffer[i]);


    }
}
    1d6c:	68 96       	adiw	r28, 0x18	; 24
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	08 95       	ret

00001d82 <LCD_set_cursor>:


void LCD_set_cursor(u8 row, u8 col) {
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <LCD_set_cursor+0x6>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
    1d90:	6b 83       	std	Y+3, r22	; 0x03
    // Set the cursor position on the LCD
	uint8_t cursorAddress;
	    if (row == 0) {
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	88 23       	and	r24, r24
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <LCD_set_cursor+0x1e>
	        cursorAddress = 0x80 + col; // First row
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	80 58       	subi	r24, 0x80	; 128
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <LCD_set_cursor+0x2a>
	    } else if (row == 1) {
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	31 f4       	brne	.+12     	; 0x1db2 <LCD_set_cursor+0x30>
	        cursorAddress = 0xC0 + col; // Second row
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	80 54       	subi	r24, 0x40	; 64
    1daa:	89 83       	std	Y+1, r24	; 0x01
	    } else {
	        return;  // Invalid row
	    }
	    // Set the cursor address command
	    LCD_write_command(cursorAddress);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <LCD_create_custom_char>:




void LCD_create_custom_char(u16 char_num, const u8 *char_pattern) {
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <LCD_create_custom_char+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LCD_create_custom_char+0x8>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <LCD_create_custom_char+0xa>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    1dd0:	7e 83       	std	Y+6, r23	; 0x06
    1dd2:	6d 83       	std	Y+5, r22	; 0x05
    // Set CGRAM address for the custom character
	LCD_write_command(0x40 | (char_num << 3));
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	88 0f       	add	r24, r24
    1dd8:	88 0f       	add	r24, r24
    1dda:	88 0f       	add	r24, r24
    1ddc:	80 64       	ori	r24, 0x40	; 64
    1dde:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>

    // Send the custom character pattern
    for (int i = 0; i < 8; i++) {
    1de2:	1a 82       	std	Y+2, r1	; 0x02
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_create_custom_char+0x48>
        LCD_write_char(char_pattern[i]);
    1de8:	29 81       	ldd	r18, Y+1	; 0x01
    1dea:	3a 81       	ldd	r19, Y+2	; 0x02
    1dec:	8d 81       	ldd	r24, Y+5	; 0x05
    1dee:	9e 81       	ldd	r25, Y+6	; 0x06
    1df0:	fc 01       	movw	r30, r24
    1df2:	e2 0f       	add	r30, r18
    1df4:	f3 1f       	adc	r31, r19
    1df6:	80 81       	ld	r24, Z
    1df8:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
void LCD_create_custom_char(u16 char_num, const u8 *char_pattern) {
    // Set CGRAM address for the custom character
	LCD_write_command(0x40 | (char_num << 3));

    // Send the custom character pattern
    for (int i = 0; i < 8; i++) {
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	88 30       	cpi	r24, 0x08	; 8
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	64 f3       	brlt	.-40     	; 0x1de8 <LCD_create_custom_char+0x2a>
        LCD_write_char(char_pattern[i]);
    }

    // Return to DDRAM address
    LCD_write_command(0x80);
    1e10:	80 e8       	ldi	r24, 0x80	; 128
    1e12:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
}
    1e16:	26 96       	adiw	r28, 0x06	; 6
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LCD_write_custom_char>:

void LCD_write_custom_char(u16 char_num) {
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <LCD_write_custom_char+0x6>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    // Display the custom character
    LCD_write_char(char_num);
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <LCD_write_char>
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <prepareWriting>:





void prepareWriting(u8 mode){
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01

	if(mode == DATA){
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	41 f4       	brne	.+16     	; 0x1e68 <prepareWriting+0x22>
		SET_BIT(LCD_CONFIG_PORT, LCD_RS);
    1e58:	a8 e3       	ldi	r26, 0x38	; 56
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e3       	ldi	r30, 0x38	; 56
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	82 60       	ori	r24, 0x02	; 2
    1e64:	8c 93       	st	X, r24
    1e66:	07 c0       	rjmp	.+14     	; 0x1e76 <prepareWriting+0x30>
	}else{
		CLR_BIT(LCD_CONFIG_PORT, LCD_RS);
    1e68:	a8 e3       	ldi	r26, 0x38	; 56
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e8 e3       	ldi	r30, 0x38	; 56
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8d 7f       	andi	r24, 0xFD	; 253
    1e74:	8c 93       	st	X, r24
	}

   // Set R/W to 0 for write mode
	CLR_BIT(LCD_CONFIG_PORT, LCD_Rw);
    1e76:	a8 e3       	ldi	r26, 0x38	; 56
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e8 e3       	ldi	r30, 0x38	; 56
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8b 7f       	andi	r24, 0xFB	; 251
    1e82:	8c 93       	st	X, r24
}
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <write>:





void write(u8 data){
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	e1 97       	sbiw	r28, 0x31	; 49
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	89 ab       	std	Y+49, r24	; 0x31

	   //enable writing
	   SET_BIT(LCD_CONFIG_PORT, LCD_E);
    1ea2:	a8 e3       	ldi	r26, 0x38	; 56
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e8 e3       	ldi	r30, 0x38	; 56
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 60       	ori	r24, 0x08	; 8
    1eae:	8c 93       	st	X, r24

	  //send the first part of data
	  LCD_DATA_PORT = (LCD_DATA_PORT & ~LCD_DATA_MASK) | (data & LCD_DATA_MASK);
    1eb0:	ab e3       	ldi	r26, 0x3B	; 59
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	eb e3       	ldi	r30, 0x3B	; 59
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	98 2f       	mov	r25, r24
    1ebc:	9f 70       	andi	r25, 0x0F	; 15
    1ebe:	89 a9       	ldd	r24, Y+49	; 0x31
    1ec0:	80 7f       	andi	r24, 0xF0	; 240
    1ec2:	89 2b       	or	r24, r25
    1ec4:	8c 93       	st	X, r24
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8d a7       	std	Y+45, r24	; 0x2d
    1ed0:	9e a7       	std	Y+46, r25	; 0x2e
    1ed2:	af a7       	std	Y+47, r26	; 0x2f
    1ed4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ed6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ed8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	2b ea       	ldi	r18, 0xAB	; 171
    1ee0:	3a ea       	ldi	r19, 0xAA	; 170
    1ee2:	4a ea       	ldi	r20, 0xAA	; 170
    1ee4:	50 e4       	ldi	r21, 0x40	; 64
    1ee6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	89 a7       	std	Y+41, r24	; 0x29
    1ef0:	9a a7       	std	Y+42, r25	; 0x2a
    1ef2:	ab a7       	std	Y+43, r26	; 0x2b
    1ef4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ef6:	69 a5       	ldd	r22, Y+41	; 0x29
    1ef8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1efa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1efc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	1c f4       	brge	.+6      	; 0x1f14 <write+0x88>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	88 a7       	std	Y+40, r24	; 0x28
    1f12:	91 c0       	rjmp	.+290    	; 0x2036 <write+0x1aa>
	else if (__tmp > 255)
    1f14:	69 a5       	ldd	r22, Y+41	; 0x29
    1f16:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f18:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4f e7       	ldi	r20, 0x7F	; 127
    1f22:	53 e4       	ldi	r21, 0x43	; 67
    1f24:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	0c f0       	brlt	.+2      	; 0x1f2e <write+0xa2>
    1f2c:	7b c0       	rjmp	.+246    	; 0x2024 <write+0x198>
	{
		_delay_ms(__us / 1000.0);
    1f2e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f30:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f34:	98 a9       	ldd	r25, Y+48	; 0x30
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a e7       	ldi	r20, 0x7A	; 122
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8c a3       	std	Y+36, r24	; 0x24
    1f48:	9d a3       	std	Y+37, r25	; 0x25
    1f4a:	ae a3       	std	Y+38, r26	; 0x26
    1f4c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6c a1       	ldd	r22, Y+36	; 0x24
    1f50:	7d a1       	ldd	r23, Y+37	; 0x25
    1f52:	8e a1       	ldd	r24, Y+38	; 0x26
    1f54:	9f a1       	ldd	r25, Y+39	; 0x27
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a e7       	ldi	r20, 0x7A	; 122
    1f5c:	55 e4       	ldi	r21, 0x45	; 69
    1f5e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	88 a3       	std	Y+32, r24	; 0x20
    1f68:	99 a3       	std	Y+33, r25	; 0x21
    1f6a:	aa a3       	std	Y+34, r26	; 0x22
    1f6c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f6e:	68 a1       	ldd	r22, Y+32	; 0x20
    1f70:	79 a1       	ldd	r23, Y+33	; 0x21
    1f72:	8a a1       	ldd	r24, Y+34	; 0x22
    1f74:	9b a1       	ldd	r25, Y+35	; 0x23
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <write+0x104>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <write+0x182>
	else if (__tmp > 65535)
    1f90:	68 a1       	ldd	r22, Y+32	; 0x20
    1f92:	79 a1       	ldd	r23, Y+33	; 0x21
    1f94:	8a a1       	ldd	r24, Y+34	; 0x22
    1f96:	9b a1       	ldd	r25, Y+35	; 0x23
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <write+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6c a1       	ldd	r22, Y+36	; 0x24
    1faa:	7d a1       	ldd	r23, Y+37	; 0x25
    1fac:	8e a1       	ldd	r24, Y+38	; 0x26
    1fae:	9f a1       	ldd	r25, Y+39	; 0x27
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fce:	8e 8f       	std	Y+30, r24	; 0x1e
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <write+0x164>
    1fd2:	80 e9       	ldi	r24, 0x90	; 144
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	9d 8f       	std	Y+29, r25	; 0x1d
    1fd8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fdc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <write+0x152>
    1fe2:	9d 8f       	std	Y+29, r25	; 0x1d
    1fe4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9f 8f       	std	Y+31, r25	; 0x1f
    1fee:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ff2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <write+0x146>
    1ff8:	24 c0       	rjmp	.+72     	; 0x2042 <write+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	68 a1       	ldd	r22, Y+32	; 0x20
    1ffc:	79 a1       	ldd	r23, Y+33	; 0x21
    1ffe:	8a a1       	ldd	r24, Y+34	; 0x22
    2000:	9b a1       	ldd	r25, Y+35	; 0x23
    2002:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9f 8f       	std	Y+31, r25	; 0x1f
    200c:	8e 8f       	std	Y+30, r24	; 0x1e
    200e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2010:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2012:	9b 8f       	std	Y+27, r25	; 0x1b
    2014:	8a 8f       	std	Y+26, r24	; 0x1a
    2016:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2018:	9b 8d       	ldd	r25, Y+27	; 0x1b
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <write+0x18e>
    201e:	9b 8f       	std	Y+27, r25	; 0x1b
    2020:	8a 8f       	std	Y+26, r24	; 0x1a
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <write+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2024:	69 a5       	ldd	r22, Y+41	; 0x29
    2026:	7a a5       	ldd	r23, Y+42	; 0x2a
    2028:	8b a5       	ldd	r24, Y+43	; 0x2b
    202a:	9c a5       	ldd	r25, Y+44	; 0x2c
    202c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	88 a7       	std	Y+40, r24	; 0x28
    2036:	88 a5       	ldd	r24, Y+40	; 0x28
    2038:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    203a:	89 8d       	ldd	r24, Y+25	; 0x19
    203c:	8a 95       	dec	r24
    203e:	f1 f7       	brne	.-4      	; 0x203c <write+0x1b0>
    2040:	89 8f       	std	Y+25, r24	; 0x19
	  _delay_us(1);

	  //disable writing
	  CLR_BIT(LCD_CONFIG_PORT, LCD_E);
    2042:	a8 e3       	ldi	r26, 0x38	; 56
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e8 e3       	ldi	r30, 0x38	; 56
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	87 7f       	andi	r24, 0xF7	; 247
    204e:	8c 93       	st	X, r24


	  // enable writing
	  SET_BIT(LCD_CONFIG_PORT, LCD_E);
    2050:	a8 e3       	ldi	r26, 0x38	; 56
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e8 e3       	ldi	r30, 0x38	; 56
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	88 60       	ori	r24, 0x08	; 8
    205c:	8c 93       	st	X, r24

	  //send the second part of data
	  LCD_DATA_PORT = (LCD_DATA_PORT & ~LCD_DATA_MASK) | ((data << 4) & LCD_DATA_MASK);
    205e:	ab e3       	ldi	r26, 0x3B	; 59
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	eb e3       	ldi	r30, 0x3B	; 59
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	2f 70       	andi	r18, 0x0F	; 15
    206c:	89 a9       	ldd	r24, Y+49	; 0x31
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	82 95       	swap	r24
    2074:	92 95       	swap	r25
    2076:	90 7f       	andi	r25, 0xF0	; 240
    2078:	98 27       	eor	r25, r24
    207a:	80 7f       	andi	r24, 0xF0	; 240
    207c:	98 27       	eor	r25, r24
    207e:	82 2b       	or	r24, r18
    2080:	8c 93       	st	X, r24
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e8       	ldi	r26, 0x80	; 128
    2088:	bf e3       	ldi	r27, 0x3F	; 63
    208a:	8d 8b       	std	Y+21, r24	; 0x15
    208c:	9e 8b       	std	Y+22, r25	; 0x16
    208e:	af 8b       	std	Y+23, r26	; 0x17
    2090:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	2b ea       	ldi	r18, 0xAB	; 171
    209c:	3a ea       	ldi	r19, 0xAA	; 170
    209e:	4a ea       	ldi	r20, 0xAA	; 170
    20a0:	50 e4       	ldi	r21, 0x40	; 64
    20a2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	89 8b       	std	Y+17, r24	; 0x11
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
    20ae:	ab 8b       	std	Y+19, r26	; 0x13
    20b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20b2:	69 89       	ldd	r22, Y+17	; 0x11
    20b4:	7a 89       	ldd	r23, Y+18	; 0x12
    20b6:	8b 89       	ldd	r24, Y+19	; 0x13
    20b8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	1c f4       	brge	.+6      	; 0x20d0 <write+0x244>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	88 8b       	std	Y+16, r24	; 0x10
    20ce:	91 c0       	rjmp	.+290    	; 0x21f2 <write+0x366>
	else if (__tmp > 255)
    20d0:	69 89       	ldd	r22, Y+17	; 0x11
    20d2:	7a 89       	ldd	r23, Y+18	; 0x12
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	53 e4       	ldi	r21, 0x43	; 67
    20e0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	0c f0       	brlt	.+2      	; 0x20ea <write+0x25e>
    20e8:	7b c0       	rjmp	.+246    	; 0x21e0 <write+0x354>
	{
		_delay_ms(__us / 1000.0);
    20ea:	6d 89       	ldd	r22, Y+21	; 0x15
    20ec:	7e 89       	ldd	r23, Y+22	; 0x16
    20ee:	8f 89       	ldd	r24, Y+23	; 0x17
    20f0:	98 8d       	ldd	r25, Y+24	; 0x18
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8c 87       	std	Y+12, r24	; 0x0c
    2104:	9d 87       	std	Y+13, r25	; 0x0d
    2106:	ae 87       	std	Y+14, r26	; 0x0e
    2108:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	6c 85       	ldd	r22, Y+12	; 0x0c
    210c:	7d 85       	ldd	r23, Y+13	; 0x0d
    210e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2110:	9f 85       	ldd	r25, Y+15	; 0x0f
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a e7       	ldi	r20, 0x7A	; 122
    2118:	55 e4       	ldi	r21, 0x45	; 69
    211a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	88 87       	std	Y+8, r24	; 0x08
    2124:	99 87       	std	Y+9, r25	; 0x09
    2126:	aa 87       	std	Y+10, r26	; 0x0a
    2128:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    212a:	68 85       	ldd	r22, Y+8	; 0x08
    212c:	79 85       	ldd	r23, Y+9	; 0x09
    212e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2130:	9b 85       	ldd	r25, Y+11	; 0x0b
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <write+0x2c0>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9f 83       	std	Y+7, r25	; 0x07
    2148:	8e 83       	std	Y+6, r24	; 0x06
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <write+0x33e>
	else if (__tmp > 65535)
    214c:	68 85       	ldd	r22, Y+8	; 0x08
    214e:	79 85       	ldd	r23, Y+9	; 0x09
    2150:	8a 85       	ldd	r24, Y+10	; 0x0a
    2152:	9b 85       	ldd	r25, Y+11	; 0x0b
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <write+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	6c 85       	ldd	r22, Y+12	; 0x0c
    2166:	7d 85       	ldd	r23, Y+13	; 0x0d
    2168:	8e 85       	ldd	r24, Y+14	; 0x0e
    216a:	9f 85       	ldd	r25, Y+15	; 0x0f
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9f 83       	std	Y+7, r25	; 0x07
    218a:	8e 83       	std	Y+6, r24	; 0x06
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <write+0x320>
    218e:	80 e9       	ldi	r24, 0x90	; 144
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	9d 83       	std	Y+5, r25	; 0x05
    2194:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	9d 81       	ldd	r25, Y+5	; 0x05
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <write+0x30e>
    219e:	9d 83       	std	Y+5, r25	; 0x05
    21a0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	8e 81       	ldd	r24, Y+6	; 0x06
    21a4:	9f 81       	ldd	r25, Y+7	; 0x07
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9f 83       	std	Y+7, r25	; 0x07
    21aa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	8e 81       	ldd	r24, Y+6	; 0x06
    21ae:	9f 81       	ldd	r25, Y+7	; 0x07
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <write+0x302>
    21b4:	24 c0       	rjmp	.+72     	; 0x21fe <write+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	68 85       	ldd	r22, Y+8	; 0x08
    21b8:	79 85       	ldd	r23, Y+9	; 0x09
    21ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    21bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9f 83       	std	Y+7, r25	; 0x07
    21c8:	8e 83       	std	Y+6, r24	; 0x06
    21ca:	8e 81       	ldd	r24, Y+6	; 0x06
    21cc:	9f 81       	ldd	r25, Y+7	; 0x07
    21ce:	9b 83       	std	Y+3, r25	; 0x03
    21d0:	8a 83       	std	Y+2, r24	; 0x02
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <write+0x34a>
    21da:	9b 83       	std	Y+3, r25	; 0x03
    21dc:	8a 83       	std	Y+2, r24	; 0x02
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <write+0x372>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21e0:	69 89       	ldd	r22, Y+17	; 0x11
    21e2:	7a 89       	ldd	r23, Y+18	; 0x12
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	88 8b       	std	Y+16, r24	; 0x10
    21f2:	88 89       	ldd	r24, Y+16	; 0x10
    21f4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	8a 95       	dec	r24
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <write+0x36c>
    21fc:	89 83       	std	Y+1, r24	; 0x01
	  _delay_us(1);

	  CLR_BIT(LCD_CONFIG_PORT, LCD_E);
    21fe:	a8 e3       	ldi	r26, 0x38	; 56
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e8 e3       	ldi	r30, 0x38	; 56
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	87 7f       	andi	r24, 0xF7	; 247
    220a:	8c 93       	st	X, r24
}
    220c:	e1 96       	adiw	r28, 0x31	; 49
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <LCD_clearScreen>:


void LCD_clearScreen(){
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	2e 97       	sbiw	r28, 0x0e	; 14
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command(0x01);   // Clear display
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <LCD_write_command>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e0       	ldi	r26, 0x00	; 0
    223e:	b0 e4       	ldi	r27, 0x40	; 64
    2240:	8b 87       	std	Y+11, r24	; 0x0b
    2242:	9c 87       	std	Y+12, r25	; 0x0c
    2244:	ad 87       	std	Y+13, r26	; 0x0d
    2246:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2248:	6b 85       	ldd	r22, Y+11	; 0x0b
    224a:	7c 85       	ldd	r23, Y+12	; 0x0c
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	4a e7       	ldi	r20, 0x7A	; 122
    2256:	55 e4       	ldi	r21, 0x45	; 69
    2258:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	8f 83       	std	Y+7, r24	; 0x07
    2262:	98 87       	std	Y+8, r25	; 0x08
    2264:	a9 87       	std	Y+9, r26	; 0x09
    2266:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	2c f4       	brge	.+10     	; 0x228a <LCD_clearScreen+0x6c>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	3f c0       	rjmp	.+126    	; 0x2308 <LCD_clearScreen+0xea>
	else if (__tmp > 65535)
    228a:	6f 81       	ldd	r22, Y+7	; 0x07
    228c:	78 85       	ldd	r23, Y+8	; 0x08
    228e:	89 85       	ldd	r24, Y+9	; 0x09
    2290:	9a 85       	ldd	r25, Y+10	; 0x0a
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	3f ef       	ldi	r19, 0xFF	; 255
    2296:	4f e7       	ldi	r20, 0x7F	; 127
    2298:	57 e4       	ldi	r21, 0x47	; 71
    229a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    229e:	18 16       	cp	r1, r24
    22a0:	4c f5       	brge	.+82     	; 0x22f4 <LCD_clearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e2       	ldi	r20, 0x20	; 32
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	0f c0       	rjmp	.+30     	; 0x22ea <LCD_clearScreen+0xcc>
    22cc:	80 e9       	ldi	r24, 0x90	; 144
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_clearScreen+0xba>
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9e 83       	std	Y+6, r25	; 0x06
    22e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	69 f7       	brne	.-38     	; 0x22cc <LCD_clearScreen+0xae>
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <LCD_clearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f4:	6f 81       	ldd	r22, Y+7	; 0x07
    22f6:	78 85       	ldd	r23, Y+8	; 0x08
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_clearScreen+0xf6>
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(CLEAR_DELAY);
}
    231c:	2e 96       	adiw	r28, 0x0e	; 14
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <main>:

#include "ProgramController/PWM_Drawer.h"



int main() {
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62

	PWM_Drawer_startProgram();
    2336:	0e 94 68 09 	call	0x12d0	; 0x12d0 <PWM_Drawer_startProgram>


    return 0;
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
}
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <__prologue_saves__>:
    2344:	2f 92       	push	r2
    2346:	3f 92       	push	r3
    2348:	4f 92       	push	r4
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	ca 1b       	sub	r28, r26
    236e:	db 0b       	sbc	r29, r27
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	09 94       	ijmp

0000237c <__epilogue_restores__>:
    237c:	2a 88       	ldd	r2, Y+18	; 0x12
    237e:	39 88       	ldd	r3, Y+17	; 0x11
    2380:	48 88       	ldd	r4, Y+16	; 0x10
    2382:	5f 84       	ldd	r5, Y+15	; 0x0f
    2384:	6e 84       	ldd	r6, Y+14	; 0x0e
    2386:	7d 84       	ldd	r7, Y+13	; 0x0d
    2388:	8c 84       	ldd	r8, Y+12	; 0x0c
    238a:	9b 84       	ldd	r9, Y+11	; 0x0b
    238c:	aa 84       	ldd	r10, Y+10	; 0x0a
    238e:	b9 84       	ldd	r11, Y+9	; 0x09
    2390:	c8 84       	ldd	r12, Y+8	; 0x08
    2392:	df 80       	ldd	r13, Y+7	; 0x07
    2394:	ee 80       	ldd	r14, Y+6	; 0x06
    2396:	fd 80       	ldd	r15, Y+5	; 0x05
    2398:	0c 81       	ldd	r16, Y+4	; 0x04
    239a:	1b 81       	ldd	r17, Y+3	; 0x03
    239c:	aa 81       	ldd	r26, Y+2	; 0x02
    239e:	b9 81       	ldd	r27, Y+1	; 0x01
    23a0:	ce 0f       	add	r28, r30
    23a2:	d1 1d       	adc	r29, r1
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	ed 01       	movw	r28, r26
    23b0:	08 95       	ret

000023b2 <dtostrf>:
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	f2 2f       	mov	r31, r18
    23bc:	f0 2e       	mov	r15, r16
    23be:	47 fd       	sbrc	r20, 7
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <dtostrf+0x14>
    23c2:	e4 e0       	ldi	r30, 0x04	; 4
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <dtostrf+0x16>
    23c6:	e4 e1       	ldi	r30, 0x14	; 20
    23c8:	24 2f       	mov	r18, r20
    23ca:	33 27       	eor	r19, r19
    23cc:	27 fd       	sbrc	r18, 7
    23ce:	30 95       	com	r19
    23d0:	37 ff       	sbrs	r19, 7
    23d2:	03 c0       	rjmp	.+6      	; 0x23da <dtostrf+0x28>
    23d4:	30 95       	com	r19
    23d6:	21 95       	neg	r18
    23d8:	3f 4f       	sbci	r19, 0xFF	; 255
    23da:	4f 2d       	mov	r20, r15
    23dc:	51 2f       	mov	r21, r17
    23de:	0f 2f       	mov	r16, r31
    23e0:	ee 2e       	mov	r14, r30
    23e2:	0e 94 3b 12 	call	0x2476	; 0x2476 <dtoa_prf>
    23e6:	8f 2d       	mov	r24, r15
    23e8:	91 2f       	mov	r25, r17
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	08 95       	ret

000023f4 <itoa>:
    23f4:	fb 01       	movw	r30, r22
    23f6:	9f 01       	movw	r18, r30
    23f8:	e8 94       	clt
    23fa:	42 30       	cpi	r20, 0x02	; 2
    23fc:	c4 f0       	brlt	.+48     	; 0x242e <itoa+0x3a>
    23fe:	45 32       	cpi	r20, 0x25	; 37
    2400:	b4 f4       	brge	.+44     	; 0x242e <itoa+0x3a>
    2402:	4a 30       	cpi	r20, 0x0A	; 10
    2404:	29 f4       	brne	.+10     	; 0x2410 <itoa+0x1c>
    2406:	97 fb       	bst	r25, 7
    2408:	1e f4       	brtc	.+6      	; 0x2410 <itoa+0x1c>
    240a:	90 95       	com	r25
    240c:	81 95       	neg	r24
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	64 2f       	mov	r22, r20
    2412:	77 27       	eor	r23, r23
    2414:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodhi4>
    2418:	80 5d       	subi	r24, 0xD0	; 208
    241a:	8a 33       	cpi	r24, 0x3A	; 58
    241c:	0c f0       	brlt	.+2      	; 0x2420 <itoa+0x2c>
    241e:	89 5d       	subi	r24, 0xD9	; 217
    2420:	81 93       	st	Z+, r24
    2422:	cb 01       	movw	r24, r22
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	a1 f7       	brne	.-24     	; 0x2410 <itoa+0x1c>
    2428:	16 f4       	brtc	.+4      	; 0x242e <itoa+0x3a>
    242a:	5d e2       	ldi	r21, 0x2D	; 45
    242c:	51 93       	st	Z+, r21
    242e:	10 82       	st	Z, r1
    2430:	c9 01       	movw	r24, r18
    2432:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <strrev>

00002436 <round>:
    2436:	9a d2       	rcall	.+1332   	; 0x296c <__fp_splitA>
    2438:	e0 f0       	brcs	.+56     	; 0x2472 <round+0x3c>
    243a:	9e 37       	cpi	r25, 0x7E	; 126
    243c:	d8 f0       	brcs	.+54     	; 0x2474 <round+0x3e>
    243e:	96 39       	cpi	r25, 0x96	; 150
    2440:	b8 f4       	brcc	.+46     	; 0x2470 <round+0x3a>
    2442:	9e 38       	cpi	r25, 0x8E	; 142
    2444:	48 f4       	brcc	.+18     	; 0x2458 <round+0x22>
    2446:	67 2f       	mov	r22, r23
    2448:	78 2f       	mov	r23, r24
    244a:	88 27       	eor	r24, r24
    244c:	98 5f       	subi	r25, 0xF8	; 248
    244e:	f9 cf       	rjmp	.-14     	; 0x2442 <round+0xc>
    2450:	86 95       	lsr	r24
    2452:	77 95       	ror	r23
    2454:	67 95       	ror	r22
    2456:	93 95       	inc	r25
    2458:	95 39       	cpi	r25, 0x95	; 149
    245a:	d0 f3       	brcs	.-12     	; 0x2450 <round+0x1a>
    245c:	b6 2f       	mov	r27, r22
    245e:	b1 70       	andi	r27, 0x01	; 1
    2460:	6b 0f       	add	r22, r27
    2462:	71 1d       	adc	r23, r1
    2464:	81 1d       	adc	r24, r1
    2466:	20 f4       	brcc	.+8      	; 0x2470 <round+0x3a>
    2468:	87 95       	ror	r24
    246a:	77 95       	ror	r23
    246c:	67 95       	ror	r22
    246e:	93 95       	inc	r25
    2470:	4c c2       	rjmp	.+1176   	; 0x290a <__fp_mintl>
    2472:	66 c2       	rjmp	.+1228   	; 0x2940 <__fp_mpack>
    2474:	96 c2       	rjmp	.+1324   	; 0x29a2 <__fp_szero>

00002476 <dtoa_prf>:
    2476:	a9 e0       	ldi	r26, 0x09	; 9
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e1 e4       	ldi	r30, 0x41	; 65
    247c:	f2 e1       	ldi	r31, 0x12	; 18
    247e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__prologue_saves__+0x8>
    2482:	6a 01       	movw	r12, r20
    2484:	12 2f       	mov	r17, r18
    2486:	a0 2e       	mov	r10, r16
    2488:	be 2c       	mov	r11, r14
    248a:	2b e3       	ldi	r18, 0x3B	; 59
    248c:	20 17       	cp	r18, r16
    248e:	18 f4       	brcc	.+6      	; 0x2496 <dtoa_prf+0x20>
    2490:	2c e3       	ldi	r18, 0x3C	; 60
    2492:	92 2e       	mov	r9, r18
    2494:	02 c0       	rjmp	.+4      	; 0x249a <dtoa_prf+0x24>
    2496:	90 2e       	mov	r9, r16
    2498:	93 94       	inc	r9
    249a:	ae 01       	movw	r20, r28
    249c:	4f 5f       	subi	r20, 0xFF	; 255
    249e:	5f 4f       	sbci	r21, 0xFF	; 255
    24a0:	27 e0       	ldi	r18, 0x07	; 7
    24a2:	09 2d       	mov	r16, r9
    24a4:	0e 94 9d 13 	call	0x273a	; 0x273a <__ftoa_engine>
    24a8:	bc 01       	movw	r22, r24
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	e8 2e       	mov	r14, r24
    24ae:	ff 24       	eor	r15, r15
    24b0:	c7 01       	movw	r24, r14
    24b2:	89 70       	andi	r24, 0x09	; 9
    24b4:	90 70       	andi	r25, 0x00	; 0
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	11 f4       	brne	.+4      	; 0x24be <dtoa_prf+0x48>
    24ba:	ad e2       	ldi	r26, 0x2D	; 45
    24bc:	09 c0       	rjmp	.+18     	; 0x24d0 <dtoa_prf+0x5a>
    24be:	b1 fe       	sbrs	r11, 1
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <dtoa_prf+0x50>
    24c2:	ab e2       	ldi	r26, 0x2B	; 43
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <dtoa_prf+0x5a>
    24c6:	b0 fc       	sbrc	r11, 0
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <dtoa_prf+0x58>
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <dtoa_prf+0x5a>
    24ce:	a0 e2       	ldi	r26, 0x20	; 32
    24d0:	e3 fe       	sbrs	r14, 3
    24d2:	3b c0       	rjmp	.+118    	; 0x254a <dtoa_prf+0xd4>
    24d4:	aa 23       	and	r26, r26
    24d6:	11 f4       	brne	.+4      	; 0x24dc <dtoa_prf+0x66>
    24d8:	23 e0       	ldi	r18, 0x03	; 3
    24da:	01 c0       	rjmp	.+2      	; 0x24de <dtoa_prf+0x68>
    24dc:	24 e0       	ldi	r18, 0x04	; 4
    24de:	21 17       	cp	r18, r17
    24e0:	10 f0       	brcs	.+4      	; 0x24e6 <dtoa_prf+0x70>
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <dtoa_prf+0x74>
    24e6:	12 1b       	sub	r17, r18
    24e8:	21 2f       	mov	r18, r17
    24ea:	eb 2c       	mov	r14, r11
    24ec:	b4 fe       	sbrs	r11, 4
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <dtoa_prf+0x7e>
    24f0:	32 2f       	mov	r19, r18
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <dtoa_prf+0x92>
    24f4:	f6 01       	movw	r30, r12
    24f6:	32 2f       	mov	r19, r18
    24f8:	80 e2       	ldi	r24, 0x20	; 32
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <dtoa_prf+0x8a>
    24fc:	81 93       	st	Z+, r24
    24fe:	31 50       	subi	r19, 0x01	; 1
    2500:	33 23       	and	r19, r19
    2502:	e1 f7       	brne	.-8      	; 0x24fc <dtoa_prf+0x86>
    2504:	c2 0e       	add	r12, r18
    2506:	d1 1c       	adc	r13, r1
    2508:	aa 23       	and	r26, r26
    250a:	19 f0       	breq	.+6      	; 0x2512 <dtoa_prf+0x9c>
    250c:	f6 01       	movw	r30, r12
    250e:	a1 93       	st	Z+, r26
    2510:	6f 01       	movw	r12, r30
    2512:	f6 01       	movw	r30, r12
    2514:	31 96       	adiw	r30, 0x01	; 1
    2516:	e2 fe       	sbrs	r14, 2
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <dtoa_prf+0xae>
    251a:	9e e4       	ldi	r25, 0x4E	; 78
    251c:	d6 01       	movw	r26, r12
    251e:	9c 93       	st	X, r25
    2520:	81 e4       	ldi	r24, 0x41	; 65
    2522:	04 c0       	rjmp	.+8      	; 0x252c <dtoa_prf+0xb6>
    2524:	9e e6       	ldi	r25, 0x6E	; 110
    2526:	d6 01       	movw	r26, r12
    2528:	9c 93       	st	X, r25
    252a:	81 e6       	ldi	r24, 0x61	; 97
    252c:	11 96       	adiw	r26, 0x01	; 1
    252e:	8c 93       	st	X, r24
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	32 96       	adiw	r30, 0x02	; 2
    2534:	df 01       	movw	r26, r30
    2536:	83 2f       	mov	r24, r19
    2538:	90 e2       	ldi	r25, 0x20	; 32
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <dtoa_prf+0xca>
    253c:	9d 93       	st	X+, r25
    253e:	81 50       	subi	r24, 0x01	; 1
    2540:	88 23       	and	r24, r24
    2542:	e1 f7       	brne	.-8      	; 0x253c <dtoa_prf+0xc6>
    2544:	e3 0f       	add	r30, r19
    2546:	f1 1d       	adc	r31, r1
    2548:	40 c0       	rjmp	.+128    	; 0x25ca <dtoa_prf+0x154>
    254a:	e2 fe       	sbrs	r14, 2
    254c:	42 c0       	rjmp	.+132    	; 0x25d2 <dtoa_prf+0x15c>
    254e:	aa 23       	and	r26, r26
    2550:	11 f4       	brne	.+4      	; 0x2556 <dtoa_prf+0xe0>
    2552:	23 e0       	ldi	r18, 0x03	; 3
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <dtoa_prf+0xe2>
    2556:	24 e0       	ldi	r18, 0x04	; 4
    2558:	21 17       	cp	r18, r17
    255a:	10 f0       	brcs	.+4      	; 0x2560 <dtoa_prf+0xea>
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <dtoa_prf+0xee>
    2560:	12 1b       	sub	r17, r18
    2562:	21 2f       	mov	r18, r17
    2564:	eb 2c       	mov	r14, r11
    2566:	b4 fe       	sbrs	r11, 4
    2568:	02 c0       	rjmp	.+4      	; 0x256e <dtoa_prf+0xf8>
    256a:	92 2f       	mov	r25, r18
    256c:	0a c0       	rjmp	.+20     	; 0x2582 <dtoa_prf+0x10c>
    256e:	f6 01       	movw	r30, r12
    2570:	92 2f       	mov	r25, r18
    2572:	80 e2       	ldi	r24, 0x20	; 32
    2574:	02 c0       	rjmp	.+4      	; 0x257a <dtoa_prf+0x104>
    2576:	81 93       	st	Z+, r24
    2578:	91 50       	subi	r25, 0x01	; 1
    257a:	99 23       	and	r25, r25
    257c:	e1 f7       	brne	.-8      	; 0x2576 <dtoa_prf+0x100>
    257e:	c2 0e       	add	r12, r18
    2580:	d1 1c       	adc	r13, r1
    2582:	aa 23       	and	r26, r26
    2584:	19 f0       	breq	.+6      	; 0x258c <dtoa_prf+0x116>
    2586:	f6 01       	movw	r30, r12
    2588:	a1 93       	st	Z+, r26
    258a:	6f 01       	movw	r12, r30
    258c:	f6 01       	movw	r30, r12
    258e:	31 96       	adiw	r30, 0x01	; 1
    2590:	e2 fe       	sbrs	r14, 2
    2592:	08 c0       	rjmp	.+16     	; 0x25a4 <dtoa_prf+0x12e>
    2594:	89 e4       	ldi	r24, 0x49	; 73
    2596:	d6 01       	movw	r26, r12
    2598:	8c 93       	st	X, r24
    259a:	8e e4       	ldi	r24, 0x4E	; 78
    259c:	11 96       	adiw	r26, 0x01	; 1
    259e:	8c 93       	st	X, r24
    25a0:	86 e4       	ldi	r24, 0x46	; 70
    25a2:	07 c0       	rjmp	.+14     	; 0x25b2 <dtoa_prf+0x13c>
    25a4:	89 e6       	ldi	r24, 0x69	; 105
    25a6:	d6 01       	movw	r26, r12
    25a8:	8c 93       	st	X, r24
    25aa:	8e e6       	ldi	r24, 0x6E	; 110
    25ac:	11 96       	adiw	r26, 0x01	; 1
    25ae:	8c 93       	st	X, r24
    25b0:	86 e6       	ldi	r24, 0x66	; 102
    25b2:	81 83       	std	Z+1, r24	; 0x01
    25b4:	32 96       	adiw	r30, 0x02	; 2
    25b6:	df 01       	movw	r26, r30
    25b8:	89 2f       	mov	r24, r25
    25ba:	20 e2       	ldi	r18, 0x20	; 32
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <dtoa_prf+0x14c>
    25be:	2d 93       	st	X+, r18
    25c0:	81 50       	subi	r24, 0x01	; 1
    25c2:	88 23       	and	r24, r24
    25c4:	e1 f7       	brne	.-8      	; 0x25be <dtoa_prf+0x148>
    25c6:	e9 0f       	add	r30, r25
    25c8:	f1 1d       	adc	r31, r1
    25ca:	10 82       	st	Z, r1
    25cc:	2e ef       	ldi	r18, 0xFE	; 254
    25ce:	3f ef       	ldi	r19, 0xFF	; 255
    25d0:	af c0       	rjmp	.+350    	; 0x2730 <dtoa_prf+0x2ba>
    25d2:	16 16       	cp	r1, r22
    25d4:	17 06       	cpc	r1, r23
    25d6:	1c f0       	brlt	.+6      	; 0x25de <dtoa_prf+0x168>
    25d8:	41 e0       	ldi	r20, 0x01	; 1
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <dtoa_prf+0x16e>
    25de:	ab 01       	movw	r20, r22
    25e0:	4f 5f       	subi	r20, 0xFF	; 255
    25e2:	5f 4f       	sbci	r21, 0xFF	; 255
    25e4:	aa 20       	and	r10, r10
    25e6:	19 f4       	brne	.+6      	; 0x25ee <dtoa_prf+0x178>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	03 c0       	rjmp	.+6      	; 0x25f4 <dtoa_prf+0x17e>
    25ee:	8a 2d       	mov	r24, r10
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	01 96       	adiw	r24, 0x01	; 1
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	aa 23       	and	r26, r26
    25fa:	11 f0       	breq	.+4      	; 0x2600 <dtoa_prf+0x18a>
    25fc:	21 e0       	ldi	r18, 0x01	; 1
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	24 0f       	add	r18, r20
    2602:	35 1f       	adc	r19, r21
    2604:	28 0f       	add	r18, r24
    2606:	39 1f       	adc	r19, r25
    2608:	81 2f       	mov	r24, r17
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	28 17       	cp	r18, r24
    260e:	39 07       	cpc	r19, r25
    2610:	14 f0       	brlt	.+4      	; 0x2616 <dtoa_prf+0x1a0>
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	02 c0       	rjmp	.+4      	; 0x261a <dtoa_prf+0x1a4>
    2616:	12 1b       	sub	r17, r18
    2618:	21 2f       	mov	r18, r17
    261a:	4b 2d       	mov	r20, r11
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	ca 01       	movw	r24, r20
    2620:	80 71       	andi	r24, 0x10	; 16
    2622:	90 70       	andi	r25, 0x00	; 0
    2624:	b4 fc       	sbrc	r11, 4
    2626:	0d c0       	rjmp	.+26     	; 0x2642 <dtoa_prf+0x1cc>
    2628:	b3 fc       	sbrc	r11, 3
    262a:	0b c0       	rjmp	.+22     	; 0x2642 <dtoa_prf+0x1cc>
    262c:	f6 01       	movw	r30, r12
    262e:	32 2f       	mov	r19, r18
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <dtoa_prf+0x1c2>
    2634:	41 93       	st	Z+, r20
    2636:	31 50       	subi	r19, 0x01	; 1
    2638:	33 23       	and	r19, r19
    263a:	e1 f7       	brne	.-8      	; 0x2634 <dtoa_prf+0x1be>
    263c:	c2 0e       	add	r12, r18
    263e:	d1 1c       	adc	r13, r1
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <dtoa_prf+0x1ce>
    2642:	32 2f       	mov	r19, r18
    2644:	aa 23       	and	r26, r26
    2646:	19 f0       	breq	.+6      	; 0x264e <dtoa_prf+0x1d8>
    2648:	f6 01       	movw	r30, r12
    264a:	a1 93       	st	Z+, r26
    264c:	6f 01       	movw	r12, r30
    264e:	89 2b       	or	r24, r25
    2650:	11 f0       	breq	.+4      	; 0x2656 <dtoa_prf+0x1e0>
    2652:	13 2f       	mov	r17, r19
    2654:	0a c0       	rjmp	.+20     	; 0x266a <dtoa_prf+0x1f4>
    2656:	f6 01       	movw	r30, r12
    2658:	13 2f       	mov	r17, r19
    265a:	80 e3       	ldi	r24, 0x30	; 48
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <dtoa_prf+0x1ec>
    265e:	81 93       	st	Z+, r24
    2660:	11 50       	subi	r17, 0x01	; 1
    2662:	11 23       	and	r17, r17
    2664:	e1 f7       	brne	.-8      	; 0x265e <dtoa_prf+0x1e8>
    2666:	c3 0e       	add	r12, r19
    2668:	d1 1c       	adc	r13, r1
    266a:	09 2d       	mov	r16, r9
    266c:	06 0f       	add	r16, r22
    266e:	ba 80       	ldd	r11, Y+2	; 0x02
    2670:	90 e1       	ldi	r25, 0x10	; 16
    2672:	89 2e       	mov	r8, r25
    2674:	91 2c       	mov	r9, r1
    2676:	8e 20       	and	r8, r14
    2678:	9f 20       	and	r9, r15
    267a:	e4 fe       	sbrs	r14, 4
    267c:	04 c0       	rjmp	.+8      	; 0x2686 <dtoa_prf+0x210>
    267e:	f1 e3       	ldi	r31, 0x31	; 49
    2680:	bf 16       	cp	r11, r31
    2682:	09 f4       	brne	.+2      	; 0x2686 <dtoa_prf+0x210>
    2684:	01 50       	subi	r16, 0x01	; 1
    2686:	10 16       	cp	r1, r16
    2688:	14 f0       	brlt	.+4      	; 0x268e <dtoa_prf+0x218>
    268a:	01 e0       	ldi	r16, 0x01	; 1
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <dtoa_prf+0x21e>
    268e:	09 30       	cpi	r16, 0x09	; 9
    2690:	08 f0       	brcs	.+2      	; 0x2694 <dtoa_prf+0x21e>
    2692:	08 e0       	ldi	r16, 0x08	; 8
    2694:	9b 01       	movw	r18, r22
    2696:	77 ff       	sbrs	r23, 7
    2698:	02 c0       	rjmp	.+4      	; 0x269e <dtoa_prf+0x228>
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	cb 01       	movw	r24, r22
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	82 1b       	sub	r24, r18
    26a4:	93 0b       	sbc	r25, r19
    26a6:	fe 01       	movw	r30, r28
    26a8:	31 96       	adiw	r30, 0x01	; 1
    26aa:	e8 0f       	add	r30, r24
    26ac:	f9 1f       	adc	r31, r25
    26ae:	8e e2       	ldi	r24, 0x2E	; 46
    26b0:	f8 2e       	mov	r15, r24
    26b2:	3b 01       	movw	r6, r22
    26b4:	60 1a       	sub	r6, r16
    26b6:	71 08       	sbc	r7, r1
    26b8:	8a 2d       	mov	r24, r10
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	44 27       	eor	r20, r20
    26be:	55 27       	eor	r21, r21
    26c0:	48 1b       	sub	r20, r24
    26c2:	59 0b       	sbc	r21, r25
    26c4:	8f ef       	ldi	r24, 0xFF	; 255
    26c6:	2f 3f       	cpi	r18, 0xFF	; 255
    26c8:	38 07       	cpc	r19, r24
    26ca:	19 f4       	brne	.+6      	; 0x26d2 <dtoa_prf+0x25c>
    26cc:	d6 01       	movw	r26, r12
    26ce:	fd 92       	st	X+, r15
    26d0:	6d 01       	movw	r12, r26
    26d2:	62 17       	cp	r22, r18
    26d4:	73 07       	cpc	r23, r19
    26d6:	2c f0       	brlt	.+10     	; 0x26e2 <dtoa_prf+0x26c>
    26d8:	62 16       	cp	r6, r18
    26da:	73 06       	cpc	r7, r19
    26dc:	14 f4       	brge	.+4      	; 0x26e2 <dtoa_prf+0x26c>
    26de:	80 81       	ld	r24, Z
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <dtoa_prf+0x26e>
    26e2:	80 e3       	ldi	r24, 0x30	; 48
    26e4:	21 50       	subi	r18, 0x01	; 1
    26e6:	30 40       	sbci	r19, 0x00	; 0
    26e8:	31 96       	adiw	r30, 0x01	; 1
    26ea:	24 17       	cp	r18, r20
    26ec:	35 07       	cpc	r19, r21
    26ee:	24 f0       	brlt	.+8      	; 0x26f8 <dtoa_prf+0x282>
    26f0:	d6 01       	movw	r26, r12
    26f2:	8d 93       	st	X+, r24
    26f4:	6d 01       	movw	r12, r26
    26f6:	e6 cf       	rjmp	.-52     	; 0x26c4 <dtoa_prf+0x24e>
    26f8:	26 17       	cp	r18, r22
    26fa:	37 07       	cpc	r19, r23
    26fc:	49 f4       	brne	.+18     	; 0x2710 <dtoa_prf+0x29a>
    26fe:	b5 e3       	ldi	r27, 0x35	; 53
    2700:	bb 15       	cp	r27, r11
    2702:	28 f0       	brcs	.+10     	; 0x270e <dtoa_prf+0x298>
    2704:	bb 16       	cp	r11, r27
    2706:	21 f4       	brne	.+8      	; 0x2710 <dtoa_prf+0x29a>
    2708:	81 14       	cp	r8, r1
    270a:	91 04       	cpc	r9, r1
    270c:	09 f4       	brne	.+2      	; 0x2710 <dtoa_prf+0x29a>
    270e:	81 e3       	ldi	r24, 0x31	; 49
    2710:	f6 01       	movw	r30, r12
    2712:	81 93       	st	Z+, r24
    2714:	d6 01       	movw	r26, r12
    2716:	81 2f       	mov	r24, r17
    2718:	90 e2       	ldi	r25, 0x20	; 32
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <dtoa_prf+0x2aa>
    271c:	9c 93       	st	X, r25
    271e:	81 50       	subi	r24, 0x01	; 1
    2720:	11 96       	adiw	r26, 0x01	; 1
    2722:	88 23       	and	r24, r24
    2724:	d9 f7       	brne	.-10     	; 0x271c <dtoa_prf+0x2a6>
    2726:	e1 0f       	add	r30, r17
    2728:	f1 1d       	adc	r31, r1
    272a:	10 82       	st	Z, r1
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	c9 01       	movw	r24, r18
    2732:	29 96       	adiw	r28, 0x09	; 9
    2734:	ee e0       	ldi	r30, 0x0E	; 14
    2736:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__epilogue_restores__+0x8>

0000273a <__ftoa_engine>:
    273a:	28 30       	cpi	r18, 0x08	; 8
    273c:	08 f0       	brcs	.+2      	; 0x2740 <__ftoa_engine+0x6>
    273e:	27 e0       	ldi	r18, 0x07	; 7
    2740:	33 27       	eor	r19, r19
    2742:	da 01       	movw	r26, r20
    2744:	99 0f       	add	r25, r25
    2746:	31 1d       	adc	r19, r1
    2748:	87 fd       	sbrc	r24, 7
    274a:	91 60       	ori	r25, 0x01	; 1
    274c:	00 96       	adiw	r24, 0x00	; 0
    274e:	61 05       	cpc	r22, r1
    2750:	71 05       	cpc	r23, r1
    2752:	39 f4       	brne	.+14     	; 0x2762 <__ftoa_engine+0x28>
    2754:	32 60       	ori	r19, 0x02	; 2
    2756:	2e 5f       	subi	r18, 0xFE	; 254
    2758:	3d 93       	st	X+, r19
    275a:	30 e3       	ldi	r19, 0x30	; 48
    275c:	2a 95       	dec	r18
    275e:	e1 f7       	brne	.-8      	; 0x2758 <__ftoa_engine+0x1e>
    2760:	08 95       	ret
    2762:	9f 3f       	cpi	r25, 0xFF	; 255
    2764:	30 f0       	brcs	.+12     	; 0x2772 <__ftoa_engine+0x38>
    2766:	80 38       	cpi	r24, 0x80	; 128
    2768:	71 05       	cpc	r23, r1
    276a:	61 05       	cpc	r22, r1
    276c:	09 f0       	breq	.+2      	; 0x2770 <__ftoa_engine+0x36>
    276e:	3c 5f       	subi	r19, 0xFC	; 252
    2770:	3c 5f       	subi	r19, 0xFC	; 252
    2772:	3d 93       	st	X+, r19
    2774:	91 30       	cpi	r25, 0x01	; 1
    2776:	08 f0       	brcs	.+2      	; 0x277a <__ftoa_engine+0x40>
    2778:	80 68       	ori	r24, 0x80	; 128
    277a:	91 1d       	adc	r25, r1
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	1f 93       	push	r17
    2782:	0f 93       	push	r16
    2784:	ff 92       	push	r15
    2786:	ef 92       	push	r14
    2788:	19 2f       	mov	r17, r25
    278a:	98 7f       	andi	r25, 0xF8	; 248
    278c:	96 95       	lsr	r25
    278e:	e9 2f       	mov	r30, r25
    2790:	96 95       	lsr	r25
    2792:	96 95       	lsr	r25
    2794:	e9 0f       	add	r30, r25
    2796:	ff 27       	eor	r31, r31
    2798:	e2 55       	subi	r30, 0x52	; 82
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	99 27       	eor	r25, r25
    279e:	33 27       	eor	r19, r19
    27a0:	ee 24       	eor	r14, r14
    27a2:	ff 24       	eor	r15, r15
    27a4:	a7 01       	movw	r20, r14
    27a6:	e7 01       	movw	r28, r14
    27a8:	05 90       	lpm	r0, Z+
    27aa:	08 94       	sec
    27ac:	07 94       	ror	r0
    27ae:	28 f4       	brcc	.+10     	; 0x27ba <__ftoa_engine+0x80>
    27b0:	36 0f       	add	r19, r22
    27b2:	e7 1e       	adc	r14, r23
    27b4:	f8 1e       	adc	r15, r24
    27b6:	49 1f       	adc	r20, r25
    27b8:	51 1d       	adc	r21, r1
    27ba:	66 0f       	add	r22, r22
    27bc:	77 1f       	adc	r23, r23
    27be:	88 1f       	adc	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	06 94       	lsr	r0
    27c4:	a1 f7       	brne	.-24     	; 0x27ae <__ftoa_engine+0x74>
    27c6:	05 90       	lpm	r0, Z+
    27c8:	07 94       	ror	r0
    27ca:	28 f4       	brcc	.+10     	; 0x27d6 <__ftoa_engine+0x9c>
    27cc:	e7 0e       	add	r14, r23
    27ce:	f8 1e       	adc	r15, r24
    27d0:	49 1f       	adc	r20, r25
    27d2:	56 1f       	adc	r21, r22
    27d4:	c1 1d       	adc	r28, r1
    27d6:	77 0f       	add	r23, r23
    27d8:	88 1f       	adc	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	66 1f       	adc	r22, r22
    27de:	06 94       	lsr	r0
    27e0:	a1 f7       	brne	.-24     	; 0x27ca <__ftoa_engine+0x90>
    27e2:	05 90       	lpm	r0, Z+
    27e4:	07 94       	ror	r0
    27e6:	28 f4       	brcc	.+10     	; 0x27f2 <__ftoa_engine+0xb8>
    27e8:	f8 0e       	add	r15, r24
    27ea:	49 1f       	adc	r20, r25
    27ec:	56 1f       	adc	r21, r22
    27ee:	c7 1f       	adc	r28, r23
    27f0:	d1 1d       	adc	r29, r1
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	66 1f       	adc	r22, r22
    27f8:	77 1f       	adc	r23, r23
    27fa:	06 94       	lsr	r0
    27fc:	a1 f7       	brne	.-24     	; 0x27e6 <__ftoa_engine+0xac>
    27fe:	05 90       	lpm	r0, Z+
    2800:	07 94       	ror	r0
    2802:	20 f4       	brcc	.+8      	; 0x280c <__ftoa_engine+0xd2>
    2804:	49 0f       	add	r20, r25
    2806:	56 1f       	adc	r21, r22
    2808:	c7 1f       	adc	r28, r23
    280a:	d8 1f       	adc	r29, r24
    280c:	99 0f       	add	r25, r25
    280e:	66 1f       	adc	r22, r22
    2810:	77 1f       	adc	r23, r23
    2812:	88 1f       	adc	r24, r24
    2814:	06 94       	lsr	r0
    2816:	a9 f7       	brne	.-22     	; 0x2802 <__ftoa_engine+0xc8>
    2818:	84 91       	lpm	r24, Z+
    281a:	10 95       	com	r17
    281c:	17 70       	andi	r17, 0x07	; 7
    281e:	41 f0       	breq	.+16     	; 0x2830 <__ftoa_engine+0xf6>
    2820:	d6 95       	lsr	r29
    2822:	c7 95       	ror	r28
    2824:	57 95       	ror	r21
    2826:	47 95       	ror	r20
    2828:	f7 94       	ror	r15
    282a:	e7 94       	ror	r14
    282c:	1a 95       	dec	r17
    282e:	c1 f7       	brne	.-16     	; 0x2820 <__ftoa_engine+0xe6>
    2830:	e4 e5       	ldi	r30, 0x54	; 84
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	68 94       	set
    2836:	15 90       	lpm	r1, Z+
    2838:	15 91       	lpm	r17, Z+
    283a:	35 91       	lpm	r19, Z+
    283c:	65 91       	lpm	r22, Z+
    283e:	95 91       	lpm	r25, Z+
    2840:	05 90       	lpm	r0, Z+
    2842:	7f e2       	ldi	r23, 0x2F	; 47
    2844:	73 95       	inc	r23
    2846:	e1 18       	sub	r14, r1
    2848:	f1 0a       	sbc	r15, r17
    284a:	43 0b       	sbc	r20, r19
    284c:	56 0b       	sbc	r21, r22
    284e:	c9 0b       	sbc	r28, r25
    2850:	d0 09       	sbc	r29, r0
    2852:	c0 f7       	brcc	.-16     	; 0x2844 <__ftoa_engine+0x10a>
    2854:	e1 0c       	add	r14, r1
    2856:	f1 1e       	adc	r15, r17
    2858:	43 1f       	adc	r20, r19
    285a:	56 1f       	adc	r21, r22
    285c:	c9 1f       	adc	r28, r25
    285e:	d0 1d       	adc	r29, r0
    2860:	7e f4       	brtc	.+30     	; 0x2880 <__ftoa_engine+0x146>
    2862:	70 33       	cpi	r23, 0x30	; 48
    2864:	11 f4       	brne	.+4      	; 0x286a <__ftoa_engine+0x130>
    2866:	8a 95       	dec	r24
    2868:	e6 cf       	rjmp	.-52     	; 0x2836 <__ftoa_engine+0xfc>
    286a:	e8 94       	clt
    286c:	01 50       	subi	r16, 0x01	; 1
    286e:	30 f0       	brcs	.+12     	; 0x287c <__ftoa_engine+0x142>
    2870:	08 0f       	add	r16, r24
    2872:	0a f4       	brpl	.+2      	; 0x2876 <__ftoa_engine+0x13c>
    2874:	00 27       	eor	r16, r16
    2876:	02 17       	cp	r16, r18
    2878:	08 f4       	brcc	.+2      	; 0x287c <__ftoa_engine+0x142>
    287a:	20 2f       	mov	r18, r16
    287c:	23 95       	inc	r18
    287e:	02 2f       	mov	r16, r18
    2880:	7a 33       	cpi	r23, 0x3A	; 58
    2882:	28 f0       	brcs	.+10     	; 0x288e <__ftoa_engine+0x154>
    2884:	79 e3       	ldi	r23, 0x39	; 57
    2886:	7d 93       	st	X+, r23
    2888:	2a 95       	dec	r18
    288a:	e9 f7       	brne	.-6      	; 0x2886 <__ftoa_engine+0x14c>
    288c:	10 c0       	rjmp	.+32     	; 0x28ae <__ftoa_engine+0x174>
    288e:	7d 93       	st	X+, r23
    2890:	2a 95       	dec	r18
    2892:	89 f6       	brne	.-94     	; 0x2836 <__ftoa_engine+0xfc>
    2894:	06 94       	lsr	r0
    2896:	97 95       	ror	r25
    2898:	67 95       	ror	r22
    289a:	37 95       	ror	r19
    289c:	17 95       	ror	r17
    289e:	17 94       	ror	r1
    28a0:	e1 18       	sub	r14, r1
    28a2:	f1 0a       	sbc	r15, r17
    28a4:	43 0b       	sbc	r20, r19
    28a6:	56 0b       	sbc	r21, r22
    28a8:	c9 0b       	sbc	r28, r25
    28aa:	d0 09       	sbc	r29, r0
    28ac:	98 f0       	brcs	.+38     	; 0x28d4 <__ftoa_engine+0x19a>
    28ae:	23 95       	inc	r18
    28b0:	7e 91       	ld	r23, -X
    28b2:	73 95       	inc	r23
    28b4:	7a 33       	cpi	r23, 0x3A	; 58
    28b6:	08 f0       	brcs	.+2      	; 0x28ba <__ftoa_engine+0x180>
    28b8:	70 e3       	ldi	r23, 0x30	; 48
    28ba:	7c 93       	st	X, r23
    28bc:	20 13       	cpse	r18, r16
    28be:	b8 f7       	brcc	.-18     	; 0x28ae <__ftoa_engine+0x174>
    28c0:	7e 91       	ld	r23, -X
    28c2:	70 61       	ori	r23, 0x10	; 16
    28c4:	7d 93       	st	X+, r23
    28c6:	30 f0       	brcs	.+12     	; 0x28d4 <__ftoa_engine+0x19a>
    28c8:	83 95       	inc	r24
    28ca:	71 e3       	ldi	r23, 0x31	; 49
    28cc:	7d 93       	st	X+, r23
    28ce:	70 e3       	ldi	r23, 0x30	; 48
    28d0:	2a 95       	dec	r18
    28d2:	e1 f7       	brne	.-8      	; 0x28cc <__ftoa_engine+0x192>
    28d4:	11 24       	eor	r1, r1
    28d6:	ef 90       	pop	r14
    28d8:	ff 90       	pop	r15
    28da:	0f 91       	pop	r16
    28dc:	1f 91       	pop	r17
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	99 27       	eor	r25, r25
    28e4:	87 fd       	sbrc	r24, 7
    28e6:	90 95       	com	r25
    28e8:	08 95       	ret

000028ea <strrev>:
    28ea:	dc 01       	movw	r26, r24
    28ec:	fc 01       	movw	r30, r24
    28ee:	67 2f       	mov	r22, r23
    28f0:	71 91       	ld	r23, Z+
    28f2:	77 23       	and	r23, r23
    28f4:	e1 f7       	brne	.-8      	; 0x28ee <strrev+0x4>
    28f6:	32 97       	sbiw	r30, 0x02	; 2
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <strrev+0x18>
    28fa:	7c 91       	ld	r23, X
    28fc:	6d 93       	st	X+, r22
    28fe:	70 83       	st	Z, r23
    2900:	62 91       	ld	r22, -Z
    2902:	ae 17       	cp	r26, r30
    2904:	bf 07       	cpc	r27, r31
    2906:	c8 f3       	brcs	.-14     	; 0x28fa <strrev+0x10>
    2908:	08 95       	ret

0000290a <__fp_mintl>:
    290a:	88 23       	and	r24, r24
    290c:	71 f4       	brne	.+28     	; 0x292a <__fp_mintl+0x20>
    290e:	77 23       	and	r23, r23
    2910:	21 f0       	breq	.+8      	; 0x291a <__fp_mintl+0x10>
    2912:	98 50       	subi	r25, 0x08	; 8
    2914:	87 2b       	or	r24, r23
    2916:	76 2f       	mov	r23, r22
    2918:	07 c0       	rjmp	.+14     	; 0x2928 <__fp_mintl+0x1e>
    291a:	66 23       	and	r22, r22
    291c:	11 f4       	brne	.+4      	; 0x2922 <__fp_mintl+0x18>
    291e:	99 27       	eor	r25, r25
    2920:	0d c0       	rjmp	.+26     	; 0x293c <__fp_mintl+0x32>
    2922:	90 51       	subi	r25, 0x10	; 16
    2924:	86 2b       	or	r24, r22
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	2a f0       	brmi	.+10     	; 0x2936 <__fp_mintl+0x2c>
    292c:	9a 95       	dec	r25
    292e:	66 0f       	add	r22, r22
    2930:	77 1f       	adc	r23, r23
    2932:	88 1f       	adc	r24, r24
    2934:	da f7       	brpl	.-10     	; 0x292c <__fp_mintl+0x22>
    2936:	88 0f       	add	r24, r24
    2938:	96 95       	lsr	r25
    293a:	87 95       	ror	r24
    293c:	97 f9       	bld	r25, 7
    293e:	08 95       	ret

00002940 <__fp_mpack>:
    2940:	9f 3f       	cpi	r25, 0xFF	; 255
    2942:	31 f0       	breq	.+12     	; 0x2950 <__fp_mpack_finite+0xc>

00002944 <__fp_mpack_finite>:
    2944:	91 50       	subi	r25, 0x01	; 1
    2946:	20 f4       	brcc	.+8      	; 0x2950 <__fp_mpack_finite+0xc>
    2948:	87 95       	ror	r24
    294a:	77 95       	ror	r23
    294c:	67 95       	ror	r22
    294e:	b7 95       	ror	r27
    2950:	88 0f       	add	r24, r24
    2952:	91 1d       	adc	r25, r1
    2954:	96 95       	lsr	r25
    2956:	87 95       	ror	r24
    2958:	97 f9       	bld	r25, 7
    295a:	08 95       	ret

0000295c <__fp_split3>:
    295c:	57 fd       	sbrc	r21, 7
    295e:	90 58       	subi	r25, 0x80	; 128
    2960:	44 0f       	add	r20, r20
    2962:	55 1f       	adc	r21, r21
    2964:	59 f0       	breq	.+22     	; 0x297c <__fp_splitA+0x10>
    2966:	5f 3f       	cpi	r21, 0xFF	; 255
    2968:	71 f0       	breq	.+28     	; 0x2986 <__fp_splitA+0x1a>
    296a:	47 95       	ror	r20

0000296c <__fp_splitA>:
    296c:	88 0f       	add	r24, r24
    296e:	97 fb       	bst	r25, 7
    2970:	99 1f       	adc	r25, r25
    2972:	61 f0       	breq	.+24     	; 0x298c <__fp_splitA+0x20>
    2974:	9f 3f       	cpi	r25, 0xFF	; 255
    2976:	79 f0       	breq	.+30     	; 0x2996 <__fp_splitA+0x2a>
    2978:	87 95       	ror	r24
    297a:	08 95       	ret
    297c:	12 16       	cp	r1, r18
    297e:	13 06       	cpc	r1, r19
    2980:	14 06       	cpc	r1, r20
    2982:	55 1f       	adc	r21, r21
    2984:	f2 cf       	rjmp	.-28     	; 0x296a <__fp_split3+0xe>
    2986:	46 95       	lsr	r20
    2988:	f1 df       	rcall	.-30     	; 0x296c <__fp_splitA>
    298a:	08 c0       	rjmp	.+16     	; 0x299c <__fp_splitA+0x30>
    298c:	16 16       	cp	r1, r22
    298e:	17 06       	cpc	r1, r23
    2990:	18 06       	cpc	r1, r24
    2992:	99 1f       	adc	r25, r25
    2994:	f1 cf       	rjmp	.-30     	; 0x2978 <__fp_splitA+0xc>
    2996:	86 95       	lsr	r24
    2998:	71 05       	cpc	r23, r1
    299a:	61 05       	cpc	r22, r1
    299c:	08 94       	sec
    299e:	08 95       	ret

000029a0 <__fp_zero>:
    29a0:	e8 94       	clt

000029a2 <__fp_szero>:
    29a2:	bb 27       	eor	r27, r27
    29a4:	66 27       	eor	r22, r22
    29a6:	77 27       	eor	r23, r23
    29a8:	cb 01       	movw	r24, r22
    29aa:	97 f9       	bld	r25, 7
    29ac:	08 95       	ret

000029ae <__udivmodhi4>:
    29ae:	aa 1b       	sub	r26, r26
    29b0:	bb 1b       	sub	r27, r27
    29b2:	51 e1       	ldi	r21, 0x11	; 17
    29b4:	07 c0       	rjmp	.+14     	; 0x29c4 <__udivmodhi4_ep>

000029b6 <__udivmodhi4_loop>:
    29b6:	aa 1f       	adc	r26, r26
    29b8:	bb 1f       	adc	r27, r27
    29ba:	a6 17       	cp	r26, r22
    29bc:	b7 07       	cpc	r27, r23
    29be:	10 f0       	brcs	.+4      	; 0x29c4 <__udivmodhi4_ep>
    29c0:	a6 1b       	sub	r26, r22
    29c2:	b7 0b       	sbc	r27, r23

000029c4 <__udivmodhi4_ep>:
    29c4:	88 1f       	adc	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	5a 95       	dec	r21
    29ca:	a9 f7       	brne	.-22     	; 0x29b6 <__udivmodhi4_loop>
    29cc:	80 95       	com	r24
    29ce:	90 95       	com	r25
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	08 95       	ret

000029d6 <_exit>:
    29d6:	f8 94       	cli

000029d8 <__stop_program>:
    29d8:	ff cf       	rjmp	.-2      	; 0x29d8 <__stop_program>
